{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/button/button_icon/button_icon.tsx\",\n  _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/** @jsxImportSource @emotion/react */\nimport classNames from \"classnames\";\nimport { EuiThemeProvider, getSecureRelForTarget, useEuiTheme } from \"../../services\";\nimport { keysOf } from \"../../common\";\nimport { EuiIcon } from \"../../icon\";\nimport { EuiLoadingSpinner } from \"../../loading\";\nimport { euiButtonEmptyColor, useEuiButtonColorCSS } from \"../../themes/amsterdam/global_styling/mixins/button\";\nimport { isButtonDisabled } from \"../button_display/_button_display\";\n/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst displayToClassNameMap = {\n  base: null,\n  empty: \"euiButtonIcon--empty\",\n  fill: \"euiButtonIcon--fill\"\n};\nexport const DISPLAYS = keysOf(displayToClassNameMap);\nconst sizeToClassNameMap = {\n  xs: \"euiButtonIcon--xSmall\",\n  s: \"euiButtonIcon--small\",\n  m: \"euiButtonIcon--medium\"\n};\nexport const SIZES = keysOf(sizeToClassNameMap);\nexport const EuiButtonIcon = props => {\n  _s();\n  const {\n    className,\n    iconType,\n    iconSize = \"m\",\n    color: _color = \"primary\",\n    isDisabled: _isDisabled,\n    disabled,\n    href,\n    type = \"button\",\n    display = \"empty\",\n    target,\n    rel,\n    size = \"xs\",\n    buttonRef,\n    isSelected,\n    isLoading,\n    ...rest\n  } = props;\n  const euiThemeContext = useEuiTheme();\n  const isDisabled = isButtonDisabled({\n    isDisabled: _isDisabled || disabled,\n    href,\n    isLoading\n  });\n  const ariaHidden = rest[\"aria-hidden\"];\n  const isAriaHidden = ariaHidden === \"true\" || ariaHidden === true;\n  if (!rest[\"aria-label\"] && !rest[\"aria-labelledby\"] && !isAriaHidden) {\n    console.warn(`EuiButtonIcon requires aria-label or aria-labelledby to be specified because icon-only\n      buttons are screen-reader-inaccessible without them.`);\n  }\n\n  // eslint-disable-next-line no-nested-ternary\n  const color = isDisabled ? \"disabled\" : _color === \"ghost\" ? \"text\" : _color;\n  const styles = {\n    euiButtonIcon: css``,\n    colors: useEuiButtonColorCSS({\n      display\n    }),\n    // Temporary extra style for empty `:hover` state until we decide how to handle universally\n    hoverStyles: css`\n      &:hover {\n        background-color: ${euiButtonEmptyColor(euiThemeContext, color).backgroundColor};\n      }\n    `\n  };\n  const cssStyles = [styles.euiButtonIcon, styles.colors[color], display === \"empty\" && styles.hoverStyles];\n  const classes = classNames(\"euiButtonIcon\", size && sizeToClassNameMap[size], className);\n  if (_color === \"ghost\") {\n    // INCEPTION: If `ghost`, re-implement with a wrapping dark mode theme provider\n    return _jsxDEV(EuiThemeProvider, {\n      colorMode: \"dark\",\n      children: _jsxDEV(EuiButtonIcon, {\n        ...props,\n        color: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Add an icon to the button if one exists.\n  let buttonIcon;\n  if (iconType && !isLoading) {\n    buttonIcon = _jsxDEV(EuiIcon, {\n      className: \"euiButtonIcon__icon\",\n      type: iconType,\n      size: iconSize,\n      \"aria-hidden\": \"true\",\n      color: \"inherit\" // forces the icon to inherit its parent color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n\n  // `original` size doesn't exist in `EuiLoadingSpinner`\n  // when the `iconSize` is `original` we don't pass any size to the `EuiLoadingSpinner`\n  // so it gets the default size\n  const loadingSize = iconSize === \"original\" ? undefined : iconSize;\n  if (iconType && isLoading) {\n    buttonIcon = _jsxDEV(EuiLoadingSpinner, {\n      size: loadingSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 18\n    }, this);\n  }\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({\n      href,\n      target,\n      rel\n    });\n    return _jsxDEV(\"a\", {\n      css: cssStyles,\n      tabIndex: isAriaHidden ? -1 : undefined,\n      className: classes,\n      href: href,\n      target: target,\n      rel: secureRel,\n      ref: buttonRef,\n      ...rest,\n      children: buttonIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this);\n  }\n  let buttonType;\n  return _jsxDEV(\"button\", {\n    css: cssStyles,\n    tabIndex: isAriaHidden ? -1 : undefined,\n    disabled: isDisabled,\n    className: classes,\n    \"aria-pressed\": isSelected,\n    type: type,\n    ref: buttonRef,\n    ...rest,\n    children: buttonIcon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(EuiButtonIcon, \"LykfhWvJ//m6EjplhxJ7toVF67w=\", false, function () {\n  return [useEuiTheme, useEuiButtonColorCSS];\n});\n_c = EuiButtonIcon;\nvar _c;\n$RefreshReg$(_c, \"EuiButtonIcon\");","map":{"version":3,"names":["classNames","EuiThemeProvider","getSecureRelForTarget","useEuiTheme","keysOf","EuiIcon","EuiLoadingSpinner","euiButtonEmptyColor","useEuiButtonColorCSS","isButtonDisabled","css","displayToClassNameMap","base","empty","fill","DISPLAYS","sizeToClassNameMap","xs","s","m","SIZES","EuiButtonIcon","props","className","iconType","iconSize","color","_color","isDisabled","_isDisabled","disabled","href","type","display","target","rel","size","buttonRef","isSelected","isLoading","rest","euiThemeContext","ariaHidden","isAriaHidden","console","warn","styles","euiButtonIcon","colors","hoverStyles","backgroundColor","cssStyles","classes","buttonIcon","loadingSize","undefined","secureRel","buttonType"],"sources":["/Users/nikita/Downloads/super_date_picker/src/button/button_icon/button_icon.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  FunctionComponent,\n  Ref,\n} from \"react\";\n/** @jsxImportSource @emotion/react */\nimport classNames from \"classnames\";\n\nimport {\n  EuiThemeProvider,\n  getSecureRelForTarget,\n  useEuiTheme,\n} from \"../../services\";\nimport {\n  CommonProps,\n  ExclusiveUnion,\n  PropsForAnchor,\n  PropsForButton,\n  keysOf,\n} from \"../../common\";\n\nimport { IconType, IconSize, EuiIcon } from \"../../icon\";\n\nimport { EuiLoadingSpinner } from \"../../loading\";\n\nimport {\n  euiButtonEmptyColor,\n  useEuiButtonColorCSS,\n  _EuiButtonColor,\n} from \"../../themes/amsterdam/global_styling/mixins/button\";\nimport { isButtonDisabled } from \"../button_display/_button_display\";\n/** @jsxImportSource @emotion/react */ import { css } from \"@emotion/react\";\n\nconst displayToClassNameMap = {\n  base: null,\n  empty: \"euiButtonIcon--empty\",\n  fill: \"euiButtonIcon--fill\",\n};\n\nexport const DISPLAYS = keysOf(displayToClassNameMap);\ntype EuiButtonIconDisplay = keyof typeof displayToClassNameMap;\n\nexport interface EuiButtonIconProps extends CommonProps {\n  iconType: IconType;\n  /**\n   * Any of the named color palette options.\n   * **`'ghost'` is set for deprecation. Use EuiThemeProvide.colorMode = 'dark' instead.**\n   */\n  color?: _EuiButtonColor | \"ghost\";\n  \"aria-label\"?: string;\n  \"aria-labelledby\"?: string;\n  isDisabled?: boolean;\n  /**\n   * Overall size of button.\n   * Matches the sizes of other EuiButtons\n   */\n  size?: EuiButtonIconSizes;\n  /**\n   * Size of the icon only.\n   * This will not affect the overall size of the button\n   */\n  iconSize?: IconSize;\n  /**\n   * Applies the boolean state as the `aria-pressed` property to create a toggle button.\n   * *Only use when the readable text does not change between states.*\n   */\n  isSelected?: boolean;\n  /**\n   * Sets the display style for matching other EuiButton types.\n   * `base` is equivalent to a typical EuiButton\n   * `fill` is equivalent to a filled EuiButton\n   * `empty` (default) is equivalent to an EuiButtonEmpty\n   */\n  display?: EuiButtonIconDisplay;\n  /**\n   * Disables the button and changes the icon to a loading spinner\n   */\n  isLoading?: boolean;\n}\n\nexport type EuiButtonIconPropsForAnchor = {\n  type?: string;\n} & PropsForAnchor<\n  EuiButtonIconProps,\n  {\n    buttonRef?: Ref<HTMLAnchorElement>;\n  }\n>;\n\nexport type EuiButtonIconPropsForButton = {\n  type?: \"submit\" | \"reset\" | \"button\";\n} & PropsForButton<\n  EuiButtonIconProps,\n  {\n    buttonRef?: Ref<HTMLButtonElement>;\n  }\n>;\n\ntype Props = ExclusiveUnion<\n  EuiButtonIconPropsForAnchor,\n  EuiButtonIconPropsForButton\n>;\n\nconst sizeToClassNameMap = {\n  xs: \"euiButtonIcon--xSmall\",\n  s: \"euiButtonIcon--small\",\n  m: \"euiButtonIcon--medium\",\n};\n\nexport type EuiButtonIconSizes = keyof typeof sizeToClassNameMap;\n\nexport const SIZES = keysOf(sizeToClassNameMap);\n\nexport const EuiButtonIcon: FunctionComponent<Props> = (props) => {\n  const {\n    className,\n    iconType,\n    iconSize = \"m\",\n    color: _color = \"primary\",\n    isDisabled: _isDisabled,\n    disabled,\n    href,\n    type = \"button\",\n    display = \"empty\",\n    target,\n    rel,\n    size = \"xs\",\n    buttonRef,\n    isSelected,\n    isLoading,\n    ...rest\n  } = props;\n\n  const euiThemeContext = useEuiTheme();\n  const isDisabled = isButtonDisabled({\n    isDisabled: _isDisabled || disabled,\n    href,\n    isLoading,\n  });\n\n  const ariaHidden = rest[\"aria-hidden\"];\n  const isAriaHidden = ariaHidden === \"true\" || ariaHidden === true;\n\n  if (!rest[\"aria-label\"] && !rest[\"aria-labelledby\"] && !isAriaHidden) {\n    console.warn(\n      `EuiButtonIcon requires aria-label or aria-labelledby to be specified because icon-only\n      buttons are screen-reader-inaccessible without them.`\n    );\n  }\n\n  // eslint-disable-next-line no-nested-ternary\n  const color = isDisabled ? \"disabled\" : _color === \"ghost\" ? \"text\" : _color;\n\n  const styles = {\n    euiButtonIcon: css``,\n    colors: useEuiButtonColorCSS({ display }),\n    // Temporary extra style for empty `:hover` state until we decide how to handle universally\n    hoverStyles: css`\n      &:hover {\n        background-color: ${euiButtonEmptyColor(euiThemeContext, color)\n          .backgroundColor};\n      }\n    `,\n  };\n  const cssStyles = [\n    styles.euiButtonIcon,\n    styles.colors[color],\n    display === \"empty\" && styles.hoverStyles,\n  ];\n\n  const classes = classNames(\n    \"euiButtonIcon\",\n    size && sizeToClassNameMap[size],\n    className\n  );\n\n  if (_color === \"ghost\") {\n    // INCEPTION: If `ghost`, re-implement with a wrapping dark mode theme provider\n    return (\n      <EuiThemeProvider colorMode=\"dark\">\n        <EuiButtonIcon {...props} color=\"text\" />\n      </EuiThemeProvider>\n    );\n  }\n\n  // Add an icon to the button if one exists.\n  let buttonIcon;\n\n  if (iconType && !isLoading) {\n    buttonIcon = (\n      <EuiIcon\n        className=\"euiButtonIcon__icon\"\n        type={iconType}\n        size={iconSize}\n        aria-hidden=\"true\"\n        color=\"inherit\" // forces the icon to inherit its parent color\n      />\n    );\n  }\n\n  // `original` size doesn't exist in `EuiLoadingSpinner`\n  // when the `iconSize` is `original` we don't pass any size to the `EuiLoadingSpinner`\n  // so it gets the default size\n  const loadingSize = iconSize === \"original\" ? undefined : iconSize;\n\n  if (iconType && isLoading) {\n    buttonIcon = <EuiLoadingSpinner size={loadingSize} />;\n  }\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({ href, target, rel });\n\n    return (\n      <a\n        css={cssStyles}\n        tabIndex={isAriaHidden ? -1 : undefined}\n        className={classes}\n        href={href}\n        target={target}\n        rel={secureRel}\n        ref={buttonRef as Ref<HTMLAnchorElement>}\n        {...(rest as AnchorHTMLAttributes<HTMLAnchorElement>)}\n      >\n        {buttonIcon}\n      </a>\n    );\n  }\n\n  let buttonType: ButtonHTMLAttributes<HTMLButtonElement>[\"type\"];\n  return (\n    <button\n      css={cssStyles}\n      tabIndex={isAriaHidden ? -1 : undefined}\n      disabled={isDisabled}\n      className={classes}\n      aria-pressed={isSelected}\n      type={type as typeof buttonType}\n      ref={buttonRef as Ref<HTMLButtonElement>}\n      {...(rest as ButtonHTMLAttributes<HTMLButtonElement>)}\n    >\n      {buttonIcon}\n    </button>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}