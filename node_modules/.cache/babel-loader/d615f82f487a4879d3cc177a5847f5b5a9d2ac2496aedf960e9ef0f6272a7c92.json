{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n// Convert hexadecimal color into an array of RGB integer values\n// Modified from https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n\nexport function hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (_m, r1, g1, b1) => r1 + r1 + g1 + g1 + b1 + b1);\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (result) {\n    const [, r, g, b] = result;\n    return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16)];\n  }\n\n  // fallback to prevent errors\n  return [0, 0, 0];\n}","map":{"version":3,"names":["hexToRgb","hex","shorthandRegex","replace","_m","r1","g1","b1","result","exec","r","g","b","parseInt"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/color/hex_to_rgb.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n// Convert hexadecimal color into an array of RGB integer values\n// Modified from https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\n\nimport { rgbDef } from './color_types';\n\nexport function hexToRgb(hex: string): rgbDef {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(\n    shorthandRegex,\n    (_m, r1, g1, b1) => r1 + r1 + g1 + g1 + b1 + b1\n  );\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n\n  if (result) {\n    const [, r, g, b] = result;\n    return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16)];\n  }\n\n  // fallback to prevent errors\n  return [0, 0, 0];\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA,OAAO,SAASA,QAAQ,CAACC,GAAW,EAAU;EAC5C;EACA,MAAMC,cAAc,GAAG,kCAAkC;EACzDD,GAAG,GAAGA,GAAG,CAACE,OAAO,CACfD,cAAc,EACd,CAACE,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,KAAKF,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAChD;EAED,MAAMC,MAAM,GAAG,2CAA2C,CAACC,IAAI,CAACR,GAAG,CAAE;EAErE,IAAIO,MAAM,EAAE;IACV,MAAM,GAAGE,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGJ,MAAM;IAC1B,OAAO,CAACK,QAAQ,CAACH,CAAC,EAAE,EAAE,CAAC,EAAEG,QAAQ,CAACF,CAAC,EAAE,EAAE,CAAC,EAAEE,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC,CAAC;EAC5D;;EAEA;EACA,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}