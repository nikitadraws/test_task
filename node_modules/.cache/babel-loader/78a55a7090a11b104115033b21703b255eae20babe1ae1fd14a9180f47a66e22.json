{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nexport const isWithinRange = (min, max, value) => {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n  const val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n};\n\n// 1e-6 covers up to 10,000,000,000 factored by a decimal\nconst EPSILON = 1e-6;\nexport function isEvenlyDivisibleBy(num, factor) {\n  const remainder = num % factor;\n\n  // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n  return Math.min(remainder,\n  // remainder may be smallest, it is 0 in the well-formed case\n  Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n  ) < EPSILON;\n}","map":{"version":3,"names":["isWithinRange","min","max","value","val","Number","EPSILON","isEvenlyDivisibleBy","num","factor","remainder","Math","abs"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/number/number.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nexport const isWithinRange = (\n  min: number | string,\n  max: number | string,\n  value: number | string\n) => {\n  if (min === '' || max === '' || value === '') {\n    return false;\n  }\n\n  const val = Number(value);\n  return Number(min) <= val && val <= Number(max);\n};\n\n// 1e-6 covers up to 10,000,000,000 factored by a decimal\nconst EPSILON = 1e-6;\nexport function isEvenlyDivisibleBy(num: number, factor: number) {\n  const remainder = num % factor;\n\n  // due to floating point issues the remainder needs to be within a margin instead of exactly 0\n  // 1 % 0.1          === 0.09999999999999995\n  // 1000000000 % 0.1 === 0.09999994448884877\n  // 1 % 0.05         === 0.04999999999999995\n\n  // Compare the smaller of (remainder, factor - remainder) to EPSILON\n  return (\n    Math.min(\n      remainder, // remainder may be smallest, it is 0 in the well-formed case\n      Math.abs(factor - remainder) // otherwise the positive difference between factor and remainder\n    ) < EPSILON\n  );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,aAAa,GAAG,CAC3BC,GAAoB,EACpBC,GAAoB,EACpBC,KAAsB,KACnB;EACH,IAAIF,GAAG,KAAK,EAAE,IAAIC,GAAG,KAAK,EAAE,IAAIC,KAAK,KAAK,EAAE,EAAE;IAC5C,OAAO,KAAK;EACd;EAEA,MAAMC,GAAG,GAAGC,MAAM,CAACF,KAAK,CAAC;EACzB,OAAOE,MAAM,CAACJ,GAAG,CAAC,IAAIG,GAAG,IAAIA,GAAG,IAAIC,MAAM,CAACH,GAAG,CAAC;AACjD,CAAC;;AAED;AACA,MAAMI,OAAO,GAAG,IAAI;AACpB,OAAO,SAASC,mBAAmB,CAACC,GAAW,EAAEC,MAAc,EAAE;EAC/D,MAAMC,SAAS,GAAGF,GAAG,GAAGC,MAAM;;EAE9B;EACA;EACA;EACA;;EAEA;EACA,OACEE,IAAI,CAACV,GAAG,CACNS,SAAS;EAAE;EACXC,IAAI,CAACC,GAAG,CAACH,MAAM,GAAGC,SAAS,CAAC,CAAC;EAAA,CAC9B,GAAGJ,OAAO;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}