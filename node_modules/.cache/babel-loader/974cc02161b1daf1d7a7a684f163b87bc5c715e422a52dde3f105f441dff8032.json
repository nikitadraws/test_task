{"ast":null,"code":"var _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { EuiObserver } from \"../observer\";\nexport const hasResizeObserver = typeof window !== \"undefined\" && typeof window.ResizeObserver !== \"undefined\";\nexport class EuiResizeObserver extends EuiObserver {\n  constructor() {\n    super(...arguments);\n    this.name = \"EuiResizeObserver\";\n    this.state = {\n      height: 0,\n      width: 0\n    };\n    this.onResize = () => {\n      // `entry.contentRect` provides incomplete `height` and `width` data.\n      // Use `getBoundingClientRect` to account for padding and border.\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly\n      if (!this.childNode) return;\n      const {\n        height,\n        width\n      } = this.childNode.getBoundingClientRect();\n      // Check for actual resize event\n      if (this.state.height === height && this.state.width === width) {\n        return;\n      }\n      this.props.onResize({\n        height,\n        width\n      });\n      this.setState({\n        height,\n        width\n      });\n    };\n    this.beginObserve = () => {\n      // The superclass checks that childNode is not null before invoking\n      // beginObserve()\n      const childNode = this.childNode;\n      this.observer = makeResizeObserver(childNode, this.onResize);\n    };\n  }\n}\nconst makeResizeObserver = (node, callback) => {\n  let observer;\n  if (hasResizeObserver) {\n    observer = new window.ResizeObserver(callback);\n    observer.observe(node);\n  }\n  return observer;\n};\nexport const useResizeObserver = (container, dimension) => {\n  _s();\n  const [size, _setSize] = useState({\n    width: 0,\n    height: 0\n  });\n\n  // _currentDimensions and _setSize are used to only store the\n  // new state (and trigger a re-render) when the new dimensions actually differ\n  const _currentDimensions = useRef(size);\n  const setSize = useCallback(dimensions => {\n    const doesWidthMatter = dimension !== \"height\";\n    const doesHeightMatter = dimension !== \"width\";\n    if (doesWidthMatter && _currentDimensions.current.width !== dimensions.width || doesHeightMatter && _currentDimensions.current.height !== dimensions.height) {\n      _currentDimensions.current = dimensions;\n      _setSize(dimensions);\n    }\n  }, [dimension]);\n  useEffect(() => {\n    if (container != null) {\n      // ResizeObserver's first call to the observation callback is scheduled in the future\n      // so find the container's initial dimensions now\n      const boundingRect = container.getBoundingClientRect();\n      setSize({\n        width: boundingRect.width,\n        height: boundingRect.height\n      });\n      const observer = makeResizeObserver(container, () => {\n        // `entry.contentRect` provides incomplete `height` and `width` data.\n        // Use `getBoundingClientRect` to account for padding and border.\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly\n        const {\n          height,\n          width\n        } = container.getBoundingClientRect();\n        setSize({\n          width,\n          height\n        });\n      });\n      return () => observer && observer.disconnect();\n    } else {\n      setSize({\n        width: 0,\n        height: 0\n      });\n    }\n  }, [container, setSize]);\n  return size;\n};\n_s(useResizeObserver, \"9L0i/L7jo5IeXhHz+ZlwoqWPffM=\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","EuiObserver","hasResizeObserver","window","ResizeObserver","EuiResizeObserver","name","state","height","width","onResize","childNode","getBoundingClientRect","props","setState","beginObserve","observer","makeResizeObserver","node","callback","observe","useResizeObserver","container","dimension","size","_setSize","_currentDimensions","setSize","dimensions","doesWidthMatter","doesHeightMatter","current","boundingRect","disconnect"],"sources":["/Users/nikita/Downloads/super_date_picker/src/observer/resize_observer/resize_observer.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\nimport { EuiObserver } from \"../observer\";\n\nexport interface EuiResizeObserverProps {\n  /**\n   * ReactNode to render as this component's content\n   */\n  children: (ref: (e: HTMLElement | null) => void) => ReactNode;\n  onResize: (dimensions: { height: number; width: number }) => void;\n}\n\nexport const hasResizeObserver =\n  typeof window !== \"undefined\" && typeof window.ResizeObserver !== \"undefined\";\n\nexport class EuiResizeObserver extends EuiObserver<EuiResizeObserverProps> {\n  name = \"EuiResizeObserver\";\n\n  state = {\n    height: 0,\n    width: 0,\n  };\n\n  onResize: ResizeObserverCallback = () => {\n    // `entry.contentRect` provides incomplete `height` and `width` data.\n    // Use `getBoundingClientRect` to account for padding and border.\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly\n    if (!this.childNode) return;\n    const { height, width } = this.childNode.getBoundingClientRect();\n    // Check for actual resize event\n    if (this.state.height === height && this.state.width === width) {\n      return;\n    }\n\n    this.props.onResize({\n      height,\n      width,\n    });\n    this.setState({ height, width });\n  };\n\n  beginObserve = () => {\n    // The superclass checks that childNode is not null before invoking\n    // beginObserve()\n    const childNode = this.childNode!;\n    this.observer = makeResizeObserver(childNode, this.onResize)!;\n  };\n}\n\nconst makeResizeObserver = (\n  node: Element,\n  callback: ResizeObserverCallback\n) => {\n  let observer;\n  if (hasResizeObserver) {\n    observer = new window.ResizeObserver(callback);\n    observer.observe(node);\n  }\n  return observer;\n};\n\nexport const useResizeObserver = (\n  container: Element | null,\n  dimension?: \"width\" | \"height\"\n) => {\n  const [size, _setSize] = useState({ width: 0, height: 0 });\n\n  // _currentDimensions and _setSize are used to only store the\n  // new state (and trigger a re-render) when the new dimensions actually differ\n  const _currentDimensions = useRef(size);\n  const setSize = useCallback(\n    (dimensions: any) => {\n      const doesWidthMatter = dimension !== \"height\";\n      const doesHeightMatter = dimension !== \"width\";\n      if (\n        (doesWidthMatter &&\n          _currentDimensions.current.width !== dimensions.width) ||\n        (doesHeightMatter &&\n          _currentDimensions.current.height !== dimensions.height)\n      ) {\n        _currentDimensions.current = dimensions;\n        _setSize(dimensions);\n      }\n    },\n    [dimension]\n  );\n\n  useEffect(() => {\n    if (container != null) {\n      // ResizeObserver's first call to the observation callback is scheduled in the future\n      // so find the container's initial dimensions now\n      const boundingRect = container.getBoundingClientRect();\n      setSize({\n        width: boundingRect.width,\n        height: boundingRect.height,\n      });\n\n      const observer = makeResizeObserver(container, () => {\n        // `entry.contentRect` provides incomplete `height` and `width` data.\n        // Use `getBoundingClientRect` to account for padding and border.\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMRectReadOnly\n        const { height, width } = container.getBoundingClientRect();\n        setSize({\n          width,\n          height,\n        });\n      });\n\n      return () => observer && observer.disconnect();\n    } else {\n      setSize({ width: 0, height: 0 });\n    }\n  }, [container, setSize]);\n\n  return size;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}