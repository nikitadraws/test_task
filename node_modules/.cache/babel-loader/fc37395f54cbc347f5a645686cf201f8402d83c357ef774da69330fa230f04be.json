{"ast":null,"code":"var _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { sortMapBySmallToLargeValues } from '../../services/breakpoint/_sorting';\nimport { useEuiTheme } from '../../services/theme/hooks';\n/**\n * Generates a CSS media query rule string based on the input breakpoint ranges.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['s']) becomes `@media only screen and (min-width: 575px) and (max-width: 767px)`\n * euiBreakpoint(['s', 'l']) becomes `@media only screen and (min-width: 575px) and (max-width: 1199px)`\n *\n * Use the smallest and largest sizes to generate media queries with only min/max-width.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['xs', 'm']) becomes `@media only screen and (max-width: 991px)`\n * euiBreakpoint(['l', 'xl']) becomes `@media only screen and (min-width: 992px)`\n */\nexport const euiBreakpoint = (_ref, sizes) => {\n  let {\n    euiTheme\n  } = _ref;\n  // Ensure we inherit any theme breakpoint overrides & sort by small to large\n  const orderedBreakpoints = Object.keys(sortMapBySmallToLargeValues(euiTheme.breakpoint));\n\n  // Ensure the sizes array is in the correct ascending size order\n  const orderedSizes = sizes.sort((a, b) => orderedBreakpoints.indexOf(a) - orderedBreakpoints.indexOf(b));\n  const firstBreakpoint = orderedSizes[0];\n  const minBreakpointSize = euiTheme.breakpoint[firstBreakpoint];\n  const lastBreakpoint = orderedSizes[sizes.length - 1];\n  let maxBreakpointSize;\n\n  // To get the correct screen range, we set the max-width to the next breakpoint\n  // size in the sizes array (unless the size is already the largest breakpoint)\n  if (lastBreakpoint !== orderedBreakpoints[orderedBreakpoints.length - 1]) {\n    const nextBreakpoint = orderedBreakpoints.indexOf(lastBreakpoint) + 1;\n    maxBreakpointSize = euiTheme.breakpoint[orderedBreakpoints[nextBreakpoint]];\n  }\n  return ['@media only screen', minBreakpointSize ? `(min-width: ${minBreakpointSize}px)` : false,\n  // If 0, don't render a min-width\n  maxBreakpointSize ? `(max-width: ${maxBreakpointSize - 1}px)` : false // If undefined, don't render a max-width\n  ].filter(Boolean).join(' and ');\n};\nexport const useEuiBreakpoint = sizes => {\n  _s();\n  const euiTheme = useEuiTheme();\n  return euiBreakpoint(euiTheme, sizes);\n};\n_s(useEuiBreakpoint, \"Bx9xhCu9FBDDsW1EAb0vyzghspA=\", false, function () {\n  return [useEuiTheme];\n});","map":{"version":3,"names":["sortMapBySmallToLargeValues","useEuiTheme","euiBreakpoint","sizes","euiTheme","orderedBreakpoints","Object","keys","breakpoint","orderedSizes","sort","a","b","indexOf","firstBreakpoint","minBreakpointSize","lastBreakpoint","length","maxBreakpointSize","nextBreakpoint","filter","Boolean","join","useEuiBreakpoint"],"sources":["/Users/nikita/Downloads/super_date_picker/src/global_styling/mixins/_responsive.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { sortMapBySmallToLargeValues } from '../../services/breakpoint/_sorting';\nimport { useEuiTheme, UseEuiTheme } from '../../services/theme/hooks';\nimport { _EuiThemeBreakpoint } from '../variables';\n\n/**\n * Generates a CSS media query rule string based on the input breakpoint ranges.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['s']) becomes `@media only screen and (min-width: 575px) and (max-width: 767px)`\n * euiBreakpoint(['s', 'l']) becomes `@media only screen and (min-width: 575px) and (max-width: 1199px)`\n *\n * Use the smallest and largest sizes to generate media queries with only min/max-width.\n * Examples with default theme breakpoints:\n *\n * euiBreakpoint(['xs', 'm']) becomes `@media only screen and (max-width: 991px)`\n * euiBreakpoint(['l', 'xl']) becomes `@media only screen and (min-width: 992px)`\n */\nexport const euiBreakpoint = (\n  { euiTheme }: UseEuiTheme,\n  sizes: [_EuiThemeBreakpoint, ..._EuiThemeBreakpoint[]]\n) => {\n  // Ensure we inherit any theme breakpoint overrides & sort by small to large\n  const orderedBreakpoints = Object.keys(\n    sortMapBySmallToLargeValues(euiTheme.breakpoint)\n  );\n\n  // Ensure the sizes array is in the correct ascending size order\n  const orderedSizes = sizes.sort(\n    (a, b) => orderedBreakpoints.indexOf(a) - orderedBreakpoints.indexOf(b)\n  );\n\n  const firstBreakpoint = orderedSizes[0];\n  const minBreakpointSize = euiTheme.breakpoint[firstBreakpoint];\n\n  const lastBreakpoint = orderedSizes[sizes.length - 1];\n  let maxBreakpointSize: number | undefined;\n\n  // To get the correct screen range, we set the max-width to the next breakpoint\n  // size in the sizes array (unless the size is already the largest breakpoint)\n  if (lastBreakpoint !== orderedBreakpoints[orderedBreakpoints.length - 1]) {\n    const nextBreakpoint = orderedBreakpoints.indexOf(lastBreakpoint) + 1;\n    maxBreakpointSize = euiTheme.breakpoint[orderedBreakpoints[nextBreakpoint]];\n  }\n\n  return [\n    '@media only screen',\n    minBreakpointSize ? `(min-width: ${minBreakpointSize}px)` : false, // If 0, don't render a min-width\n    maxBreakpointSize ? `(max-width: ${maxBreakpointSize - 1}px)` : false, // If undefined, don't render a max-width\n  ]\n    .filter(Boolean)\n    .join(' and ');\n};\n\nexport const useEuiBreakpoint = (\n  sizes: [_EuiThemeBreakpoint, ..._EuiThemeBreakpoint[]]\n) => {\n  const euiTheme = useEuiTheme();\n  return euiBreakpoint(euiTheme, sizes);\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,2BAA2B,QAAQ,oCAAoC;AAChF,SAASC,WAAW,QAAqB,4BAA4B;AAGrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,OAE3BC,KAAsD,KACnD;EAAA,IAFH;IAAEC;EAAsB,CAAC;EAGzB;EACA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CACpCP,2BAA2B,CAACI,QAAQ,CAACI,UAAU,CAAC,CACjD;;EAED;EACA,MAAMC,YAAY,GAAGN,KAAK,CAACO,IAAI,CAC7B,CAACC,CAAC,EAAEC,CAAC,KAAKP,kBAAkB,CAACQ,OAAO,CAACF,CAAC,CAAC,GAAGN,kBAAkB,CAACQ,OAAO,CAACD,CAAC,CAAC,CACxE;EAED,MAAME,eAAe,GAAGL,YAAY,CAAC,CAAC,CAAC;EACvC,MAAMM,iBAAiB,GAAGX,QAAQ,CAACI,UAAU,CAACM,eAAe,CAAC;EAE9D,MAAME,cAAc,GAAGP,YAAY,CAACN,KAAK,CAACc,MAAM,GAAG,CAAC,CAAC;EACrD,IAAIC,iBAAqC;;EAEzC;EACA;EACA,IAAIF,cAAc,KAAKX,kBAAkB,CAACA,kBAAkB,CAACY,MAAM,GAAG,CAAC,CAAC,EAAE;IACxE,MAAME,cAAc,GAAGd,kBAAkB,CAACQ,OAAO,CAACG,cAAc,CAAC,GAAG,CAAC;IACrEE,iBAAiB,GAAGd,QAAQ,CAACI,UAAU,CAACH,kBAAkB,CAACc,cAAc,CAAC,CAAC;EAC7E;EAEA,OAAO,CACL,oBAAoB,EACpBJ,iBAAiB,GAAI,eAAcA,iBAAkB,KAAI,GAAG,KAAK;EAAE;EACnEG,iBAAiB,GAAI,eAAcA,iBAAiB,GAAG,CAAE,KAAI,GAAG,KAAK,CAAE;EAAA,CACxE,CACEE,MAAM,CAACC,OAAO,CAAC,CACfC,IAAI,CAAC,OAAO,CAAC;AAClB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAC3BpB,KAAsD,IACnD;EAAA;EACH,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,OAAOC,aAAa,CAACE,QAAQ,EAAED,KAAK,CAAC;AACvC,CAAC;AAAC,GALWoB,gBAAgB;EAAA,QAGVtB,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}