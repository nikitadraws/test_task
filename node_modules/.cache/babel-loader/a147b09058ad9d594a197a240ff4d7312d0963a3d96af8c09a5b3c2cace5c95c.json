{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { COLOR_MODES_STANDARD, COLOR_MODES_INVERSE } from './types';\nexport const DEFAULT_COLOR_MODE = COLOR_MODES_STANDARD.light;\n\n/**\n * Returns whether the parameter is an object\n * @param {any} obj - Anything\n */\nconst isObject = obj => obj && typeof obj === 'object';\n\n/**\n * Returns whether the provided color mode is `inverse`\n * @param {string} colorMode - `light`, `dark`, or `inverse`\n */\nexport const isInverseColorMode = colorMode => {\n  return colorMode === COLOR_MODES_INVERSE;\n};\n\n/**\n * Returns the color mode configured in the current EuiThemeProvider.\n * Returns the parent color mode if none is explicity set.\n * @param {string} coloMode - `light`, `dark`, or `inverse`\n * @param {string} parentColorMode - `LIGHT` or `DARK`; used as the fallback\n */\nexport const getColorMode = (colorMode, parentColorMode) => {\n  if (colorMode == null) {\n    return parentColorMode || DEFAULT_COLOR_MODE;\n  }\n  const mode = colorMode.toUpperCase();\n  if (isInverseColorMode(mode)) {\n    return parentColorMode === COLOR_MODES_STANDARD.dark || parentColorMode === undefined ? COLOR_MODES_STANDARD.light : COLOR_MODES_STANDARD.dark;\n  } else {\n    return mode;\n  }\n};\n\n/**\n * Returns a value at a given path on an object.\n * If `colorMode` is provided, will scope the value to the appropriate color mode key (LIGHT\\DARK)\n * @param {object} model - Object\n * @param {string} _path - Dot-notated string to a path on the object\n * @param {string} colorMode - `light` or `dark`\n */\nexport const getOn = (model, _path, colorMode) => {\n  const path = _path.split('.');\n  let node = model;\n  while (path.length) {\n    const segment = path.shift();\n    if (node.hasOwnProperty(segment) === false) {\n      if (colorMode && node.hasOwnProperty(colorMode) === true && node[colorMode].hasOwnProperty(segment) === true) {\n        if (node[colorMode][segment] instanceof Computed) {\n          node = node[colorMode][segment].getValue(null, null, node, colorMode);\n        } else {\n          node = node[colorMode][segment];\n        }\n      } else {\n        return undefined;\n      }\n    } else {\n      if (node[segment] instanceof Computed) {\n        node = node[segment].getValue(null, null, node, colorMode);\n      } else {\n        node = node[segment];\n      }\n    }\n  }\n  return node;\n};\n\n/**\n * Sets a value at a given path on an object.\n * @param {object} model - Object\n * @param {string} _path - Dot-notated string to a path on the object\n * @param {any} string -  The value to set\n */\nexport const setOn = (model, _path, value) => {\n  const path = _path.split('.');\n  const propertyName = path.pop();\n  let node = model;\n  while (path.length) {\n    const segment = path.shift();\n    if (node.hasOwnProperty(segment) === false) {\n      node[segment] = {};\n    }\n    node = node[segment];\n  }\n  node[propertyName] = value;\n  return true;\n};\n\n/**\n * Creates a class to store the `computer` method and its eventual parameters.\n * Allows for on-demand computation with up-to-date parameters via `getValue` method.\n * @constructor\n * @param {function} computer - Function to be computed\n * @param {string | array} dependencies - Dependencies passed to the `computer` as parameters\n */\nexport class Computed {\n  constructor(computer) {\n    let dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.computer = computer;\n    this.dependencies = dependencies;\n  }\n\n  /**\n   * Executes the `computer` method with the current state of the theme\n   * by taking into account previously computed values and modifications.\n   * @param {Proxy | object} base - Computed or uncomputed theme\n   * @param {Proxy | object} modifications - Theme value overrides\n   * @param {object} working - Partially computed theme\n   * @param {string} colorMode - `light` or `dark`\n   */\n  getValue(base) {\n    let modifications = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let working = arguments.length > 2 ? arguments[2] : undefined;\n    let colorMode = arguments.length > 3 ? arguments[3] : undefined;\n    if (!this.dependencies.length) {\n      return this.computer(working);\n    }\n    if (!Array.isArray(this.dependencies)) {\n      var _ref, _getOn;\n      return this.computer((_ref = (_getOn = getOn(working, this.dependencies)) !== null && _getOn !== void 0 ? _getOn : getOn(modifications, this.dependencies, colorMode)) !== null && _ref !== void 0 ? _ref : getOn(base, this.dependencies, colorMode));\n    }\n    return this.computer(this.dependencies.map(dependency => {\n      var _ref2, _getOn2;\n      return (_ref2 = (_getOn2 = getOn(working, dependency)) !== null && _getOn2 !== void 0 ? _getOn2 : getOn(modifications, dependency, colorMode)) !== null && _ref2 !== void 0 ? _ref2 : getOn(base, dependency, colorMode);\n    }));\n  }\n}\n\n/**\n * Returns a Class (`Computed`) that stores the arbitrary computer method\n * and references to its optional dependecies.\n * @param {function} computer - Arbitrary method to be called at compute time.\n * @param {string | array} dependencies - Values that will be provided to `computer` at compute time.\n */\n\nexport function computed(comp, dep) {\n  return new Computed(comp, dep);\n}\n\n/**\n * Takes an uncomputed theme, and computes and returns all values taking\n * into consideration value overrides and configured color mode.\n * Overrides take precedence, and only values in the current color mode\n * are computed and returned.\n * @param {Proxy} base - Object to transform into Proxy\n * @param {Proxy | object} over - Unique identifier or name\n * @param {string} colorMode - `light` or `dark`\n */\nexport const getComputed = (base, over, colorMode) => {\n  const output = {\n    themeName: base.key\n  };\n  function loop(base, over) {\n    let checkExisting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let path = arguments.length > 3 ? arguments[3] : undefined;\n    Object.keys(base).forEach(key => {\n      let newPath = path ? `${path}.${key}` : `${key}`;\n      // @ts-expect-error `key` is not necessarily a colorMode key\n      if ([...Object.values(COLOR_MODES_STANDARD), colorMode].includes(key)) {\n        if (key !== colorMode) {\n          return;\n        } else {\n          const colorModeSegment = new RegExp(`(\\\\.${colorMode}\\\\b)|(\\\\b${colorMode}\\\\.)`);\n          newPath = newPath.replace(colorModeSegment, '');\n        }\n      }\n      const existing = checkExisting && getOn(output, newPath);\n      if (!existing || isObject(existing)) {\n        const baseValue = base[key] instanceof Computed ? base[key].getValue(base.root, over.root, output, colorMode) : base[key];\n        const overValue = over[key] instanceof Computed ? over[key].getValue(base.root, over.root, output, colorMode) : over[key];\n        if (isObject(baseValue) && !Array.isArray(baseValue)) {\n          loop(baseValue, overValue !== null && overValue !== void 0 ? overValue : {}, checkExisting, newPath);\n        } else {\n          setOn(output, newPath, overValue !== null && overValue !== void 0 ? overValue : baseValue);\n        }\n      }\n    });\n  }\n  // Compute standard theme values and apply overrides\n  loop(base, over);\n  // Compute and apply extension values only\n  loop(over, {}, true);\n  return output;\n};\n\n/**\n * Builds a Proxy with a custom `handler` designed to self-reference values\n * and prevent arbitrary value overrides.\n * @param {object} model - Object to transform into Proxy\n * @param {string} key - Unique identifier or name\n */\nexport const buildTheme = (model, key) => {\n  const handler = {\n    getPrototypeOf(target) {\n      return Reflect.getPrototypeOf(target.model);\n    },\n    setPrototypeOf(target, prototype) {\n      return Reflect.setPrototypeOf(target.model, prototype);\n    },\n    isExtensible(target) {\n      return Reflect.isExtensible(target);\n    },\n    preventExtensions(target) {\n      return Reflect.preventExtensions(target.model);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      return Reflect.getOwnPropertyDescriptor(target.model, key);\n    },\n    defineProperty(target, property, attributes) {\n      return Reflect.defineProperty(target.model, property, attributes);\n    },\n    has(target, property) {\n      return Reflect.has(target.model, property);\n    },\n    get(_target, property) {\n      if (property === 'key') {\n        return _target[property];\n      }\n\n      // prevent Safari from locking up when the proxy is used in dev tools\n      // as it doesn't support getPrototypeOf\n      if (property === '__proto__') return {};\n      const target = property === 'root' ? _target : _target.model || _target;\n      // @ts-ignore `string` index signature\n      const value = target[property];\n      if (isObject(value) && !Array.isArray(value)) {\n        return new Proxy({\n          model: value,\n          root: _target.root,\n          key: `_${_target.key}`\n        }, handler);\n      } else {\n        return value;\n      }\n    },\n    set(target) {\n      return target;\n    },\n    deleteProperty(target) {\n      return target;\n    },\n    ownKeys(target) {\n      return Reflect.ownKeys(target.model);\n    },\n    apply(target) {\n      return target;\n    },\n    construct(target) {\n      return target;\n    }\n  };\n  const themeProxy = new Proxy({\n    model,\n    root: model,\n    key\n  }, handler);\n  return themeProxy;\n};\n\n/**\n * Deeply merges two objects, using `source` values whenever possible.\n * @param {object} _target - Object with fallback values\n * @param {object} source - Object with desired values\n */\nexport const mergeDeep = function (_target) {\n  let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const target = {\n    ..._target\n  };\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n  Object.keys(source).forEach(key => {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = mergeDeep({\n        ...targetValue\n      }, {\n        ...sourceValue\n      });\n    } else {\n      target[key] = sourceValue;\n    }\n  });\n  return target;\n};","map":{"version":3,"names":["COLOR_MODES_STANDARD","COLOR_MODES_INVERSE","DEFAULT_COLOR_MODE","light","isObject","obj","isInverseColorMode","colorMode","getColorMode","parentColorMode","mode","toUpperCase","dark","undefined","getOn","model","_path","path","split","node","length","segment","shift","hasOwnProperty","Computed","getValue","setOn","value","propertyName","pop","constructor","computer","dependencies","base","modifications","working","Array","isArray","map","dependency","computed","comp","dep","getComputed","over","output","themeName","key","loop","checkExisting","Object","keys","forEach","newPath","values","includes","colorModeSegment","RegExp","replace","existing","baseValue","root","overValue","buildTheme","handler","getPrototypeOf","target","Reflect","setPrototypeOf","prototype","isExtensible","preventExtensions","getOwnPropertyDescriptor","defineProperty","property","attributes","has","get","_target","Proxy","set","deleteProperty","ownKeys","apply","construct","themeProxy","mergeDeep","source","targetValue","sourceValue"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/theme/utils.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport {\n  EuiThemeColorMode,\n  EuiThemeColorModeInverse,\n  EuiThemeColorModeStandard,\n  EuiThemeModifications,\n  EuiThemeSystem,\n  EuiThemeShape,\n  EuiThemeComputed,\n  COLOR_MODES_STANDARD,\n  COLOR_MODES_INVERSE,\n} from './types';\n\nexport const DEFAULT_COLOR_MODE = COLOR_MODES_STANDARD.light;\n\n/**\n * Returns whether the parameter is an object\n * @param {any} obj - Anything\n */\nconst isObject = (obj: any) => obj && typeof obj === 'object';\n\n/**\n * Returns whether the provided color mode is `inverse`\n * @param {string} colorMode - `light`, `dark`, or `inverse`\n */\nexport const isInverseColorMode = (\n  colorMode?: string\n): colorMode is EuiThemeColorModeInverse => {\n  return colorMode === COLOR_MODES_INVERSE;\n};\n\n/**\n * Returns the color mode configured in the current EuiThemeProvider.\n * Returns the parent color mode if none is explicity set.\n * @param {string} coloMode - `light`, `dark`, or `inverse`\n * @param {string} parentColorMode - `LIGHT` or `DARK`; used as the fallback\n */\nexport const getColorMode = (\n  colorMode?: EuiThemeColorMode,\n  parentColorMode?: EuiThemeColorModeStandard\n): EuiThemeColorModeStandard => {\n  if (colorMode == null) {\n    return parentColorMode || DEFAULT_COLOR_MODE;\n  }\n  const mode = colorMode.toUpperCase() as\n    | EuiThemeColorModeInverse\n    | EuiThemeColorModeStandard;\n  if (isInverseColorMode(mode)) {\n    return parentColorMode === COLOR_MODES_STANDARD.dark ||\n      parentColorMode === undefined\n      ? COLOR_MODES_STANDARD.light\n      : COLOR_MODES_STANDARD.dark;\n  } else {\n    return mode;\n  }\n};\n\n/**\n * Returns a value at a given path on an object.\n * If `colorMode` is provided, will scope the value to the appropriate color mode key (LIGHT\\DARK)\n * @param {object} model - Object\n * @param {string} _path - Dot-notated string to a path on the object\n * @param {string} colorMode - `light` or `dark`\n */\nexport const getOn = (\n  model: { [key: string]: any },\n  _path: string,\n  colorMode?: EuiThemeColorModeStandard\n) => {\n  const path = _path.split('.');\n  let node = model;\n  while (path.length) {\n    const segment = path.shift()!;\n\n    if (node.hasOwnProperty(segment) === false) {\n      if (\n        colorMode &&\n        node.hasOwnProperty(colorMode) === true &&\n        node[colorMode].hasOwnProperty(segment) === true\n      ) {\n        if (node[colorMode][segment] instanceof Computed) {\n          node = node[colorMode][segment].getValue(null, null, node, colorMode);\n        } else {\n          node = node[colorMode][segment];\n        }\n      } else {\n        return undefined;\n      }\n    } else {\n      if (node[segment] instanceof Computed) {\n        node = node[segment].getValue(null, null, node, colorMode);\n      } else {\n        node = node[segment];\n      }\n    }\n  }\n\n  return node;\n};\n\n/**\n * Sets a value at a given path on an object.\n * @param {object} model - Object\n * @param {string} _path - Dot-notated string to a path on the object\n * @param {any} string -  The value to set\n */\nexport const setOn = (\n  model: { [key: string]: any },\n  _path: string,\n  value: any\n) => {\n  const path = _path.split('.');\n  const propertyName = path.pop()!;\n  let node = model;\n\n  while (path.length) {\n    const segment = path.shift()!;\n    if (node.hasOwnProperty(segment) === false) {\n      node[segment] = {};\n    }\n    node = node[segment];\n  }\n\n  node[propertyName] = value;\n  return true;\n};\n\n/**\n * Creates a class to store the `computer` method and its eventual parameters.\n * Allows for on-demand computation with up-to-date parameters via `getValue` method.\n * @constructor\n * @param {function} computer - Function to be computed\n * @param {string | array} dependencies - Dependencies passed to the `computer` as parameters\n */\nexport class Computed<T> {\n  constructor(\n    public computer: (...values: any[]) => T,\n    public dependencies: string | string[] = []\n  ) {}\n\n  /**\n   * Executes the `computer` method with the current state of the theme\n   * by taking into account previously computed values and modifications.\n   * @param {Proxy | object} base - Computed or uncomputed theme\n   * @param {Proxy | object} modifications - Theme value overrides\n   * @param {object} working - Partially computed theme\n   * @param {string} colorMode - `light` or `dark`\n   */\n  getValue(\n    base: EuiThemeSystem | EuiThemeShape,\n    modifications: EuiThemeModifications = {},\n    working: EuiThemeComputed,\n    colorMode: EuiThemeColorModeStandard\n  ) {\n    if (!this.dependencies.length) {\n      return this.computer(working);\n    }\n    if (!Array.isArray(this.dependencies)) {\n      return this.computer(\n        getOn(working, this.dependencies) ??\n          getOn(modifications, this.dependencies, colorMode) ??\n          getOn(base, this.dependencies, colorMode)\n      );\n    }\n    return this.computer(\n      this.dependencies.map((dependency) => {\n        return (\n          getOn(working, dependency) ??\n          getOn(modifications, dependency, colorMode) ??\n          getOn(base, dependency, colorMode)\n        );\n      })\n    );\n  }\n}\n\n/**\n * Returns a Class (`Computed`) that stores the arbitrary computer method\n * and references to its optional dependecies.\n * @param {function} computer - Arbitrary method to be called at compute time.\n * @param {string | array} dependencies - Values that will be provided to `computer` at compute time.\n */\nexport function computed<T>(computer: (value: EuiThemeComputed) => T): T;\nexport function computed<T>(\n  computer: (value: any[]) => T,\n  dependencies: string[]\n): T;\nexport function computed<T>(\n  computer: (value: any) => T,\n  dependencies: string\n): T;\nexport function computed<T>(\n  comp: ((value: T) => T) | ((value: any) => T) | ((value: any[]) => T),\n  dep?: string | string[]\n) {\n  return new Computed<T>(comp, dep);\n}\n\n/**\n * Takes an uncomputed theme, and computes and returns all values taking\n * into consideration value overrides and configured color mode.\n * Overrides take precedence, and only values in the current color mode\n * are computed and returned.\n * @param {Proxy} base - Object to transform into Proxy\n * @param {Proxy | object} over - Unique identifier or name\n * @param {string} colorMode - `light` or `dark`\n */\nexport const getComputed = <T = EuiThemeShape>(\n  base: EuiThemeSystem<T>,\n  over: Partial<EuiThemeSystem<T>>,\n  colorMode: EuiThemeColorModeStandard\n): EuiThemeComputed<T> => {\n  const output = { themeName: base.key };\n\n  function loop(\n    base: { [key: string]: any },\n    over: { [key: string]: any },\n    checkExisting: boolean = false,\n    path?: string\n  ) {\n    Object.keys(base).forEach((key) => {\n      let newPath = path ? `${path}.${key}` : `${key}`;\n      // @ts-expect-error `key` is not necessarily a colorMode key\n      if ([...Object.values(COLOR_MODES_STANDARD), colorMode].includes(key)) {\n        if (key !== colorMode) {\n          return;\n        } else {\n          const colorModeSegment = new RegExp(\n            `(\\\\.${colorMode}\\\\b)|(\\\\b${colorMode}\\\\.)`\n          );\n          newPath = newPath.replace(colorModeSegment, '');\n        }\n      }\n      const existing = checkExisting && getOn(output, newPath);\n      if (!existing || isObject(existing)) {\n        const baseValue =\n          base[key] instanceof Computed\n            ? base[key].getValue(base.root, over.root, output, colorMode)\n            : base[key];\n        const overValue =\n          over[key] instanceof Computed\n            ? over[key].getValue(base.root, over.root, output, colorMode)\n            : over[key];\n        if (isObject(baseValue) && !Array.isArray(baseValue)) {\n          loop(baseValue, overValue ?? {}, checkExisting, newPath);\n        } else {\n          setOn(output, newPath, overValue ?? baseValue);\n        }\n      }\n    });\n  }\n  // Compute standard theme values and apply overrides\n  loop(base, over);\n  // Compute and apply extension values only\n  loop(over, {}, true);\n  return output as EuiThemeComputed<T>;\n};\n\n/**\n * Builds a Proxy with a custom `handler` designed to self-reference values\n * and prevent arbitrary value overrides.\n * @param {object} model - Object to transform into Proxy\n * @param {string} key - Unique identifier or name\n */\nexport const buildTheme = <T extends {}>(model: T, key: string) => {\n  const handler: ProxyHandler<EuiThemeSystem<T>> = {\n    getPrototypeOf(target) {\n      return Reflect.getPrototypeOf(target.model);\n    },\n\n    setPrototypeOf(target, prototype) {\n      return Reflect.setPrototypeOf(target.model, prototype);\n    },\n\n    isExtensible(target) {\n      return Reflect.isExtensible(target);\n    },\n\n    preventExtensions(target) {\n      return Reflect.preventExtensions(target.model);\n    },\n\n    getOwnPropertyDescriptor(target, key) {\n      return Reflect.getOwnPropertyDescriptor(target.model, key);\n    },\n\n    defineProperty(target, property, attributes) {\n      return Reflect.defineProperty(target.model, property, attributes);\n    },\n\n    has(target, property) {\n      return Reflect.has(target.model, property);\n    },\n\n    get(_target, property) {\n      if (property === 'key') {\n        return _target[property];\n      }\n\n      // prevent Safari from locking up when the proxy is used in dev tools\n      // as it doesn't support getPrototypeOf\n      if (property === '__proto__') return {};\n\n      const target = property === 'root' ? _target : _target.model || _target;\n      // @ts-ignore `string` index signature\n      const value = target[property];\n      if (isObject(value) && !Array.isArray(value)) {\n        return new Proxy(\n          {\n            model: value,\n            root: _target.root,\n            key: `_${_target.key}`,\n          },\n          handler\n        );\n      } else {\n        return value;\n      }\n    },\n\n    set(target: any) {\n      return target;\n    },\n\n    deleteProperty(target: any) {\n      return target;\n    },\n\n    ownKeys(target) {\n      return Reflect.ownKeys(target.model);\n    },\n\n    apply(target: any) {\n      return target;\n    },\n\n    construct(target: any) {\n      return target;\n    },\n  };\n  const themeProxy = new Proxy({ model, root: model, key }, handler);\n\n  return themeProxy;\n};\n\n/**\n * Deeply merges two objects, using `source` values whenever possible.\n * @param {object} _target - Object with fallback values\n * @param {object} source - Object with desired values\n */\nexport const mergeDeep = (\n  _target: { [key: string]: any },\n  source: { [key: string]: any } = {}\n) => {\n  const target = { ..._target };\n\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  Object.keys(source).forEach((key) => {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = mergeDeep({ ...targetValue }, { ...sourceValue });\n    } else {\n      target[key] = sourceValue;\n    }\n  });\n\n  return target;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAQEA,oBAAoB,EACpBC,mBAAmB,QACd,SAAS;AAEhB,OAAO,MAAMC,kBAAkB,GAAGF,oBAAoB,CAACG,KAAK;;AAE5D;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,GAAQ,IAAKA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ;;AAE7D;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAC7BC,SAAkB,IACwB;EAC1C,OAAOA,SAAS,KAAKN,mBAAmB;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,YAAY,GAAG,CAC1BD,SAA6B,EAC7BE,eAA2C,KACb;EAC9B,IAAIF,SAAS,IAAI,IAAI,EAAE;IACrB,OAAOE,eAAe,IAAIP,kBAAkB;EAC9C;EACA,MAAMQ,IAAI,GAAGH,SAAS,CAACI,WAAW,EAEL;EAC7B,IAAIL,kBAAkB,CAACI,IAAI,CAAC,EAAE;IAC5B,OAAOD,eAAe,KAAKT,oBAAoB,CAACY,IAAI,IAClDH,eAAe,KAAKI,SAAS,GAC3Bb,oBAAoB,CAACG,KAAK,GAC1BH,oBAAoB,CAACY,IAAI;EAC/B,CAAC,MAAM;IACL,OAAOF,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,KAAK,GAAG,CACnBC,KAA6B,EAC7BC,KAAa,EACbT,SAAqC,KAClC;EACH,MAAMU,IAAI,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIC,IAAI,GAAGJ,KAAK;EAChB,OAAOE,IAAI,CAACG,MAAM,EAAE;IAClB,MAAMC,OAAO,GAAGJ,IAAI,CAACK,KAAK,EAAG;IAE7B,IAAIH,IAAI,CAACI,cAAc,CAACF,OAAO,CAAC,KAAK,KAAK,EAAE;MAC1C,IACEd,SAAS,IACTY,IAAI,CAACI,cAAc,CAAChB,SAAS,CAAC,KAAK,IAAI,IACvCY,IAAI,CAACZ,SAAS,CAAC,CAACgB,cAAc,CAACF,OAAO,CAAC,KAAK,IAAI,EAChD;QACA,IAAIF,IAAI,CAACZ,SAAS,CAAC,CAACc,OAAO,CAAC,YAAYG,QAAQ,EAAE;UAChDL,IAAI,GAAGA,IAAI,CAACZ,SAAS,CAAC,CAACc,OAAO,CAAC,CAACI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAEN,IAAI,EAAEZ,SAAS,CAAC;QACvE,CAAC,MAAM;UACLY,IAAI,GAAGA,IAAI,CAACZ,SAAS,CAAC,CAACc,OAAO,CAAC;QACjC;MACF,CAAC,MAAM;QACL,OAAOR,SAAS;MAClB;IACF,CAAC,MAAM;MACL,IAAIM,IAAI,CAACE,OAAO,CAAC,YAAYG,QAAQ,EAAE;QACrCL,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC,CAACI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAEN,IAAI,EAAEZ,SAAS,CAAC;MAC5D,CAAC,MAAM;QACLY,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC;MACtB;IACF;EACF;EAEA,OAAOF,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,KAAK,GAAG,CACnBX,KAA6B,EAC7BC,KAAa,EACbW,KAAU,KACP;EACH,MAAMV,IAAI,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;EAC7B,MAAMU,YAAY,GAAGX,IAAI,CAACY,GAAG,EAAG;EAChC,IAAIV,IAAI,GAAGJ,KAAK;EAEhB,OAAOE,IAAI,CAACG,MAAM,EAAE;IAClB,MAAMC,OAAO,GAAGJ,IAAI,CAACK,KAAK,EAAG;IAC7B,IAAIH,IAAI,CAACI,cAAc,CAACF,OAAO,CAAC,KAAK,KAAK,EAAE;MAC1CF,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;IACpB;IACAF,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC;EACtB;EAEAF,IAAI,CAACS,YAAY,CAAC,GAAGD,KAAK;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMH,QAAQ,CAAI;EACvBM,WAAW,CACFC,QAAiC,EAExC;IAAA,IADOC,YAA+B,uEAAG,EAAE;IAAA,KADpCD,QAAiC,GAAjCA,QAAiC;IAAA,KACjCC,YAA+B,GAA/BA,YAA+B;EACrC;;EAEH;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEP,QAAQ,CACNQ,IAAoC,EAIpC;IAAA,IAHAC,aAAoC,uEAAG,CAAC,CAAC;IAAA,IACzCC,OAAyB;IAAA,IACzB5B,SAAoC;IAEpC,IAAI,CAAC,IAAI,CAACyB,YAAY,CAACZ,MAAM,EAAE;MAC7B,OAAO,IAAI,CAACW,QAAQ,CAACI,OAAO,CAAC;IAC/B;IACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACL,YAAY,CAAC,EAAE;MAAA;MACrC,OAAO,IAAI,CAACD,QAAQ,mBAClBjB,KAAK,CAACqB,OAAO,EAAE,IAAI,CAACH,YAAY,CAAC,2CAC/BlB,KAAK,CAACoB,aAAa,EAAE,IAAI,CAACF,YAAY,EAAEzB,SAAS,CAAC,uCAClDO,KAAK,CAACmB,IAAI,EAAE,IAAI,CAACD,YAAY,EAAEzB,SAAS,CAAC,CAC5C;IACH;IACA,OAAO,IAAI,CAACwB,QAAQ,CAClB,IAAI,CAACC,YAAY,CAACM,GAAG,CAAEC,UAAU,IAAK;MAAA;MACpC,2BACEzB,KAAK,CAACqB,OAAO,EAAEI,UAAU,CAAC,6CAC1BzB,KAAK,CAACoB,aAAa,EAAEK,UAAU,EAAEhC,SAAS,CAAC,yCAC3CO,KAAK,CAACmB,IAAI,EAAEM,UAAU,EAAEhC,SAAS,CAAC;IAEtC,CAAC,CAAC,CACH;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAUA,OAAO,SAASiC,QAAQ,CACtBC,IAAqE,EACrEC,GAAuB,EACvB;EACA,OAAO,IAAIlB,QAAQ,CAAIiB,IAAI,EAAEC,GAAG,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,CACzBV,IAAuB,EACvBW,IAAgC,EAChCrC,SAAoC,KACZ;EACxB,MAAMsC,MAAM,GAAG;IAAEC,SAAS,EAAEb,IAAI,CAACc;EAAI,CAAC;EAEtC,SAASC,IAAI,CACXf,IAA4B,EAC5BW,IAA4B,EAG5B;IAAA,IAFAK,aAAsB,uEAAG,KAAK;IAAA,IAC9BhC,IAAa;IAEbiC,MAAM,CAACC,IAAI,CAAClB,IAAI,CAAC,CAACmB,OAAO,CAAEL,GAAG,IAAK;MACjC,IAAIM,OAAO,GAAGpC,IAAI,GAAI,GAAEA,IAAK,IAAG8B,GAAI,EAAC,GAAI,GAAEA,GAAI,EAAC;MAChD;MACA,IAAI,CAAC,GAAGG,MAAM,CAACI,MAAM,CAACtD,oBAAoB,CAAC,EAAEO,SAAS,CAAC,CAACgD,QAAQ,CAACR,GAAG,CAAC,EAAE;QACrE,IAAIA,GAAG,KAAKxC,SAAS,EAAE;UACrB;QACF,CAAC,MAAM;UACL,MAAMiD,gBAAgB,GAAG,IAAIC,MAAM,CAChC,OAAMlD,SAAU,YAAWA,SAAU,MAAK,CAC5C;UACD8C,OAAO,GAAGA,OAAO,CAACK,OAAO,CAACF,gBAAgB,EAAE,EAAE,CAAC;QACjD;MACF;MACA,MAAMG,QAAQ,GAAGV,aAAa,IAAInC,KAAK,CAAC+B,MAAM,EAAEQ,OAAO,CAAC;MACxD,IAAI,CAACM,QAAQ,IAAIvD,QAAQ,CAACuD,QAAQ,CAAC,EAAE;QACnC,MAAMC,SAAS,GACb3B,IAAI,CAACc,GAAG,CAAC,YAAYvB,QAAQ,GACzBS,IAAI,CAACc,GAAG,CAAC,CAACtB,QAAQ,CAACQ,IAAI,CAAC4B,IAAI,EAAEjB,IAAI,CAACiB,IAAI,EAAEhB,MAAM,EAAEtC,SAAS,CAAC,GAC3D0B,IAAI,CAACc,GAAG,CAAC;QACf,MAAMe,SAAS,GACblB,IAAI,CAACG,GAAG,CAAC,YAAYvB,QAAQ,GACzBoB,IAAI,CAACG,GAAG,CAAC,CAACtB,QAAQ,CAACQ,IAAI,CAAC4B,IAAI,EAAEjB,IAAI,CAACiB,IAAI,EAAEhB,MAAM,EAAEtC,SAAS,CAAC,GAC3DqC,IAAI,CAACG,GAAG,CAAC;QACf,IAAI3C,QAAQ,CAACwD,SAAS,CAAC,IAAI,CAACxB,KAAK,CAACC,OAAO,CAACuB,SAAS,CAAC,EAAE;UACpDZ,IAAI,CAACY,SAAS,EAAEE,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,CAAC,CAAC,EAAEb,aAAa,EAAEI,OAAO,CAAC;QAC1D,CAAC,MAAM;UACL3B,KAAK,CAACmB,MAAM,EAAEQ,OAAO,EAAES,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIF,SAAS,CAAC;QAChD;MACF;IACF,CAAC,CAAC;EACJ;EACA;EACAZ,IAAI,CAACf,IAAI,EAAEW,IAAI,CAAC;EAChB;EACAI,IAAI,CAACJ,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;EACpB,OAAOC,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkB,UAAU,GAAG,CAAehD,KAAQ,EAAEgC,GAAW,KAAK;EACjE,MAAMiB,OAAwC,GAAG;IAC/CC,cAAc,CAACC,MAAM,EAAE;MACrB,OAAOC,OAAO,CAACF,cAAc,CAACC,MAAM,CAACnD,KAAK,CAAC;IAC7C,CAAC;IAEDqD,cAAc,CAACF,MAAM,EAAEG,SAAS,EAAE;MAChC,OAAOF,OAAO,CAACC,cAAc,CAACF,MAAM,CAACnD,KAAK,EAAEsD,SAAS,CAAC;IACxD,CAAC;IAEDC,YAAY,CAACJ,MAAM,EAAE;MACnB,OAAOC,OAAO,CAACG,YAAY,CAACJ,MAAM,CAAC;IACrC,CAAC;IAEDK,iBAAiB,CAACL,MAAM,EAAE;MACxB,OAAOC,OAAO,CAACI,iBAAiB,CAACL,MAAM,CAACnD,KAAK,CAAC;IAChD,CAAC;IAEDyD,wBAAwB,CAACN,MAAM,EAAEnB,GAAG,EAAE;MACpC,OAAOoB,OAAO,CAACK,wBAAwB,CAACN,MAAM,CAACnD,KAAK,EAAEgC,GAAG,CAAC;IAC5D,CAAC;IAED0B,cAAc,CAACP,MAAM,EAAEQ,QAAQ,EAAEC,UAAU,EAAE;MAC3C,OAAOR,OAAO,CAACM,cAAc,CAACP,MAAM,CAACnD,KAAK,EAAE2D,QAAQ,EAAEC,UAAU,CAAC;IACnE,CAAC;IAEDC,GAAG,CAACV,MAAM,EAAEQ,QAAQ,EAAE;MACpB,OAAOP,OAAO,CAACS,GAAG,CAACV,MAAM,CAACnD,KAAK,EAAE2D,QAAQ,CAAC;IAC5C,CAAC;IAEDG,GAAG,CAACC,OAAO,EAAEJ,QAAQ,EAAE;MACrB,IAAIA,QAAQ,KAAK,KAAK,EAAE;QACtB,OAAOI,OAAO,CAACJ,QAAQ,CAAC;MAC1B;;MAEA;MACA;MACA,IAAIA,QAAQ,KAAK,WAAW,EAAE,OAAO,CAAC,CAAC;MAEvC,MAAMR,MAAM,GAAGQ,QAAQ,KAAK,MAAM,GAAGI,OAAO,GAAGA,OAAO,CAAC/D,KAAK,IAAI+D,OAAO;MACvE;MACA,MAAMnD,KAAK,GAAGuC,MAAM,CAACQ,QAAQ,CAAC;MAC9B,IAAItE,QAAQ,CAACuB,KAAK,CAAC,IAAI,CAACS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,EAAE;QAC5C,OAAO,IAAIoD,KAAK,CACd;UACEhE,KAAK,EAAEY,KAAK;UACZkC,IAAI,EAAEiB,OAAO,CAACjB,IAAI;UAClBd,GAAG,EAAG,IAAG+B,OAAO,CAAC/B,GAAI;QACvB,CAAC,EACDiB,OAAO,CACR;MACH,CAAC,MAAM;QACL,OAAOrC,KAAK;MACd;IACF,CAAC;IAEDqD,GAAG,CAACd,MAAW,EAAE;MACf,OAAOA,MAAM;IACf,CAAC;IAEDe,cAAc,CAACf,MAAW,EAAE;MAC1B,OAAOA,MAAM;IACf,CAAC;IAEDgB,OAAO,CAAChB,MAAM,EAAE;MACd,OAAOC,OAAO,CAACe,OAAO,CAAChB,MAAM,CAACnD,KAAK,CAAC;IACtC,CAAC;IAEDoE,KAAK,CAACjB,MAAW,EAAE;MACjB,OAAOA,MAAM;IACf,CAAC;IAEDkB,SAAS,CAAClB,MAAW,EAAE;MACrB,OAAOA,MAAM;IACf;EACF,CAAC;EACD,MAAMmB,UAAU,GAAG,IAAIN,KAAK,CAAC;IAAEhE,KAAK;IAAE8C,IAAI,EAAE9C,KAAK;IAAEgC;EAAI,CAAC,EAAEiB,OAAO,CAAC;EAElE,OAAOqB,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,UACvBR,OAA+B,EAE5B;EAAA,IADHS,MAA8B,uEAAG,CAAC,CAAC;EAEnC,MAAMrB,MAAM,GAAG;IAAE,GAAGY;EAAQ,CAAC;EAE7B,IAAI,CAAC1E,QAAQ,CAAC8D,MAAM,CAAC,IAAI,CAAC9D,QAAQ,CAACmF,MAAM,CAAC,EAAE;IAC1C,OAAOA,MAAM;EACf;EAEArC,MAAM,CAACC,IAAI,CAACoC,MAAM,CAAC,CAACnC,OAAO,CAAEL,GAAG,IAAK;IACnC,MAAMyC,WAAW,GAAGtB,MAAM,CAACnB,GAAG,CAAC;IAC/B,MAAM0C,WAAW,GAAGF,MAAM,CAACxC,GAAG,CAAC;IAE/B,IAAI3C,QAAQ,CAACoF,WAAW,CAAC,IAAIpF,QAAQ,CAACqF,WAAW,CAAC,EAAE;MAClDvB,MAAM,CAACnB,GAAG,CAAC,GAAGuC,SAAS,CAAC;QAAE,GAAGE;MAAY,CAAC,EAAE;QAAE,GAAGC;MAAY,CAAC,CAAC;IACjE,CAAC,MAAM;MACLvB,MAAM,CAACnB,GAAG,CAAC,GAAG0C,WAAW;IAC3B;EACF,CAAC,CAAC;EAEF,OAAOvB,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}