{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/form/form_control_layout/form_control_layout.tsx\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { cloneElement, Component } from \"react\";\nimport classNames from \"classnames\";\nimport { EuiFormControlLayoutIcons } from \"./form_control_layout_icons\";\nimport { EuiFormLabel } from \"../form_label\";\nimport { FormContext } from \"../eui_form_context\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport { ICON_SIDES } from \"./form_control_layout_icons\";\nexport class EuiFormControlLayout extends Component {\n  render() {\n    const {\n      defaultFullWidth\n    } = this.context;\n    const {\n      children,\n      icon,\n      clear,\n      fullWidth = defaultFullWidth,\n      isLoading,\n      isDisabled,\n      compressed,\n      className,\n      prepend,\n      append,\n      readOnly,\n      isInvalid: invalid,\n      isDropdown,\n      inputId,\n      ...rest\n    } = this.props;\n    const classes = classNames(\"euiFormControlLayout\", {\n      \"euiFormControlLayout--fullWidth\": fullWidth,\n      \"euiFormControlLayout--compressed\": compressed,\n      \"euiFormControlLayout--readOnly\": readOnly,\n      \"euiFormControlLayout--group\": prepend || append,\n      \"euiFormControlLayout-isDisabled\": isDisabled\n    }, className);\n    const prependNodes = this.renderSideNode(\"prepend\", prepend, inputId);\n    const appendNodes = this.renderSideNode(\"append\", append, inputId);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes,\n      ...rest,\n      children: [prependNodes, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"euiFormControlLayout__childrenWrapper\",\n        children: [children, /*#__PURE__*/_jsxDEV(EuiFormControlLayoutIcons, {\n          icon: icon,\n          clear: clear,\n          compressed: compressed,\n          isLoading: isLoading,\n          isInvalid: invalid,\n          isDropdown: !readOnly && !isDisabled && isDropdown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), appendNodes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n  renderSideNode(side, nodes, inputId) {\n    if (!nodes) {\n      return;\n    }\n    if (typeof nodes === \"string\") {\n      return this.createFormLabel(side, nodes, inputId);\n    }\n    const appendNodes = React.Children.map(nodes, (item, index) => typeof item === \"string\" ? this.createFormLabel(side, item, inputId) : this.createSideNode(side, item, index));\n    return appendNodes;\n  }\n  createFormLabel(side, string, inputId) {\n    return /*#__PURE__*/_jsxDEV(EuiFormLabel, {\n      htmlFor: inputId,\n      className: `euiFormControlLayout__${side}`,\n      children: string\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this);\n  }\n  createSideNode(side, node, key) {\n    return /*#__PURE__*/cloneElement(node, {\n      className: classNames(`euiFormControlLayout__${side}`, node.props.className),\n      key: key\n    });\n  }\n}\nEuiFormControlLayout.contextType = FormContext;","map":{"version":3,"names":["cloneElement","Component","classNames","EuiFormControlLayoutIcons","EuiFormLabel","FormContext","React","ICON_SIDES","EuiFormControlLayout","render","defaultFullWidth","context","children","icon","clear","fullWidth","isLoading","isDisabled","compressed","className","prepend","append","readOnly","isInvalid","invalid","isDropdown","inputId","rest","props","classes","prependNodes","renderSideNode","appendNodes","side","nodes","createFormLabel","Children","map","item","index","createSideNode","string","node","key","contextType"],"sources":["/Users/nikita/Downloads/super_date_picker/src/form/form_control_layout/form_control_layout.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport {\n  cloneElement,\n  Component,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n} from \"react\";\nimport classNames from \"classnames\";\n\nimport {\n  EuiFormControlLayoutIcons,\n  EuiFormControlLayoutIconsProps,\n} from \"./form_control_layout_icons\";\nimport { CommonProps } from \"../../common\";\nimport { EuiFormLabel } from \"../form_label\";\nimport { FormContext, FormContextValue } from \"../eui_form_context\";\nimport React from \"react\";\n\nexport { ICON_SIDES } from \"./form_control_layout_icons\";\n\ntype StringOrReactElement = string | ReactElement;\ntype PrependAppendType = StringOrReactElement | StringOrReactElement[];\n\nexport type EuiFormControlLayoutProps = CommonProps &\n  HTMLAttributes<HTMLDivElement> & {\n    /**\n     * Creates an input group with element(s) coming before children.\n     * `string` | `ReactElement` or an array of these\n     */\n    prepend?: PrependAppendType;\n    /**\n     * Creates an input group with element(s) coming after children.\n     * `string` | `ReactElement` or an array of these\n     */\n    append?: PrependAppendType;\n    children?: ReactNode;\n    icon?: EuiFormControlLayoutIconsProps[\"icon\"];\n    clear?: EuiFormControlLayoutIconsProps[\"clear\"];\n    /**\n     * Expand to fill 100% of the parent.\n     * Defaults to `fullWidth` prop of `<EuiForm>`.\n     * @default false\n     */\n    fullWidth?: boolean;\n    isLoading?: boolean;\n    isDisabled?: boolean;\n    className?: string;\n    compressed?: boolean;\n    readOnly?: boolean;\n    isInvalid?: boolean;\n    /**\n     * Controls the adding of and visibility of a down arrow icon\n     */\n    isDropdown?: boolean;\n    /**\n     * Connects the prepend and append labels to the input\n     */\n    inputId?: string;\n  };\n\nexport class EuiFormControlLayout extends Component<EuiFormControlLayoutProps> {\n  static contextType = FormContext;\n\n  render() {\n    const { defaultFullWidth } = this.context as FormContextValue;\n    const {\n      children,\n      icon,\n      clear,\n      fullWidth = defaultFullWidth,\n      isLoading,\n      isDisabled,\n      compressed,\n      className,\n      prepend,\n      append,\n      readOnly,\n      isInvalid: invalid,\n      isDropdown,\n      inputId,\n      ...rest\n    } = this.props;\n\n    const classes = classNames(\n      \"euiFormControlLayout\",\n      {\n        \"euiFormControlLayout--fullWidth\": fullWidth,\n        \"euiFormControlLayout--compressed\": compressed,\n        \"euiFormControlLayout--readOnly\": readOnly,\n        \"euiFormControlLayout--group\": prepend || append,\n        \"euiFormControlLayout-isDisabled\": isDisabled,\n      },\n      className\n    );\n\n    const prependNodes = this.renderSideNode(\"prepend\", prepend, inputId);\n    const appendNodes = this.renderSideNode(\"append\", append, inputId);\n\n    return (\n      <div className={classes} {...rest}>\n        {prependNodes}\n        <div className=\"euiFormControlLayout__childrenWrapper\">\n          {children}\n\n          <EuiFormControlLayoutIcons\n            icon={icon}\n            clear={clear}\n            compressed={compressed}\n            isLoading={isLoading}\n            isInvalid={invalid}\n            isDropdown={!readOnly && !isDisabled && isDropdown}\n          />\n        </div>\n        {appendNodes}\n      </div>\n    );\n  }\n\n  renderSideNode(\n    side: \"append\" | \"prepend\",\n    nodes?: PrependAppendType,\n    inputId?: string\n  ) {\n    if (!nodes) {\n      return;\n    }\n\n    if (typeof nodes === \"string\") {\n      return this.createFormLabel(side, nodes, inputId);\n    }\n\n    const appendNodes = React.Children.map(nodes, (item, index) =>\n      typeof item === \"string\"\n        ? this.createFormLabel(side, item, inputId)\n        : this.createSideNode(side, item, index)\n    );\n\n    return appendNodes;\n  }\n\n  createFormLabel(\n    side: \"append\" | \"prepend\",\n    string: string,\n    inputId?: string\n  ) {\n    return (\n      <EuiFormLabel\n        htmlFor={inputId}\n        className={`euiFormControlLayout__${side}`}\n      >\n        {string}\n      </EuiFormLabel>\n    );\n  }\n\n  createSideNode(\n    side: \"append\" | \"prepend\",\n    node: ReactElement,\n    key: React.Key\n  ) {\n    return cloneElement(node, {\n      className: classNames(\n        `euiFormControlLayout__${side}`,\n        node.props.className\n      ),\n      key: key,\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}