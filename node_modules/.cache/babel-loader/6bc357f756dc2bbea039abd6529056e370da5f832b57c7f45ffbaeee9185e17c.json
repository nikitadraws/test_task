{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { logicalCSS } from './logicals';\n/**\n * Calculates the font-size value based on the provided scale key\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated font-size value\n */\n\nexport function euiFontSizeFromScale(scale, _ref) {\n  let {\n    base,\n    font\n  } = _ref;\n  let {\n    measurement = 'rem',\n    customScale\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (measurement === 'em') {\n    return `${font.scale[scale]}em`;\n  }\n  let numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  const denominator = base * font.scale[font.body.scale];\n  return measurement === 'px' ? `${numerator}px` : `${(numerator / denominator).toFixed(4)}rem`;\n}\n\n/**\n * Calculates the line-height to the closest multiple of the baseline\n * EX: A proper line-height for text is 1.5 times the font-size.\n *     If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the\n *     text stays on the baseline, we pass a multiplier to calculate a line-height.\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated line-height value aligned to baseline\n */\n\nexport function euiLineHeightFromBaseline(scale, _ref2) {\n  let {\n    base,\n    font\n  } = _ref2;\n  let {\n    measurement = 'rem',\n    customScale\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    baseline,\n    lineHeightMultiplier\n  } = font;\n  let numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  const denominator = base * font.scale[font.body.scale];\n  const _lineHeightMultiplier = numerator <= base ? lineHeightMultiplier : lineHeightMultiplier * 0.833;\n  if (measurement === 'em') {\n    // Even though the line-height via `em` cannot be determined against the pixel baseline grid;\n    // we will assume that typically larger scale font-sizes should have a shorter line-height;\n    return _lineHeightMultiplier.toFixed(4).toString();\n  }\n  const pixelValue = Math.floor(Math.round(numerator * _lineHeightMultiplier) / baseline) * baseline;\n  return measurement === 'px' ? `${pixelValue}px` : `${(pixelValue / denominator).toFixed(4)}rem`;\n}\n\n/**\n * Text weight shifting\n *\n * When changing the font-weight based on the state of the component,\n * this mixin will ensure that the sizing is dependent on the boldest\n * weight so it doesn't shift sibling content.\n */\nexport const euiTextShift = function () {\n  let fontWeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'bold';\n  let attribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'data-text';\n  let euiTheme = arguments.length > 2 ? arguments[2] : undefined;\n  return `\n  &::after {\n    display: block;\n    content: attr(${attribute});\n    font-weight: ${euiTheme.font.weight[fontWeight]};\n    ${logicalCSS('height', 0)}\n    overflow: hidden;\n    visibility: hidden;\n  }`;\n};","map":{"version":3,"names":["logicalCSS","euiFontSizeFromScale","scale","base","font","measurement","customScale","numerator","denominator","body","toFixed","euiLineHeightFromBaseline","baseline","lineHeightMultiplier","_lineHeightMultiplier","toString","pixelValue","Math","floor","round","euiTextShift","fontWeight","attribute","euiTheme","weight"],"sources":["/Users/nikita/Downloads/super_date_picker/src/global_styling/functions/typography.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport {\n  _EuiThemeFontScale,\n  _EuiThemeFontSizeMeasurement,\n  _EuiThemeFontWeights,\n} from '../variables/typography';\nimport { UseEuiTheme } from '../../services/theme/hooks';\nimport { logicalCSS } from './logicals';\n\nexport interface _FontScaleOptions {\n  /**\n   * The returned string measurement\n   */\n  measurement?: _EuiThemeFontSizeMeasurement;\n  /**\n   * An additional custom scale multiplier to use against the current scale\n   * This parameter can be used (e.g. by EuiText sizes) to get sizes of text smaller than the default\n   */\n  customScale?: _EuiThemeFontScale;\n}\n\n/**\n * Calculates the font-size value based on the provided scale key\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated font-size value\n */\n\nexport function euiFontSizeFromScale(\n  scale: _EuiThemeFontScale,\n  { base, font }: UseEuiTheme['euiTheme'],\n  { measurement = 'rem', customScale }: _FontScaleOptions = {}\n) {\n  if (measurement === 'em') {\n    return `${font.scale[scale]}em`;\n  }\n\n  let numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  const denominator = base * font.scale[font.body.scale];\n\n  return measurement === 'px'\n    ? `${numerator}px`\n    : `${(numerator / denominator).toFixed(4)}rem`;\n}\n\n/**\n * Calculates the line-height to the closest multiple of the baseline\n * EX: A proper line-height for text is 1.5 times the font-size.\n *     If our base font size (euiFontSize) is 16, and our baseline is 4. To ensure the\n *     text stays on the baseline, we pass a multiplier to calculate a line-height.\n * @param scale - The font scale key\n * @param theme - Requires the `base` and `font` keys\n * @param options - Optional parameters - see _FontScaleOptions\n *\n * @returns string - Calculated line-height value aligned to baseline\n */\n\nexport function euiLineHeightFromBaseline(\n  scale: _EuiThemeFontScale,\n  { base, font }: UseEuiTheme['euiTheme'],\n  { measurement = 'rem', customScale }: _FontScaleOptions = {}\n) {\n  const { baseline, lineHeightMultiplier } = font;\n  let numerator = base * font.scale[scale];\n  if (customScale) numerator *= font.scale[customScale];\n  const denominator = base * font.scale[font.body.scale];\n\n  const _lineHeightMultiplier =\n    numerator <= base ? lineHeightMultiplier : lineHeightMultiplier * 0.833;\n\n  if (measurement === 'em') {\n    // Even though the line-height via `em` cannot be determined against the pixel baseline grid;\n    // we will assume that typically larger scale font-sizes should have a shorter line-height;\n    return _lineHeightMultiplier.toFixed(4).toString();\n  }\n\n  const pixelValue =\n    Math.floor(Math.round(numerator * _lineHeightMultiplier) / baseline) *\n    baseline;\n  return measurement === 'px'\n    ? `${pixelValue}px`\n    : `${(pixelValue / denominator).toFixed(4)}rem`;\n}\n\n/**\n * Text weight shifting\n *\n * When changing the font-weight based on the state of the component,\n * this mixin will ensure that the sizing is dependent on the boldest\n * weight so it doesn't shift sibling content.\n */\nexport const euiTextShift = (\n  fontWeight: keyof _EuiThemeFontWeights = 'bold',\n  attribute: string = 'data-text',\n  euiTheme: UseEuiTheme['euiTheme']\n) => {\n  return `\n  &::after {\n    display: block;\n    content: attr(${attribute});\n    font-weight: ${euiTheme.font.weight[fontWeight]};\n    ${logicalCSS('height', 0)}\n    overflow: hidden;\n    visibility: hidden;\n  }`;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA,SAASA,UAAU,QAAQ,YAAY;AAcvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,oBAAoB,CAClCC,KAAyB,QAGzB;EAAA,IAFA;IAAEC,IAAI;IAAEC;EAA8B,CAAC;EAAA,IACvC;IAAEC,WAAW,GAAG,KAAK;IAAEC;EAA+B,CAAC,uEAAG,CAAC,CAAC;EAE5D,IAAID,WAAW,KAAK,IAAI,EAAE;IACxB,OAAQ,GAAED,IAAI,CAACF,KAAK,CAACA,KAAK,CAAE,IAAG;EACjC;EAEA,IAAIK,SAAS,GAAGJ,IAAI,GAAGC,IAAI,CAACF,KAAK,CAACA,KAAK,CAAC;EACxC,IAAII,WAAW,EAAEC,SAAS,IAAIH,IAAI,CAACF,KAAK,CAACI,WAAW,CAAC;EACrD,MAAME,WAAW,GAAGL,IAAI,GAAGC,IAAI,CAACF,KAAK,CAACE,IAAI,CAACK,IAAI,CAACP,KAAK,CAAC;EAEtD,OAAOG,WAAW,KAAK,IAAI,GACtB,GAAEE,SAAU,IAAG,GACf,GAAE,CAACA,SAAS,GAAGC,WAAW,EAAEE,OAAO,CAAC,CAAC,CAAE,KAAI;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,yBAAyB,CACvCT,KAAyB,SAGzB;EAAA,IAFA;IAAEC,IAAI;IAAEC;EAA8B,CAAC;EAAA,IACvC;IAAEC,WAAW,GAAG,KAAK;IAAEC;EAA+B,CAAC,uEAAG,CAAC,CAAC;EAE5D,MAAM;IAAEM,QAAQ;IAAEC;EAAqB,CAAC,GAAGT,IAAI;EAC/C,IAAIG,SAAS,GAAGJ,IAAI,GAAGC,IAAI,CAACF,KAAK,CAACA,KAAK,CAAC;EACxC,IAAII,WAAW,EAAEC,SAAS,IAAIH,IAAI,CAACF,KAAK,CAACI,WAAW,CAAC;EACrD,MAAME,WAAW,GAAGL,IAAI,GAAGC,IAAI,CAACF,KAAK,CAACE,IAAI,CAACK,IAAI,CAACP,KAAK,CAAC;EAEtD,MAAMY,qBAAqB,GACzBP,SAAS,IAAIJ,IAAI,GAAGU,oBAAoB,GAAGA,oBAAoB,GAAG,KAAK;EAEzE,IAAIR,WAAW,KAAK,IAAI,EAAE;IACxB;IACA;IACA,OAAOS,qBAAqB,CAACJ,OAAO,CAAC,CAAC,CAAC,CAACK,QAAQ,EAAE;EACpD;EAEA,MAAMC,UAAU,GACdC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,KAAK,CAACZ,SAAS,GAAGO,qBAAqB,CAAC,GAAGF,QAAQ,CAAC,GACpEA,QAAQ;EACV,OAAOP,WAAW,KAAK,IAAI,GACtB,GAAEW,UAAW,IAAG,GAChB,GAAE,CAACA,UAAU,GAAGR,WAAW,EAAEE,OAAO,CAAC,CAAC,CAAE,KAAI;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,YAAY,GAAG,YAIvB;EAAA,IAHHC,UAAsC,uEAAG,MAAM;EAAA,IAC/CC,SAAiB,uEAAG,WAAW;EAAA,IAC/BC,QAAiC;EAEjC,OAAQ;AACV;AACA;AACA,oBAAoBD,SAAU;AAC9B,mBAAmBC,QAAQ,CAACnB,IAAI,CAACoB,MAAM,CAACH,UAAU,CAAE;AACpD,MAAMrB,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAE;AAC9B;AACA;AACA,IAAI;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}