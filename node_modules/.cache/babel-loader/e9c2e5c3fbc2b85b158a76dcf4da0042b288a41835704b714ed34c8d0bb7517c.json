{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nconst isElasticHost = /^([a-zA-Z0-9]+\\.)*elastic\\.co$/;\n\n// In order for the domain to be secure it needs to be in a parsable format,\n// with the protocol of http: or https: and the host matching elastic.co or\n// of one its subdomains\nexport const isDomainSecure = function () {\n  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  try {\n    const parsed = new URL(url);\n    const protocolMatches = parsed.protocol === 'http:' || parsed.protocol === 'https:';\n    const domainMatches = !!parsed.host.match(isElasticHost);\n    return protocolMatches && domainMatches;\n  } catch (e) {\n    return false;\n  }\n};","map":{"version":3,"names":["isElasticHost","isDomainSecure","url","parsed","URL","protocolMatches","protocol","domainMatches","host","match","e"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/url.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nconst isElasticHost = /^([a-zA-Z0-9]+\\.)*elastic\\.co$/;\n\n// In order for the domain to be secure it needs to be in a parsable format,\n// with the protocol of http: or https: and the host matching elastic.co or\n// of one its subdomains\nexport const isDomainSecure = (url: string = '') => {\n  try {\n    const parsed = new URL(url);\n    const protocolMatches =\n      parsed.protocol === 'http:' || parsed.protocol === 'https:';\n    const domainMatches = !!parsed.host.match(isElasticHost);\n    return protocolMatches && domainMatches;\n  } catch (e) {\n    return false;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,aAAa,GAAG,gCAAgC;;AAEtD;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,YAAsB;EAAA,IAArBC,GAAW,uEAAG,EAAE;EAC7C,IAAI;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;IAC3B,MAAMG,eAAe,GACnBF,MAAM,CAACG,QAAQ,KAAK,OAAO,IAAIH,MAAM,CAACG,QAAQ,KAAK,QAAQ;IAC7D,MAAMC,aAAa,GAAG,CAAC,CAACJ,MAAM,CAACK,IAAI,CAACC,KAAK,CAACT,aAAa,CAAC;IACxD,OAAOK,eAAe,IAAIE,aAAa;EACzC,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}