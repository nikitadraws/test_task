{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nexport const COLOR_MODES_STANDARD = {\n  light: 'LIGHT',\n  dark: 'DARK'\n};\nexport const COLOR_MODES_INVERSE = 'INVERSE';","map":{"version":3,"names":["COLOR_MODES_STANDARD","light","dark","COLOR_MODES_INVERSE"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/theme/types.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { RecursivePartial, ValueOf } from '../../common';\nimport { _EuiThemeAnimation } from '../../global_styling/variables/animations';\nimport { _EuiThemeBreakpoints } from '../../global_styling/variables/breakpoint';\nimport { _EuiThemeBorder } from '../../global_styling/variables/borders';\nimport { _EuiThemeColors } from '../../global_styling/variables/colors';\nimport {\n  _EuiThemeBase,\n  _EuiThemeSizes,\n} from '../../global_styling/variables/size';\nimport { _EuiThemeFont } from '../../global_styling/variables/typography';\nimport { _EuiThemeFocus } from '../../global_styling/variables/states';\nimport { _EuiThemeLevels } from '../../global_styling/variables/levels';\n\nexport const COLOR_MODES_STANDARD = {\n  light: 'LIGHT',\n  dark: 'DARK',\n} as const;\nexport const COLOR_MODES_INVERSE = 'INVERSE' as const;\n\nexport type EuiThemeColorModeInverse = typeof COLOR_MODES_INVERSE;\nexport type EuiThemeColorModeStandard = ValueOf<typeof COLOR_MODES_STANDARD>;\nexport type EuiThemeColorMode =\n  | 'light'\n  | 'dark'\n  | EuiThemeColorModeStandard\n  | 'inverse'\n  | EuiThemeColorModeInverse;\n\nexport type ColorModeSwitch<T = string> =\n  | {\n      [key in EuiThemeColorModeStandard]: T;\n    }\n  | T;\n\nexport type StrictColorModeSwitch<T = string> = {\n  [key in EuiThemeColorModeStandard]: T;\n};\n\nexport type EuiThemeShape = {\n  colors: _EuiThemeColors;\n  base: _EuiThemeBase;\n  size: _EuiThemeSizes;\n  font: _EuiThemeFont;\n  border: _EuiThemeBorder;\n  focus: _EuiThemeFocus;\n  animation: _EuiThemeAnimation;\n  breakpoint: _EuiThemeBreakpoints;\n  levels: _EuiThemeLevels;\n};\n\nexport type EuiThemeSystem<T = {}> = {\n  root: EuiThemeShape & T;\n  model: EuiThemeShape & T;\n  key: string;\n};\n\nexport type EuiThemeModifications<T = {}> = RecursivePartial<EuiThemeShape & T>;\n\nexport type ComputedThemeShape<\n  T,\n  P = string | number | bigint | boolean | null | undefined\n> = T extends P | ColorModeSwitch<infer X>\n  ? T extends ColorModeSwitch<X>\n    ? X extends P\n      ? X\n      : {\n          [K in keyof (X &\n            Exclude<\n              T,\n              keyof X | keyof StrictColorModeSwitch\n            >)]: ComputedThemeShape<\n            (X & Exclude<T, keyof X | keyof StrictColorModeSwitch>)[K],\n            P\n          >;\n        }\n    : T\n  : {\n      [K in keyof T]: ComputedThemeShape<T[K], P>;\n    };\n\nexport type EuiThemeComputed<T = {}> = ComputedThemeShape<EuiThemeShape & T> & {\n  themeName: string;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeA,OAAO,MAAMA,oBAAoB,GAAG;EAClCC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE;AACR,CAAU;AACV,OAAO,MAAMC,mBAAmB,GAAG,SAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}