{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport chroma from 'chroma-js';\nimport { shade, tint, lightness as getLightness } from './manipulation';\nimport { getOn } from '../theme/utils';\nexport const wcagContrastMin = 4.5; // WCAG AA minimum contrast ratio for normal (non-large) text\n\n/**\n * Creates a new color that meets or exceeds WCAG level AA\n * @param foreground - Color to manipulate\n * @param ratio - Amount to change in absolute terms. 0-10.\n * *\n * @param themeOrBackground - Color to use as the contrast basis or just pass EuiTheme\n */\nexport const makeHighContrastColor = function (_foreground) {\n  let ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4.85;\n  return themeOrBackground => {\n    var _getOn;\n    const foreground = typeof themeOrBackground === 'object' ? (_getOn = getOn(themeOrBackground, _foreground)) !== null && _getOn !== void 0 ? _getOn : _foreground : _foreground;\n    const background = typeof themeOrBackground === 'object' ? themeOrBackground.colors.body : themeOrBackground;\n    if (chroma(foreground).alpha() < 1 || chroma(background).alpha() < 1) {\n      console.warn(`Contrast cannot be accurately calculated when colors have alpha channel opacity. Make sure the provided foreground and background colors have no transparency:\n\nForeground: ${foreground}\nBackground: ${background}`);\n    }\n    let contrast = chroma.contrast(foreground, background);\n\n    // Determine the lightness factor of the background color first to\n    // determine whether to shade or tint the foreground.\n    const brightness = getLightness(background);\n    let highContrastTextColor = foreground;\n    while (contrast < ratio) {\n      if (brightness > 50) {\n        highContrastTextColor = shade(highContrastTextColor, 0.05);\n      } else {\n        highContrastTextColor = tint(highContrastTextColor, 0.05);\n      }\n      contrast = chroma.contrast(highContrastTextColor, background);\n      const lightness = getLightness(highContrastTextColor);\n      if (lightness < 5) {\n        console.warn('High enough contrast could not be determined. Most likely your background color does not adjust for light mode.');\n        return highContrastTextColor;\n      }\n      if (lightness > 95) {\n        console.warn('High enough contrast could not be determined. Most likely your background color does not adjust for dark mode.');\n        return highContrastTextColor;\n      }\n    }\n    return chroma(highContrastTextColor).hex();\n  };\n};\n\n/**\n * Creates a new color with increased contrast\n * Disabled content only needs a contrast of at least 2 because there is no interaction available\n * @param foreground - Color to manipulate\n * @param ratio - Amount to change in absolute terms. 0-10.\n * *\n * @param themeOrBackground - Color to use as the contrast basis\n */\nexport const makeDisabledContrastColor = function (color) {\n  let ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return themeOrBackground => makeHighContrastColor(color, ratio)(themeOrBackground);\n};","map":{"version":3,"names":["chroma","shade","tint","lightness","getLightness","getOn","wcagContrastMin","makeHighContrastColor","_foreground","ratio","themeOrBackground","foreground","background","colors","body","alpha","console","warn","contrast","brightness","highContrastTextColor","hex","makeDisabledContrastColor","color"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/color/contrast.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport chroma from 'chroma-js';\nimport { shade, tint, lightness as getLightness } from './manipulation';\nimport { getOn } from '../theme/utils';\n\nexport const wcagContrastMin = 4.5; // WCAG AA minimum contrast ratio for normal (non-large) text\n\n/**\n * Creates a new color that meets or exceeds WCAG level AA\n * @param foreground - Color to manipulate\n * @param ratio - Amount to change in absolute terms. 0-10.\n * *\n * @param themeOrBackground - Color to use as the contrast basis or just pass EuiTheme\n */\nexport const makeHighContrastColor = (_foreground: string, ratio = 4.85) => (\n  themeOrBackground:\n    | string\n    | {\n        colors: { body: string };\n        [key: string]: any;\n      }\n) => {\n  const foreground = (typeof themeOrBackground === 'object'\n    ? getOn(themeOrBackground, _foreground) ?? _foreground\n    : _foreground) as string;\n  const background =\n    typeof themeOrBackground === 'object'\n      ? themeOrBackground.colors.body\n      : themeOrBackground;\n\n  if (chroma(foreground).alpha() < 1 || chroma(background).alpha() < 1) {\n    console.warn(\n      `Contrast cannot be accurately calculated when colors have alpha channel opacity. Make sure the provided foreground and background colors have no transparency:\n\nForeground: ${foreground}\nBackground: ${background}`\n    );\n  }\n\n  let contrast = chroma.contrast(foreground, background);\n\n  // Determine the lightness factor of the background color first to\n  // determine whether to shade or tint the foreground.\n  const brightness = getLightness(background);\n\n  let highContrastTextColor = foreground;\n\n  while (contrast < ratio) {\n    if (brightness > 50) {\n      highContrastTextColor = shade(highContrastTextColor, 0.05);\n    } else {\n      highContrastTextColor = tint(highContrastTextColor, 0.05);\n    }\n\n    contrast = chroma.contrast(highContrastTextColor, background);\n\n    const lightness = getLightness(highContrastTextColor);\n\n    if (lightness < 5) {\n      console.warn(\n        'High enough contrast could not be determined. Most likely your background color does not adjust for light mode.'\n      );\n      return highContrastTextColor;\n    }\n\n    if (lightness > 95) {\n      console.warn(\n        'High enough contrast could not be determined. Most likely your background color does not adjust for dark mode.'\n      );\n      return highContrastTextColor;\n    }\n  }\n\n  return chroma(highContrastTextColor).hex();\n};\n\n/**\n * Creates a new color with increased contrast\n * Disabled content only needs a contrast of at least 2 because there is no interaction available\n * @param foreground - Color to manipulate\n * @param ratio - Amount to change in absolute terms. 0-10.\n * *\n * @param themeOrBackground - Color to use as the contrast basis\n */\nexport const makeDisabledContrastColor = (color: string, ratio = 2) => (\n  themeOrBackground:\n    | string\n    | {\n        colors: { body: string };\n        [key: string]: any;\n      }\n) => makeHighContrastColor(color, ratio)(themeOrBackground);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,WAAW;AAC9B,SAASC,KAAK,EAAEC,IAAI,EAAEC,SAAS,IAAIC,YAAY,QAAQ,gBAAgB;AACvE,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,eAAe,GAAG,GAAG,CAAC,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG,UAACC,WAAmB;EAAA,IAAEC,KAAK,uEAAG,IAAI;EAAA,OACrEC,iBAKK,IACF;IAAA;IACH,MAAMC,UAAU,GAAI,OAAOD,iBAAiB,KAAK,QAAQ,aACrDL,KAAK,CAACK,iBAAiB,EAAEF,WAAW,CAAC,2CAAIA,WAAW,GACpDA,WAAsB;IAC1B,MAAMI,UAAU,GACd,OAAOF,iBAAiB,KAAK,QAAQ,GACjCA,iBAAiB,CAACG,MAAM,CAACC,IAAI,GAC7BJ,iBAAiB;IAEvB,IAAIV,MAAM,CAACW,UAAU,CAAC,CAACI,KAAK,EAAE,GAAG,CAAC,IAAIf,MAAM,CAACY,UAAU,CAAC,CAACG,KAAK,EAAE,GAAG,CAAC,EAAE;MACpEC,OAAO,CAACC,IAAI,CACT;AACP;AACA,cAAcN,UAAW;AACzB,cAAcC,UAAW,EAAC,CACrB;IACH;IAEA,IAAIM,QAAQ,GAAGlB,MAAM,CAACkB,QAAQ,CAACP,UAAU,EAAEC,UAAU,CAAC;;IAEtD;IACA;IACA,MAAMO,UAAU,GAAGf,YAAY,CAACQ,UAAU,CAAC;IAE3C,IAAIQ,qBAAqB,GAAGT,UAAU;IAEtC,OAAOO,QAAQ,GAAGT,KAAK,EAAE;MACvB,IAAIU,UAAU,GAAG,EAAE,EAAE;QACnBC,qBAAqB,GAAGnB,KAAK,CAACmB,qBAAqB,EAAE,IAAI,CAAC;MAC5D,CAAC,MAAM;QACLA,qBAAqB,GAAGlB,IAAI,CAACkB,qBAAqB,EAAE,IAAI,CAAC;MAC3D;MAEAF,QAAQ,GAAGlB,MAAM,CAACkB,QAAQ,CAACE,qBAAqB,EAAER,UAAU,CAAC;MAE7D,MAAMT,SAAS,GAAGC,YAAY,CAACgB,qBAAqB,CAAC;MAErD,IAAIjB,SAAS,GAAG,CAAC,EAAE;QACjBa,OAAO,CAACC,IAAI,CACV,iHAAiH,CAClH;QACD,OAAOG,qBAAqB;MAC9B;MAEA,IAAIjB,SAAS,GAAG,EAAE,EAAE;QAClBa,OAAO,CAACC,IAAI,CACV,gHAAgH,CACjH;QACD,OAAOG,qBAAqB;MAC9B;IACF;IAEA,OAAOpB,MAAM,CAACoB,qBAAqB,CAAC,CAACC,GAAG,EAAE;EAC5C,CAAC;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,GAAG,UAACC,KAAa;EAAA,IAAEd,KAAK,uEAAG,CAAC;EAAA,OAChEC,iBAKK,IACFH,qBAAqB,CAACgB,KAAK,EAAEd,KAAK,CAAC,CAACC,iBAAiB,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}