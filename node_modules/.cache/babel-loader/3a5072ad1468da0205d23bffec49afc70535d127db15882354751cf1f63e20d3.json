{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/button/button_empty/button_empty.tsx\",\n  _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/** @jsxImportSource @emotion/react */\nimport classNames from \"classnames\";\nimport { keysOf } from \"../../common\";\nimport { EuiThemeProvider, getSecureRelForTarget } from \"../../services\";\nimport { EuiButtonContentDeprecated as EuiButtonContent } from \"../_button_content_deprecated\";\nimport { useEuiButtonColorCSS } from \"../../themes/amsterdam/global_styling/mixins/button\";\nimport { isButtonDisabled } from \"../button_display/_button_display\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nconst sizeToClassNameMap = {\n  xs: \"euiButtonEmpty--xSmall\",\n  s: \"euiButtonEmpty--small\",\n  m: null\n};\nexport const SIZES = keysOf(sizeToClassNameMap);\nconst flushTypeToClassNameMap = {\n  left: \"euiButtonEmpty--flushLeft\",\n  right: \"euiButtonEmpty--flushRight\",\n  both: \"euiButtonEmpty--flushBoth\"\n};\nexport const FLUSH_TYPES = keysOf(flushTypeToClassNameMap);\n\n/**\n * Extends EuiButtonContentProps which provides\n * `iconType`, `iconSide`, and `textProps`\n */\n\nexport const EuiButtonEmpty = props => {\n  _s();\n  const {\n    children,\n    className,\n    iconType,\n    iconSide = \"left\",\n    iconSize = \"m\",\n    color: _color = \"primary\",\n    size = \"m\",\n    flush,\n    isDisabled: _isDisabled,\n    disabled,\n    isLoading,\n    href,\n    target,\n    rel,\n    type = \"button\",\n    buttonRef,\n    contentProps,\n    textProps,\n    isSelected,\n    ...rest\n  } = props;\n  const isDisabled = isButtonDisabled({\n    isDisabled: _isDisabled || disabled,\n    href,\n    isLoading\n  });\n\n  // eslint-disable-next-line no-nested-ternary\n  const color = isDisabled ? \"disabled\" : _color === \"ghost\" ? \"text\" : _color;\n  const buttonColorStyles = useEuiButtonColorCSS({\n    display: \"empty\"\n  })[color];\n  if (_color === \"ghost\") {\n    // INCEPTION: If `ghost`, re-implement with a wrapping dark mode theme provider\n    return _jsxDEV(EuiThemeProvider, {\n      colorMode: \"dark\",\n      children: _jsxDEV(EuiButtonEmpty, {\n        ...props,\n        color: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n  const classes = classNames(\"euiButtonEmpty\", size ? sizeToClassNameMap[size] : null, flush ? flushTypeToClassNameMap[flush] : null, className);\n  const contentClassNames = classNames(\"euiButtonEmpty__content\", contentProps && contentProps.className);\n  const textClassNames = classNames(\"euiButtonEmpty__text\", textProps && textProps.className);\n  const cssStyles = [buttonColorStyles];\n  const innerNode = _jsxDEV(EuiButtonContent, {\n    isLoading: isLoading,\n    iconType: iconType,\n    iconSide: iconSide,\n    iconSize: size === \"xs\" ? \"s\" : iconSize,\n    textProps: {\n      ...textProps,\n      className: textClassNames\n    },\n    ...contentProps,\n    // className has to come last to override contentProps.className\n    className: contentClassNames,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({\n      href,\n      target,\n      rel\n    });\n    return _jsxDEV(\"a\", {\n      className: classes,\n      css: cssStyles,\n      href: href,\n      target: target,\n      rel: secureRel,\n      ref: buttonRef,\n      ...rest,\n      children: innerNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this);\n  }\n  return _jsxDEV(\"button\", {\n    disabled: isDisabled,\n    className: classes,\n    css: cssStyles,\n    type: type,\n    ref: buttonRef,\n    \"aria-pressed\": isSelected,\n    ...rest,\n    children: innerNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(EuiButtonEmpty, \"H5RhaEeFhcI9B1VFXktL18GTS7w=\", false, function () {\n  return [useEuiButtonColorCSS];\n});\n_c = EuiButtonEmpty;\nvar _c;\n$RefreshReg$(_c, \"EuiButtonEmpty\");","map":{"version":3,"names":["classNames","keysOf","EuiThemeProvider","getSecureRelForTarget","EuiButtonContentDeprecated","EuiButtonContent","useEuiButtonColorCSS","isButtonDisabled","sizeToClassNameMap","xs","s","m","SIZES","flushTypeToClassNameMap","left","right","both","FLUSH_TYPES","EuiButtonEmpty","props","children","className","iconType","iconSide","iconSize","color","_color","size","flush","isDisabled","_isDisabled","disabled","isLoading","href","target","rel","type","buttonRef","contentProps","textProps","isSelected","rest","buttonColorStyles","display","classes","contentClassNames","textClassNames","cssStyles","innerNode","secureRel"],"sources":["/Users/nikita/Downloads/super_date_picker/src/button/button_empty/button_empty.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { FunctionComponent, Ref } from \"react\";\n/** @jsxImportSource @emotion/react */\nimport classNames from \"classnames\";\n\nimport {\n  CommonProps,\n  ExclusiveUnion,\n  PropsForAnchor,\n  PropsForButton,\n  keysOf,\n} from \"../../common\";\nimport { EuiThemeProvider, getSecureRelForTarget } from \"../../services\";\n\nimport {\n  EuiButtonContentDeprecated as EuiButtonContent,\n  EuiButtonContentProps,\n  EuiButtonContentType,\n} from \"../_button_content_deprecated\";\n\nimport {\n  useEuiButtonColorCSS,\n  _EuiButtonColor,\n} from \"../../themes/amsterdam/global_styling/mixins/button\";\nimport { isButtonDisabled } from \"../button_display/_button_display\";\n\nconst sizeToClassNameMap = {\n  xs: \"euiButtonEmpty--xSmall\",\n  s: \"euiButtonEmpty--small\",\n  m: null,\n};\n\nexport const SIZES = keysOf(sizeToClassNameMap);\n\nexport type EuiButtonEmptySizes = keyof typeof sizeToClassNameMap;\n\nconst flushTypeToClassNameMap = {\n  left: \"euiButtonEmpty--flushLeft\",\n  right: \"euiButtonEmpty--flushRight\",\n  both: \"euiButtonEmpty--flushBoth\",\n};\n\nexport const FLUSH_TYPES = keysOf(flushTypeToClassNameMap);\n\n/**\n * Extends EuiButtonContentProps which provides\n * `iconType`, `iconSide`, and `textProps`\n */\nexport interface CommonEuiButtonEmptyProps\n  extends EuiButtonContentProps,\n    CommonProps {\n  /**\n   * Any of the named color palette options.\n   * **`'ghost'` is set for deprecation. Use EuiThemeProvide.colorMode = 'dark' instead.**\n   */\n  color?: _EuiButtonColor | \"ghost\";\n  size?: EuiButtonEmptySizes;\n  /**\n   * Ensure the text of the button sits flush to the left, right, or both sides of its container\n   */\n  flush?: keyof typeof flushTypeToClassNameMap;\n  /**\n   * `disabled` is also allowed\n   */\n  isDisabled?: boolean;\n  /**\n   * Force disables the button and changes the icon to a loading spinner\n   */\n  isLoading?: boolean;\n  /**\n   * Applies the boolean state as the `aria-pressed` property to create a toggle button.\n   * *Only use when the readable text does not change between states.*\n   */\n  isSelected?: boolean;\n  href?: string;\n  target?: string;\n  rel?: string;\n  type?: \"button\" | \"submit\";\n  buttonRef?: Ref<HTMLButtonElement | HTMLAnchorElement>;\n  /**\n   * Object of props passed to the <span/> wrapping the button's content\n   */\n  contentProps?: CommonProps & EuiButtonContentType;\n}\n\ntype EuiButtonEmptyPropsForAnchor = PropsForAnchor<CommonEuiButtonEmptyProps>;\n\ntype EuiButtonEmptyPropsForButton = PropsForButton<CommonEuiButtonEmptyProps>;\n\nexport type EuiButtonEmptyProps = ExclusiveUnion<\n  EuiButtonEmptyPropsForAnchor,\n  EuiButtonEmptyPropsForButton\n>;\n\nexport const EuiButtonEmpty: FunctionComponent<EuiButtonEmptyProps> = (\n  props\n) => {\n  const {\n    children,\n    className,\n    iconType,\n    iconSide = \"left\",\n    iconSize = \"m\",\n    color: _color = \"primary\",\n    size = \"m\",\n    flush,\n    isDisabled: _isDisabled,\n    disabled,\n    isLoading,\n    href,\n    target,\n    rel,\n    type = \"button\",\n    buttonRef,\n    contentProps,\n    textProps,\n    isSelected,\n    ...rest\n  } = props;\n\n  const isDisabled = isButtonDisabled({\n    isDisabled: _isDisabled || disabled,\n    href,\n    isLoading,\n  });\n\n  // eslint-disable-next-line no-nested-ternary\n  const color = isDisabled ? \"disabled\" : _color === \"ghost\" ? \"text\" : _color;\n  const buttonColorStyles = useEuiButtonColorCSS({\n    display: \"empty\",\n  })[color];\n\n  if (_color === \"ghost\") {\n    // INCEPTION: If `ghost`, re-implement with a wrapping dark mode theme provider\n    return (\n      <EuiThemeProvider colorMode=\"dark\">\n        <EuiButtonEmpty {...props} color=\"text\" />\n      </EuiThemeProvider>\n    );\n  }\n\n  const classes = classNames(\n    \"euiButtonEmpty\",\n    size ? sizeToClassNameMap[size] : null,\n    flush ? flushTypeToClassNameMap[flush] : null,\n    className\n  );\n\n  const contentClassNames = classNames(\n    \"euiButtonEmpty__content\",\n    contentProps && contentProps.className\n  );\n\n  const textClassNames = classNames(\n    \"euiButtonEmpty__text\",\n    textProps && textProps.className\n  );\n\n  const cssStyles = [buttonColorStyles];\n\n  const innerNode = (\n    <EuiButtonContent\n      isLoading={isLoading}\n      iconType={iconType}\n      iconSide={iconSide}\n      iconSize={size === \"xs\" ? \"s\" : iconSize}\n      textProps={{ ...textProps, className: textClassNames }}\n      {...contentProps}\n      // className has to come last to override contentProps.className\n      className={contentClassNames}\n    >\n      {children}\n    </EuiButtonContent>\n  );\n\n  // <a> elements don't respect the `disabled` attribute. So if we're disabled, we'll just pretend\n  // this is a button and piggyback off its disabled styles.\n  if (href && !isDisabled) {\n    const secureRel = getSecureRelForTarget({ href, target, rel });\n\n    return (\n      <a\n        className={classes}\n        css={cssStyles}\n        href={href}\n        target={target}\n        rel={secureRel}\n        ref={buttonRef as Ref<HTMLAnchorElement>}\n        {...(rest as EuiButtonEmptyPropsForAnchor)}\n      >\n        {innerNode}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      disabled={isDisabled}\n      className={classes}\n      css={cssStyles}\n      type={type}\n      ref={buttonRef as Ref<HTMLButtonElement>}\n      aria-pressed={isSelected}\n      {...(rest as EuiButtonEmptyPropsForButton)}\n    >\n      {innerNode}\n    </button>\n  );\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,UAAU,MAAM,YAAY;AAEnC,SAKEC,MAAM,QACD,cAAc;AACrB,SAASC,gBAAgB,EAAEC,qBAAqB,QAAQ,gBAAgB;AAExE,SACEC,0BAA0B,IAAIC,gBAAgB,QAGzC,+BAA+B;AAEtC,SACEC,oBAAoB,QAEf,qDAAqD;AAC5D,SAASC,gBAAgB,QAAQ,mCAAmC;AAAC;AAErE,MAAMC,kBAAkB,GAAG;EACzBC,EAAE,EAAE,wBAAwB;EAC5BC,CAAC,EAAE,uBAAuB;EAC1BC,CAAC,EAAE;AACL,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGX,MAAM,CAACO,kBAAkB,CAAC;AAI/C,MAAMK,uBAAuB,GAAG;EAC9BC,IAAI,EAAE,2BAA2B;EACjCC,KAAK,EAAE,4BAA4B;EACnCC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGhB,MAAM,CAACY,uBAAuB,CAAC;;AAE1D;AACA;AACA;AACA;;AA+CA,OAAO,MAAMK,cAAsD,GACjEC,KAAK,IACF;EAAA;EACH,MAAM;IACJC,QAAQ;IACRC,SAAS;IACTC,QAAQ;IACRC,QAAQ,GAAG,MAAM;IACjBC,QAAQ,GAAG,GAAG;IACdC,KAAK,EAAEC,MAAM,GAAG,SAAS;IACzBC,IAAI,GAAG,GAAG;IACVC,KAAK;IACLC,UAAU,EAAEC,WAAW;IACvBC,QAAQ;IACRC,SAAS;IACTC,IAAI;IACJC,MAAM;IACNC,GAAG;IACHC,IAAI,GAAG,QAAQ;IACfC,SAAS;IACTC,YAAY;IACZC,SAAS;IACTC,UAAU;IACV,GAAGC;EACL,CAAC,GAAGtB,KAAK;EAET,MAAMU,UAAU,GAAGtB,gBAAgB,CAAC;IAClCsB,UAAU,EAAEC,WAAW,IAAIC,QAAQ;IACnCE,IAAI;IACJD;EACF,CAAC,CAAC;;EAEF;EACA,MAAMP,KAAK,GAAGI,UAAU,GAAG,UAAU,GAAGH,MAAM,KAAK,OAAO,GAAG,MAAM,GAAGA,MAAM;EAC5E,MAAMgB,iBAAiB,GAAGpC,oBAAoB,CAAC;IAC7CqC,OAAO,EAAE;EACX,CAAC,CAAC,CAAClB,KAAK,CAAC;EAET,IAAIC,MAAM,KAAK,OAAO,EAAE;IACtB;IACA,OACE,QAAC,gBAAgB;MAAC,SAAS,EAAC,MAAM;MAAA,UAChC,QAAC,cAAc;QAAA,GAAKP,KAAK;QAAE,KAAK,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACzB;EAEvB;EAEA,MAAMyB,OAAO,GAAG5C,UAAU,CACxB,gBAAgB,EAChB2B,IAAI,GAAGnB,kBAAkB,CAACmB,IAAI,CAAC,GAAG,IAAI,EACtCC,KAAK,GAAGf,uBAAuB,CAACe,KAAK,CAAC,GAAG,IAAI,EAC7CP,SAAS,CACV;EAED,MAAMwB,iBAAiB,GAAG7C,UAAU,CAClC,yBAAyB,EACzBsC,YAAY,IAAIA,YAAY,CAACjB,SAAS,CACvC;EAED,MAAMyB,cAAc,GAAG9C,UAAU,CAC/B,sBAAsB,EACtBuC,SAAS,IAAIA,SAAS,CAAClB,SAAS,CACjC;EAED,MAAM0B,SAAS,GAAG,CAACL,iBAAiB,CAAC;EAErC,MAAMM,SAAS,GACb,QAAC,gBAAgB;IACf,SAAS,EAAEhB,SAAU;IACrB,QAAQ,EAAEV,QAAS;IACnB,QAAQ,EAAEC,QAAS;IACnB,QAAQ,EAAEI,IAAI,KAAK,IAAI,GAAG,GAAG,GAAGH,QAAS;IACzC,SAAS,EAAE;MAAE,GAAGe,SAAS;MAAElB,SAAS,EAAEyB;IAAe,CAAE;IAAA,GACnDR,YAAY;IAChB;IACA,SAAS,EAAEO,iBAAkB;IAAA,UAE5BzB;EAAQ;IAAA;IAAA;IAAA;EAAA,QAEZ;;EAED;EACA;EACA,IAAIa,IAAI,IAAI,CAACJ,UAAU,EAAE;IACvB,MAAMoB,SAAS,GAAG9C,qBAAqB,CAAC;MAAE8B,IAAI;MAAEC,MAAM;MAAEC;IAAI,CAAC,CAAC;IAE9D,OACE;MACE,SAAS,EAAES,OAAQ;MACnB,GAAG,EAAEG,SAAU;MACf,IAAI,EAAEd,IAAK;MACX,MAAM,EAAEC,MAAO;MACf,GAAG,EAAEe,SAAU;MACf,GAAG,EAAEZ,SAAoC;MAAA,GACpCI,IAAI;MAAA,UAERO;IAAS;MAAA;MAAA;MAAA;IAAA,QACR;EAER;EAEA,OACE;IACE,QAAQ,EAAEnB,UAAW;IACrB,SAAS,EAAEe,OAAQ;IACnB,GAAG,EAAEG,SAAU;IACf,IAAI,EAAEX,IAAK;IACX,GAAG,EAAEC,SAAoC;IACzC,gBAAcG,UAAW;IAAA,GACpBC,IAAI;IAAA,UAERO;EAAS;IAAA;IAAA;IAAA;EAAA,QACH;AAEb,CAAC;AAAC,GAlHW9B,cAAsD;EAAA,QAkCvCZ,oBAAoB;AAAA;AAAA,KAlCnCY,cAAsD;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}