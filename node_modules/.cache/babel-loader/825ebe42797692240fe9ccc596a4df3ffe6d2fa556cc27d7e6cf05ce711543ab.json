{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { keysOf } from '../../common';\nimport LOGICALS from './logicals.json';\n\n/**\n * EUI utilizes logical CSS properties to enable directional writing-modes.\n * To encourage use of logical properties, we provide a few helper utilities to\n * convert certain directional properties to logical properties.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\n */\n\nexport const logicalSide = {\n  left: 'inline-start',\n  right: 'inline-end',\n  top: 'block-start',\n  bottom: 'block-end',\n  horizontal: 'inline',\n  vertical: 'block'\n};\nexport const LOGICAL_SIDES = keysOf(logicalSide);\nexport const logicals = LOGICALS;\nexport const LOGICAL_PROPERTIES = keysOf(logicals);\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `string` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalCSS = (property, value) => {\n  return `${logicals[property]}: ${value};`;\n};\n\n/**\n * Some logical properties are not yet fully supported by all browsers.\n * For those cases, we should use the old property as a fallback for\n * browsers missing support, while allowing supporting browsers to use\n * the logical properties.\n *\n * Examples:\n * https://caniuse.com/?search=overflow-block\n * https://caniuse.com/mdn-css_properties_float_flow_relative_values\n */\nexport const logicalCSSWithFallback = (property, value) => `\n  ${property}: ${value};\n  ${logicalCSS(property, value)}\n`;\n\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `object` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalStyle = (property, value) => {\n  // Strip hyphens and camelCase the CSS logical property so React doesn't throw errors\n  const camelCasedProperty = logicals[property].replace(/-\\w/g, str => str.charAt(1).toUpperCase());\n  return {\n    [camelCasedProperty]: value\n  };\n};\n\n/**\n *\n * @param width A string value for the LTR width\n * @param height A string value for the LTR height\n * @returns `string` Returns the logical CSS properties for height and width\n */\nexport const logicalSizeCSS = (width, height) => {\n  return `\n    ${logicals.width}: ${width};\n    ${logicals.height}: ${height};\n  `;\n};\n\n/**\n *\n * @param width A string value for the LTR width\n * @param height A string value for the LTR height\n * @returns `object` Returns the logical CSS properties for height and width\n */\nexport const logicalSizeStyle = (width, height) => {\n  return {\n    ...logicalStyle('width', width),\n    ...logicalStyle('height', height)\n  };\n};\n\n// Text alignment is separate because its the value that changes not the property\nexport const logicalText = {\n  'text-align': {\n    left: 'start',\n    center: 'center',\n    right: 'end'\n  }\n};\nexport const LOGICAL_TEXT_ALIGNMENT = keysOf(logicalText['text-align']);\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `string` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalTextAlignCSS = value => {\n  return `text-align: ${logicalText['text-align'][value]};`;\n};\n\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `object` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalTextAlignStyle = value => {\n  return {\n    textAlign: logicalText['text-align'][value]\n  };\n};","map":{"version":3,"names":["keysOf","LOGICALS","logicalSide","left","right","top","bottom","horizontal","vertical","LOGICAL_SIDES","logicals","LOGICAL_PROPERTIES","logicalCSS","property","value","logicalCSSWithFallback","logicalStyle","camelCasedProperty","replace","str","charAt","toUpperCase","logicalSizeCSS","width","height","logicalSizeStyle","logicalText","center","LOGICAL_TEXT_ALIGNMENT","logicalTextAlignCSS","logicalTextAlignStyle","textAlign"],"sources":["/Users/nikita/Downloads/super_date_picker/src/global_styling/functions/logicals.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { keysOf } from '../../common';\nimport LOGICALS from './logicals.json';\n\n/**\n * EUI utilizes logical CSS properties to enable directional writing-modes.\n * To encourage use of logical properties, we provide a few helper utilities to\n * convert certain directional properties to logical properties.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\n */\n\nexport const logicalSide = {\n  left: 'inline-start',\n  right: 'inline-end',\n  top: 'block-start',\n  bottom: 'block-end',\n  horizontal: 'inline',\n  vertical: 'block',\n};\nexport const LOGICAL_SIDES = keysOf(logicalSide);\nexport type LogicalSides = typeof LOGICAL_SIDES[number];\n\nexport const logicals = LOGICALS;\nexport const LOGICAL_PROPERTIES = keysOf(logicals);\nexport type LogicalProperties = typeof LOGICAL_PROPERTIES[number];\n\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `string` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalCSS = (property: LogicalProperties, value?: any) => {\n  return `${logicals[property]}: ${value};`;\n};\n\n/**\n * Some logical properties are not yet fully supported by all browsers.\n * For those cases, we should use the old property as a fallback for\n * browsers missing support, while allowing supporting browsers to use\n * the logical properties.\n *\n * Examples:\n * https://caniuse.com/?search=overflow-block\n * https://caniuse.com/mdn-css_properties_float_flow_relative_values\n */\nexport const logicalCSSWithFallback = (\n  property: LogicalProperties,\n  value?: any\n) => `\n  ${property}: ${value};\n  ${logicalCSS(property, value)}\n`;\n\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `object` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalStyle = (property: LogicalProperties, value?: any) => {\n  // Strip hyphens and camelCase the CSS logical property so React doesn't throw errors\n  const camelCasedProperty = logicals[property].replace(/-\\w/g, (str) =>\n    str.charAt(1).toUpperCase()\n  );\n  return { [camelCasedProperty]: value };\n};\n\n/**\n *\n * @param width A string value for the LTR width\n * @param height A string value for the LTR height\n * @returns `string` Returns the logical CSS properties for height and width\n */\nexport const logicalSizeCSS = (width: any, height: any) => {\n  return `\n    ${logicals.width}: ${width};\n    ${logicals.height}: ${height};\n  `;\n};\n\n/**\n *\n * @param width A string value for the LTR width\n * @param height A string value for the LTR height\n * @returns `object` Returns the logical CSS properties for height and width\n */\nexport const logicalSizeStyle = (width: any, height: any) => {\n  return {\n    ...logicalStyle('width', width),\n    ...logicalStyle('height', height),\n  };\n};\n\n// Text alignment is separate because its the value that changes not the property\nexport const logicalText = {\n  'text-align': {\n    left: 'start',\n    center: 'center',\n    right: 'end',\n  },\n};\n\nexport const LOGICAL_TEXT_ALIGNMENT = keysOf(logicalText['text-align']);\nexport type LogicalText = typeof LOGICAL_TEXT_ALIGNMENT[number];\n\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `string` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalTextAlignCSS = (value: LogicalText) => {\n  return `text-align: ${logicalText['text-align'][value]};`;\n};\n\n/**\n *\n * @param property A string that is a valid CSS logical property\n * @param value String to output as the property value\n * @returns `object` Returns the logical CSS property version for the given `property: value` pair\n */\nexport const logicalTextAlignStyle = (value: LogicalText) => {\n  return { textAlign: logicalText['text-align'][value] };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,cAAc;AACrC,OAAOC,QAAQ,MAAM,iBAAiB;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAG;EACzBC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,YAAY;EACnBC,GAAG,EAAE,aAAa;EAClBC,MAAM,EAAE,WAAW;EACnBC,UAAU,EAAE,QAAQ;EACpBC,QAAQ,EAAE;AACZ,CAAC;AACD,OAAO,MAAMC,aAAa,GAAGT,MAAM,CAACE,WAAW,CAAC;AAGhD,OAAO,MAAMQ,QAAQ,GAAGT,QAAQ;AAChC,OAAO,MAAMU,kBAAkB,GAAGX,MAAM,CAACU,QAAQ,CAAC;AAGlD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,UAAU,GAAG,CAACC,QAA2B,EAAEC,KAAW,KAAK;EACtE,OAAQ,GAAEJ,QAAQ,CAACG,QAAQ,CAAE,KAAIC,KAAM,GAAE;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,CACpCF,QAA2B,EAC3BC,KAAW,KACP;AACN,IAAID,QAAS,KAAIC,KAAM;AACvB,IAAIF,UAAU,CAACC,QAAQ,EAAEC,KAAK,CAAE;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAG,CAACH,QAA2B,EAAEC,KAAW,KAAK;EACxE;EACA,MAAMG,kBAAkB,GAAGP,QAAQ,CAACG,QAAQ,CAAC,CAACK,OAAO,CAAC,MAAM,EAAGC,GAAG,IAChEA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,CAC5B;EACD,OAAO;IAAE,CAACJ,kBAAkB,GAAGH;EAAM,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,cAAc,GAAG,CAACC,KAAU,EAAEC,MAAW,KAAK;EACzD,OAAQ;AACV,MAAMd,QAAQ,CAACa,KAAM,KAAIA,KAAM;AAC/B,MAAMb,QAAQ,CAACc,MAAO,KAAIA,MAAO;AACjC,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACF,KAAU,EAAEC,MAAW,KAAK;EAC3D,OAAO;IACL,GAAGR,YAAY,CAAC,OAAO,EAAEO,KAAK,CAAC;IAC/B,GAAGP,YAAY,CAAC,QAAQ,EAAEQ,MAAM;EAClC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG;EACzB,YAAY,EAAE;IACZvB,IAAI,EAAE,OAAO;IACbwB,MAAM,EAAE,QAAQ;IAChBvB,KAAK,EAAE;EACT;AACF,CAAC;AAED,OAAO,MAAMwB,sBAAsB,GAAG5B,MAAM,CAAC0B,WAAW,CAAC,YAAY,CAAC,CAAC;AAGvE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAIf,KAAkB,IAAK;EACzD,OAAQ,eAAcY,WAAW,CAAC,YAAY,CAAC,CAACZ,KAAK,CAAE,GAAE;AAC3D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,qBAAqB,GAAIhB,KAAkB,IAAK;EAC3D,OAAO;IAAEiB,SAAS,EAAEL,WAAW,CAAC,YAAY,CAAC,CAACZ,KAAK;EAAE,CAAC;AACxD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}