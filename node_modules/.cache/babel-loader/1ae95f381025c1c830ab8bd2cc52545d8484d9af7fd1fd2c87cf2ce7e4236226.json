{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/button/button_display/_button_display_content.tsx\",\n  _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/** @jsxImportSource @emotion/react */\nimport { useEuiTheme } from \"../../services\";\nimport { EuiLoadingSpinner } from \"../../loading\";\nimport { EuiIcon } from \"../../icon\";\nimport { euiButtonDisplayContentStyles } from \"./_button_display_content.styles\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const ICON_SIZES = [\"s\", \"m\"];\nexport const ICON_SIDES = [\"left\", \"right\"];\nexport const EuiButtonDisplayContent = _ref => {\n  _s();\n  let {\n    children,\n    textProps,\n    isLoading = false,\n    isDisabled = false,\n    iconType,\n    iconSize = \"m\",\n    iconSide = \"left\",\n    ...contentProps\n  } = _ref;\n  const theme = useEuiTheme();\n  const styles = euiButtonDisplayContentStyles(theme);\n  const cssStyles = [styles.euiButtonDisplayContent];\n\n  // Add an icon to the button if one exists.\n  let icon;\n\n  // When the button is disabled the text gets gray\n  // and in some buttons the background gets a light gray\n  // for better contrast we want to change the border of the spinner\n  // to have the same color of the text. This way we ensure the borders\n  // are always visible. The default spinner color could be very light.\n  const loadingSpinnerColor = isDisabled ? {\n    border: \"currentcolor\"\n  } : undefined;\n  if (isLoading) {\n    icon = _jsxDEV(EuiLoadingSpinner, {\n      size: iconSize,\n      color: loadingSpinnerColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  } else if (iconType) {\n    icon = _jsxDEV(EuiIcon, {\n      type: iconType,\n      size: iconSize,\n      color: \"inherit\" // forces the icon to inherit its parent color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n  const isText = typeof children === \"string\";\n  return _jsxDEV(\"span\", {\n    css: cssStyles,\n    ...contentProps,\n    children: [iconSide === \"left\" && icon, isText || textProps ? _jsxDEV(\"span\", {\n      ...textProps,\n      className: classNames(\"eui-textTruncate\", textProps === null || textProps === void 0 ? void 0 : textProps.className),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : children, iconSide === \"right\" && icon]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(EuiButtonDisplayContent, \"EmLuvSS+ygRTODy5Y6XCUN9YNgU=\", false, function () {\n  return [useEuiTheme];\n});\n_c = EuiButtonDisplayContent;\nvar _c;\n$RefreshReg$(_c, \"EuiButtonDisplayContent\");","map":{"version":3,"names":["useEuiTheme","EuiLoadingSpinner","EuiIcon","euiButtonDisplayContentStyles","classNames","ICON_SIZES","ICON_SIDES","EuiButtonDisplayContent","children","textProps","isLoading","isDisabled","iconType","iconSize","iconSide","contentProps","theme","styles","cssStyles","euiButtonDisplayContent","icon","loadingSpinnerColor","border","undefined","isText","className"],"sources":["/Users/nikita/Downloads/super_date_picker/src/button/button_display/_button_display_content.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { HTMLAttributes, FunctionComponent, Ref } from \"react\";\n/** @jsxImportSource @emotion/react */\nimport { useEuiTheme } from \"../../services\";\nimport { CommonProps } from \"../../common\";\nimport { EuiLoadingSpinner } from \"../../loading\";\nimport { EuiIcon, IconType } from \"../../icon\";\nimport { euiButtonDisplayContentStyles } from \"./_button_display_content.styles\";\nimport classNames from \"classnames\";\n\nexport const ICON_SIZES = [\"s\", \"m\"] as const;\nexport type ButtonContentIconSize = typeof ICON_SIZES[number];\n\nexport const ICON_SIDES = [\"left\", \"right\"] as const;\nexport type ButtonContentIconSide = typeof ICON_SIDES[number] | undefined;\n\nexport type EuiButtonDisplayContentType = HTMLAttributes<HTMLSpanElement>;\n\n/**\n * *INTERNAL ONLY*\n * This component is simply a helper component for reuse within other button components.\n */\nexport interface EuiButtonDisplayContentProps extends CommonProps {\n  /**\n   * Any `type` accepted by EuiIcon\n   */\n  iconType?: IconType;\n  /**\n   * Can only be one side `left` or `right`\n   */\n  iconSide?: ButtonContentIconSide;\n  isLoading?: boolean;\n  /**\n   * Object of props passed to the <span/> wrapping the content's text/children only (not icon)\n   */\n  textProps?: HTMLAttributes<HTMLSpanElement> &\n    CommonProps & {\n      ref?: Ref<HTMLSpanElement>;\n      \"data-text\"?: string;\n    };\n  iconSize?: ButtonContentIconSize;\n  isDisabled?: boolean;\n}\n\nexport const EuiButtonDisplayContent: FunctionComponent<\n  EuiButtonDisplayContentType & EuiButtonDisplayContentProps\n> = ({\n  children,\n  textProps,\n  isLoading = false,\n  isDisabled = false,\n  iconType,\n  iconSize = \"m\",\n  iconSide = \"left\",\n  ...contentProps\n}) => {\n  const theme = useEuiTheme();\n  const styles = euiButtonDisplayContentStyles(theme);\n\n  const cssStyles = [styles.euiButtonDisplayContent];\n\n  // Add an icon to the button if one exists.\n  let icon;\n\n  // When the button is disabled the text gets gray\n  // and in some buttons the background gets a light gray\n  // for better contrast we want to change the border of the spinner\n  // to have the same color of the text. This way we ensure the borders\n  // are always visible. The default spinner color could be very light.\n  const loadingSpinnerColor = isDisabled\n    ? { border: \"currentcolor\" }\n    : undefined;\n\n  if (isLoading) {\n    icon = <EuiLoadingSpinner size={iconSize} color={loadingSpinnerColor} />;\n  } else if (iconType) {\n    icon = (\n      <EuiIcon\n        type={iconType}\n        size={iconSize}\n        color=\"inherit\" // forces the icon to inherit its parent color\n      />\n    );\n  }\n\n  const isText = typeof children === \"string\";\n\n  return (\n    <span css={cssStyles} {...contentProps}>\n      {iconSide === \"left\" && icon}\n      {isText || textProps ? (\n        <span\n          {...textProps}\n          className={classNames(\"eui-textTruncate\", textProps?.className)}\n        >\n          {children}\n        </span>\n      ) : (\n        children\n      )}\n      {iconSide === \"right\" && icon}\n    </span>\n  );\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,SAASA,WAAW,QAAQ,gBAAgB;AAE5C,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,OAAO,QAAkB,YAAY;AAC9C,SAASC,6BAA6B,QAAQ,kCAAkC;AAChF,OAAOC,UAAU,MAAM,YAAY;AAAC;AAEpC,OAAO,MAAMC,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,CAAU;AAG7C,OAAO,MAAMC,UAAU,GAAG,CAAC,MAAM,EAAE,OAAO,CAAU;AA+BpD,OAAO,MAAMC,uBAEZ,GAAG,QASE;EAAA;EAAA,IATD;IACHC,QAAQ;IACRC,SAAS;IACTC,SAAS,GAAG,KAAK;IACjBC,UAAU,GAAG,KAAK;IAClBC,QAAQ;IACRC,QAAQ,GAAG,GAAG;IACdC,QAAQ,GAAG,MAAM;IACjB,GAAGC;EACL,CAAC;EACC,MAAMC,KAAK,GAAGhB,WAAW,EAAE;EAC3B,MAAMiB,MAAM,GAAGd,6BAA6B,CAACa,KAAK,CAAC;EAEnD,MAAME,SAAS,GAAG,CAACD,MAAM,CAACE,uBAAuB,CAAC;;EAElD;EACA,IAAIC,IAAI;;EAER;EACA;EACA;EACA;EACA;EACA,MAAMC,mBAAmB,GAAGV,UAAU,GAClC;IAAEW,MAAM,EAAE;EAAe,CAAC,GAC1BC,SAAS;EAEb,IAAIb,SAAS,EAAE;IACbU,IAAI,GAAG,QAAC,iBAAiB;MAAC,IAAI,EAAEP,QAAS;MAAC,KAAK,EAAEQ;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAG;EAC1E,CAAC,MAAM,IAAIT,QAAQ,EAAE;IACnBQ,IAAI,GACF,QAAC,OAAO;MACN,IAAI,EAAER,QAAS;MACf,IAAI,EAAEC,QAAS;MACf,KAAK,EAAC,SAAS,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAEnB;EACH;EAEA,MAAMW,MAAM,GAAG,OAAOhB,QAAQ,KAAK,QAAQ;EAE3C,OACE;IAAM,GAAG,EAAEU,SAAU;IAAA,GAAKH,YAAY;IAAA,WACnCD,QAAQ,KAAK,MAAM,IAAIM,IAAI,EAC3BI,MAAM,IAAIf,SAAS,GAClB;MAAA,GACMA,SAAS;MACb,SAAS,EAAEL,UAAU,CAAC,kBAAkB,EAAEK,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEgB,SAAS,CAAE;MAAA,UAE/DjB;IAAQ;MAAA;MAAA;MAAA;IAAA,QACJ,GAEPA,QACD,EACAM,QAAQ,KAAK,OAAO,IAAIM,IAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QACxB;AAEX,CAAC;AAAC,GA3DWb,uBAEZ;EAAA,QAUeP,WAAW;AAAA;AAAA,KAZdO,uBAEZ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}