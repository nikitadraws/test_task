{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * A DOM node, a selector string (which will be passed to\n * `document.querySelector()` to find the DOM node), or a function that\n * returns a DOM node.\n */\n\nexport const findElementBySelectorOrRef = elementTarget => {\n  let node = elementTarget instanceof HTMLElement ? elementTarget : null;\n  if (typeof elementTarget === 'string') {\n    node = document.querySelector(elementTarget);\n  } else if (typeof elementTarget === 'function') {\n    node = elementTarget();\n  }\n  return node;\n};","map":{"version":3,"names":["findElementBySelectorOrRef","elementTarget","node","HTMLElement","document","querySelector"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/findElement.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * A DOM node, a selector string (which will be passed to\n * `document.querySelector()` to find the DOM node), or a function that\n * returns a DOM node.\n */\nexport type ElementTarget = HTMLElement | string | (() => HTMLElement);\n\nexport const findElementBySelectorOrRef = (elementTarget?: ElementTarget) => {\n  let node = elementTarget instanceof HTMLElement ? elementTarget : null;\n  if (typeof elementTarget === 'string') {\n    node = document.querySelector(elementTarget as string);\n  } else if (typeof elementTarget === 'function') {\n    node = (elementTarget as () => HTMLElement)();\n  }\n  return node;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMA,0BAA0B,GAAIC,aAA6B,IAAK;EAC3E,IAAIC,IAAI,GAAGD,aAAa,YAAYE,WAAW,GAAGF,aAAa,GAAG,IAAI;EACtE,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACrCC,IAAI,GAAGE,QAAQ,CAACC,aAAa,CAACJ,aAAa,CAAW;EACxD,CAAC,MAAM,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;IAC9CC,IAAI,GAAID,aAAa,EAAwB;EAC/C;EACA,OAAOC,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}