{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * This function calculates the initials/acronym for a given name.\n * It defaults to only 2 characters and will take the first character (of each word).\n * If only one word is supplied for the name, it will only pass back the first letter of the word,\n * unless forced to 2 letters by setting `initialsLength` to `2`.\n * It will pass back the characters with the same casing as the original string\n * unless otherwise specified.\n *\n * @param {string} name The full name of the item to turn into initials\n * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)\n * @param {string} initials (Optional) Custom initials (max 2 characters)\n * @returns {string} True if the color is dark, false otherwise.\n */\n\nexport const MAX_INITIALS = 2;\nexport function toInitials(name, initialsLength, initials) {\n  // Calculate the number of initials to show, maxing out at MAX_INITIALS\n  let calculatedInitialsLength = initials ? initials.split('').length : name.split(' ').length;\n  calculatedInitialsLength = calculatedInitialsLength > MAX_INITIALS ? MAX_INITIALS : calculatedInitialsLength;\n\n  // Check if initialsLength was passed and set to calculated, unless greater than MAX_INITIALS\n  if (initialsLength) {\n    calculatedInitialsLength = initialsLength <= MAX_INITIALS ? initialsLength : MAX_INITIALS;\n  }\n  let calculatedInitials;\n  // A. Set to initials prop if exists (but truncate to 2 characters max unless length is supplied)\n  if (initials) {\n    calculatedInitials = initials.substring(0, calculatedInitialsLength);\n  } else {\n    if (name.trim() && name.split(' ').length > 1) {\n      // B. If there are any spaces in the name, set to first letter of each word\n      calculatedInitials = name.match(/\\b(\\w)/g);\n      calculatedInitials = calculatedInitials && calculatedInitials.join('').substring(0, calculatedInitialsLength);\n    } else {\n      // C. Set to the name's initials truncated based on calculated length\n      calculatedInitials = name.substring(0, calculatedInitialsLength);\n    }\n  }\n  return calculatedInitials;\n}","map":{"version":3,"names":["MAX_INITIALS","toInitials","name","initialsLength","initials","calculatedInitialsLength","split","length","calculatedInitials","substring","trim","match","join"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/string/to_initials.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * This function calculates the initials/acronym for a given name.\n * It defaults to only 2 characters and will take the first character (of each word).\n * If only one word is supplied for the name, it will only pass back the first letter of the word,\n * unless forced to 2 letters by setting `initialsLength` to `2`.\n * It will pass back the characters with the same casing as the original string\n * unless otherwise specified.\n *\n * @param {string} name The full name of the item to turn into initials\n * @param {number} initialsLength (Optional) How many characters to show (max 2 allowed)\n * @param {string} initials (Optional) Custom initials (max 2 characters)\n * @returns {string} True if the color is dark, false otherwise.\n */\n\nexport const MAX_INITIALS = 2;\n\nexport function toInitials(\n  name: string,\n  initialsLength?: 1 | 2,\n  initials?: string\n): string | null {\n  // Calculate the number of initials to show, maxing out at MAX_INITIALS\n  let calculatedInitialsLength: number = initials\n    ? initials.split('').length\n    : name.split(' ').length;\n\n  calculatedInitialsLength =\n    calculatedInitialsLength > MAX_INITIALS\n      ? MAX_INITIALS\n      : calculatedInitialsLength;\n\n  // Check if initialsLength was passed and set to calculated, unless greater than MAX_INITIALS\n  if (initialsLength) {\n    calculatedInitialsLength =\n      initialsLength <= MAX_INITIALS ? initialsLength : MAX_INITIALS;\n  }\n\n  let calculatedInitials;\n  // A. Set to initials prop if exists (but truncate to 2 characters max unless length is supplied)\n  if (initials) {\n    calculatedInitials = initials.substring(0, calculatedInitialsLength);\n  } else {\n    if (name.trim() && name.split(' ').length > 1) {\n      // B. If there are any spaces in the name, set to first letter of each word\n      calculatedInitials = name.match(/\\b(\\w)/g);\n      calculatedInitials =\n        calculatedInitials &&\n        calculatedInitials.join('').substring(0, calculatedInitialsLength);\n    } else {\n      // C. Set to the name's initials truncated based on calculated length\n      calculatedInitials = name.substring(0, calculatedInitialsLength);\n    }\n  }\n\n  return calculatedInitials;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,YAAY,GAAG,CAAC;AAE7B,OAAO,SAASC,UAAU,CACxBC,IAAY,EACZC,cAAsB,EACtBC,QAAiB,EACF;EACf;EACA,IAAIC,wBAAgC,GAAGD,QAAQ,GAC3CA,QAAQ,CAACE,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,GACzBL,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM;EAE1BF,wBAAwB,GACtBA,wBAAwB,GAAGL,YAAY,GACnCA,YAAY,GACZK,wBAAwB;;EAE9B;EACA,IAAIF,cAAc,EAAE;IAClBE,wBAAwB,GACtBF,cAAc,IAAIH,YAAY,GAAGG,cAAc,GAAGH,YAAY;EAClE;EAEA,IAAIQ,kBAAkB;EACtB;EACA,IAAIJ,QAAQ,EAAE;IACZI,kBAAkB,GAAGJ,QAAQ,CAACK,SAAS,CAAC,CAAC,EAAEJ,wBAAwB,CAAC;EACtE,CAAC,MAAM;IACL,IAAIH,IAAI,CAACQ,IAAI,EAAE,IAAIR,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7C;MACAC,kBAAkB,GAAGN,IAAI,CAACS,KAAK,CAAC,SAAS,CAAC;MAC1CH,kBAAkB,GAChBA,kBAAkB,IAClBA,kBAAkB,CAACI,IAAI,CAAC,EAAE,CAAC,CAACH,SAAS,CAAC,CAAC,EAAEJ,wBAAwB,CAAC;IACtE,CAAC,MAAM;MACL;MACAG,kBAAkB,GAAGN,IAAI,CAACO,SAAS,CAAC,CAAC,EAAEJ,wBAAwB,CAAC;IAClE;EACF;EAEA,OAAOG,kBAAkB;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}