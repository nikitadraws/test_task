{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/date_picker/super_date_picker/date_popover/absolute_tab.tsx\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { Component } from \"react\";\nimport moment from \"moment\"; // eslint-disable-line import/named\n\nimport dateMath from \"@elastic/datemath\";\nimport { EuiDatePicker } from \"../../../date_picker\";\nimport { EuiFormRow, EuiFieldText, EuiFormLabel } from \"../../../form\";\nimport { EuiI18n } from \"../../../i18n\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class EuiAbsoluteTab extends Component {\n  constructor(props) {\n    super(props);\n    this.state = void 0;\n    this.handleChange = (date, event) => {\n      const {\n        onChange\n      } = this.props;\n      if (date === null) {\n        return;\n      }\n      onChange(date.toISOString(), event);\n      const valueAsMoment = moment(date);\n      this.setState({\n        valueAsMoment,\n        textInputValue: valueAsMoment.format(this.props.dateFormat),\n        isTextInvalid: false\n      });\n    };\n    this.handleTextChange = event => {\n      const {\n        onChange\n      } = this.props;\n      const valueAsMoment = moment(event.target.value, this.props.dateFormat, true);\n      const dateIsValid = valueAsMoment.isValid();\n      if (dateIsValid) {\n        onChange(valueAsMoment.toISOString(), event);\n      }\n      this.setState({\n        textInputValue: event.target.value,\n        isTextInvalid: !dateIsValid,\n        valueAsMoment: dateIsValid ? valueAsMoment : null\n      });\n    };\n    const parsedValue = dateMath.parse(props.value, {\n      roundUp: props.roundUp\n    });\n    const _valueAsMoment = parsedValue && parsedValue.isValid() ? parsedValue : moment();\n    const textInputValue = _valueAsMoment.locale(this.props.locale || \"en\").format(this.props.dateFormat);\n    this.state = {\n      isTextInvalid: false,\n      textInputValue,\n      valueAsMoment: _valueAsMoment\n    };\n  }\n  render() {\n    const {\n      dateFormat,\n      timeFormat,\n      locale,\n      utcOffset,\n      labelPrefix\n    } = this.props;\n    const {\n      valueAsMoment,\n      isTextInvalid,\n      textInputValue\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(EuiDatePicker, {\n        inline: true,\n        showTimeSelect: true,\n        shadow: false,\n        selected: valueAsMoment,\n        onChange: this.handleChange,\n        dateFormat: dateFormat,\n        timeFormat: timeFormat,\n        locale: locale,\n        utcOffset: utcOffset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EuiI18n, {\n        token: \"euiAbsoluteTab.dateFormatError\",\n        default: \"Expected format: {dateFormat}\",\n        values: {\n          dateFormat\n        },\n        children: dateFormatError => /*#__PURE__*/_jsxDEV(EuiFormRow, {\n          className: \"euiSuperDatePicker__absoluteDateFormRow\",\n          isInvalid: isTextInvalid,\n          error: isTextInvalid ? dateFormatError : undefined,\n          children: /*#__PURE__*/_jsxDEV(EuiFieldText, {\n            compressed: true,\n            isInvalid: isTextInvalid,\n            value: textInputValue,\n            onChange: this.handleTextChange,\n            \"data-test-subj\": \"superDatePickerAbsoluteDateInput\",\n            prepend: /*#__PURE__*/_jsxDEV(EuiFormLabel, {\n              children: labelPrefix\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","moment","dateMath","EuiDatePicker","EuiFormRow","EuiFieldText","EuiFormLabel","EuiI18n","EuiAbsoluteTab","constructor","props","state","handleChange","date","event","onChange","toISOString","valueAsMoment","setState","textInputValue","format","dateFormat","isTextInvalid","handleTextChange","target","value","dateIsValid","isValid","parsedValue","parse","roundUp","locale","render","timeFormat","utcOffset","labelPrefix","dateFormatError","undefined"],"sources":["/Users/nikita/Downloads/super_date_picker/src/date_picker/super_date_picker/date_popover/absolute_tab.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { Component, ChangeEventHandler } from \"react\";\n\nimport moment, { Moment, LocaleSpecifier } from \"moment\"; // eslint-disable-line import/named\n\nimport dateMath from \"@elastic/datemath\";\n\nimport { EuiDatePicker, EuiDatePickerProps } from \"../../../date_picker\";\nimport { EuiFormRow, EuiFieldText, EuiFormLabel } from \"../../../form\";\nimport { EuiI18n } from \"../../../i18n\";\nimport { EuiDatePopoverContentProps } from \"./date_popover_content\";\n\nexport interface EuiAbsoluteTabProps {\n  dateFormat: string;\n  timeFormat: string;\n  locale?: LocaleSpecifier;\n  value: string;\n  onChange: EuiDatePopoverContentProps[\"onChange\"];\n  roundUp: boolean;\n  position: \"start\" | \"end\";\n  labelPrefix: string;\n  utcOffset?: number;\n}\n\ninterface EuiAbsoluteTabState {\n  isTextInvalid: boolean;\n  textInputValue: string;\n  valueAsMoment: Moment | null;\n}\n\nexport class EuiAbsoluteTab extends Component<\n  EuiAbsoluteTabProps,\n  EuiAbsoluteTabState\n> {\n  state: EuiAbsoluteTabState;\n\n  constructor(props: EuiAbsoluteTabProps) {\n    super(props);\n\n    const parsedValue = dateMath.parse(props.value, { roundUp: props.roundUp });\n    const valueAsMoment =\n      parsedValue && parsedValue.isValid() ? parsedValue : moment();\n\n    const textInputValue = valueAsMoment\n      .locale(this.props.locale || \"en\")\n      .format(this.props.dateFormat);\n\n    this.state = {\n      isTextInvalid: false,\n      textInputValue,\n      valueAsMoment,\n    };\n  }\n\n  handleChange: EuiDatePickerProps[\"onChange\"] = (date, event) => {\n    const { onChange } = this.props;\n    if (date === null) {\n      return;\n    }\n    onChange(date.toISOString(), event);\n\n    const valueAsMoment = moment(date);\n    this.setState({\n      valueAsMoment,\n      textInputValue: valueAsMoment.format(this.props.dateFormat),\n      isTextInvalid: false,\n    });\n  };\n\n  handleTextChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    const { onChange } = this.props;\n    const valueAsMoment = moment(\n      event.target.value,\n      this.props.dateFormat,\n      true\n    );\n    const dateIsValid = valueAsMoment.isValid();\n    if (dateIsValid) {\n      onChange(valueAsMoment.toISOString(), event);\n    }\n    this.setState({\n      textInputValue: event.target.value,\n      isTextInvalid: !dateIsValid,\n      valueAsMoment: dateIsValid ? valueAsMoment : null,\n    });\n  };\n\n  render() {\n    const { dateFormat, timeFormat, locale, utcOffset, labelPrefix } =\n      this.props;\n    const { valueAsMoment, isTextInvalid, textInputValue } = this.state;\n\n    return (\n      <div>\n        <EuiDatePicker\n          inline\n          showTimeSelect\n          shadow={false}\n          selected={valueAsMoment}\n          onChange={this.handleChange}\n          dateFormat={dateFormat}\n          timeFormat={timeFormat}\n          locale={locale}\n          utcOffset={utcOffset}\n        />\n        <EuiI18n\n          token=\"euiAbsoluteTab.dateFormatError\"\n          default=\"Expected format: {dateFormat}\"\n          values={{ dateFormat }}\n        >\n          {(dateFormatError: string) => (\n            <EuiFormRow\n              className=\"euiSuperDatePicker__absoluteDateFormRow\"\n              isInvalid={isTextInvalid}\n              error={isTextInvalid ? dateFormatError : undefined}\n            >\n              <EuiFieldText\n                compressed\n                isInvalid={isTextInvalid}\n                value={textInputValue}\n                onChange={this.handleTextChange}\n                data-test-subj={\"superDatePickerAbsoluteDateInput\"}\n                prepend={<EuiFormLabel>{labelPrefix}</EuiFormLabel>}\n              />\n            </EuiFormRow>\n          )}\n        </EuiI18n>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}