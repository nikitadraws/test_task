{"ast":null,"code":"var _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useCallback } from 'react';\n\n/*\n * For use when a component needs to set `ref` objects from multiple sources.\n * For instance, if a component accepts a `ref` prop but also needs its own\n * local reference for calculations, etc.\n * This hook handles setting multiple `ref`s of any available `ref` type\n * in a single callback function.\n */\nexport const useCombinedRefs = refs => {\n  _s();\n  return useCallback(node => refs.forEach(ref => {\n    if (!ref) return;\n    if (typeof ref === 'function') {\n      ref(node);\n    } else {\n      ref.current = node;\n    }\n  }), [refs]);\n};\n_s(useCombinedRefs, \"epj4qY15NHsef74wNqHIp5fdZmg=\");","map":{"version":3,"names":["useCallback","useCombinedRefs","refs","node","forEach","ref","current"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/hooks/useCombinedRefs.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { MutableRefObject, Ref, useCallback } from 'react';\n\n/*\n * For use when a component needs to set `ref` objects from multiple sources.\n * For instance, if a component accepts a `ref` prop but also needs its own\n * local reference for calculations, etc.\n * This hook handles setting multiple `ref`s of any available `ref` type\n * in a single callback function.\n */\nexport const useCombinedRefs = <T>(\n  refs: Array<Ref<T> | MutableRefObject<T | undefined> | undefined>\n) => {\n  return useCallback(\n    (node: T) =>\n      refs.forEach((ref) => {\n        if (!ref) return;\n\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          (ref as MutableRefObject<T>).current = node;\n        }\n      }),\n    [refs]\n  );\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAgCA,WAAW,QAAQ,OAAO;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAC1BC,IAAiE,IAC9D;EAAA;EACH,OAAOF,WAAW,CACfG,IAAO,IACND,IAAI,CAACE,OAAO,CAAEC,GAAG,IAAK;IACpB,IAAI,CAACA,GAAG,EAAE;IAEV,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;MAC7BA,GAAG,CAACF,IAAI,CAAC;IACX,CAAC,MAAM;MACJE,GAAG,CAAyBC,OAAO,GAAGH,IAAI;IAC7C;EACF,CAAC,CAAC,EACJ,CAACD,IAAI,CAAC,CACP;AACH,CAAC;AAAC,GAhBWD,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}