{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/tool_tip/tool_tip.tsx\";\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { Component, Fragment } from \"react\";\nimport classNames from \"classnames\";\nimport { keysOf } from \"../common\";\nimport { EuiPortal } from \"../portal\";\nimport { EuiToolTipAnchor } from \"./tool_tip_anchor\";\nimport { EuiToolTipArrow } from \"./tool_tip_arrow\";\nimport { EuiToolTipPopover } from \"./tool_tip_popover\";\nimport { enqueueStateChange } from \"../services/react\";\nimport { findPopoverPosition, htmlIdGenerator } from \"../services\";\nimport { EuiResizeObserver } from \"../observer/resize_observer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst positionsToClassNameMap = {\n  top: \"euiToolTip--top\",\n  right: \"euiToolTip--right\",\n  bottom: \"euiToolTip--bottom\",\n  left: \"euiToolTip--left\"\n};\nexport const POSITIONS = keysOf(positionsToClassNameMap);\nconst delayToMsMap = {\n  regular: 250,\n  long: 250 * 5\n};\nconst displayToClassNameMap = {\n  inlineBlock: undefined,\n  block: \"euiToolTipAnchor--displayBlock\"\n};\nconst DEFAULT_TOOLTIP_STYLES = {\n  // position the tooltip content near the top-left\n  // corner of the window so it can't create scrollbars\n  // 50,50 because who knows what negative margins, padding, etc\n  top: 50,\n  left: 50,\n  // just in case, avoid any potential flicker by hiding\n  // the tooltip before it is positioned\n  opacity: 0,\n  // prevent accidental mouse interaction while positioning\n  visibility: \"hidden\"\n};\nexport class EuiToolTip extends Component {\n  constructor() {\n    super(...arguments);\n    this._isMounted = false;\n    this.anchor = null;\n    this.popover = null;\n    this.timeoutId = void 0;\n    this.state = {\n      visible: false,\n      hasFocus: false,\n      calculatedPosition: this.props.position,\n      toolTipStyles: DEFAULT_TOOLTIP_STYLES,\n      arrowStyles: undefined,\n      id: this.props.id || htmlIdGenerator()()\n    };\n    this.clearAnimationTimeout = () => {\n      if (this.timeoutId) {\n        this.timeoutId = clearTimeout(this.timeoutId);\n      }\n    };\n    this.testAnchor = () => {\n      // when the tooltip is visible, this checks if the anchor is still part of document\n      // this fixes when the react root is removed from the dom without unmounting\n      // https://github.com/elastic/eui/issues/1105\n      if (document.body.contains(this.anchor) === false) {\n        // the anchor is no longer part of `document`\n        this.hideToolTip();\n      } else {\n        if (this.state.visible) {\n          // if still visible, keep checking\n          requestAnimationFrame(this.testAnchor);\n        }\n      }\n    };\n    this.setAnchorRef = ref => this.anchor = ref;\n    this.setPopoverRef = ref => this.popover = ref;\n    this.showToolTip = () => {\n      if (!this.timeoutId) {\n        this.timeoutId = setTimeout(() => {\n          enqueueStateChange(() => this.setState({\n            visible: true\n          }));\n        }, delayToMsMap[this.props.delay]);\n      }\n    };\n    this.positionToolTip = () => {\n      const requestedPosition = this.props.position;\n      if (!this.anchor || !this.popover) {\n        return;\n      }\n      const {\n        position,\n        left,\n        top,\n        arrow\n      } = findPopoverPosition({\n        anchor: this.anchor,\n        popover: this.popover,\n        position: requestedPosition,\n        offset: 16,\n        // offset popover 16px from the anchor\n        arrowConfig: {\n          arrowWidth: 12,\n          arrowBuffer: 4\n        }\n      });\n\n      // If encroaching the right edge of the window:\n      // When `props.content` changes and is longer than `prevProps.content`, the tooltip width remains and\n      // the resizeObserver callback will fire twice (once for vertical resize caused by text line wrapping,\n      // once for a subsequent position correction) and cause a flash rerender and reposition.\n      // To prevent this, we can orient from the right so that text line wrapping does not occur, negating\n      // the second resizeObserver callback call.\n      const windowWidth = document.documentElement.clientWidth || window.innerWidth;\n      const useRightValue = windowWidth / 2 < left;\n      const toolTipStyles = {\n        top,\n        left: useRightValue ? \"auto\" : left,\n        right: useRightValue ? windowWidth - left - this.popover.offsetWidth : \"auto\"\n      };\n      this.setState({\n        visible: true,\n        calculatedPosition: position,\n        toolTipStyles,\n        arrowStyles: arrow\n      });\n    };\n    this.hideToolTip = () => {\n      this.clearAnimationTimeout();\n      enqueueStateChange(() => {\n        if (this._isMounted) {\n          this.setState({\n            visible: false,\n            toolTipStyles: DEFAULT_TOOLTIP_STYLES,\n            arrowStyles: undefined\n          });\n        }\n      });\n    };\n    this.onFocus = () => {\n      this.setState({\n        hasFocus: true\n      });\n      this.showToolTip();\n    };\n    this.onBlur = () => {\n      this.setState({\n        hasFocus: false\n      });\n      this.hideToolTip();\n    };\n    this.onMouseOut = event => {\n      // Prevent mousing over children from hiding the tooltip by testing for whether the mouse has\n      // left the anchor for a non-child.\n      if (this.anchor === event.relatedTarget || this.anchor != null && !this.anchor.contains(event.relatedTarget)) {\n        if (!this.state.hasFocus) {\n          this.hideToolTip();\n        }\n      }\n      if (this.props.onMouseOut) {\n        this.props.onMouseOut(event);\n      }\n    };\n  }\n  componentDidMount() {\n    this._isMounted = true;\n  }\n  componentWillUnmount() {\n    this.clearAnimationTimeout();\n    this._isMounted = false;\n  }\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.visible === false && this.state.visible === true) {\n      requestAnimationFrame(this.testAnchor);\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      anchorClassName,\n      anchorProps,\n      content,\n      title,\n      delay,\n      display,\n      ...rest\n    } = this.props;\n    const {\n      arrowStyles,\n      id,\n      toolTipStyles,\n      visible,\n      calculatedPosition\n    } = this.state;\n    const classes = classNames(\"euiToolTip\", className);\n    const anchorClasses = classNames(anchorClassName, anchorProps === null || anchorProps === void 0 ? void 0 : anchorProps.className);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(EuiToolTipAnchor, {\n        ...anchorProps,\n        ref: this.setAnchorRef,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        onMouseOver: this.showToolTip,\n        onMouseOut: this.onMouseOut,\n        id: this.state.id,\n        className: anchorClasses,\n        display: display,\n        isVisible: visible,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), visible && (content || title) && /*#__PURE__*/_jsxDEV(EuiPortal, {\n        children: /*#__PURE__*/_jsxDEV(EuiToolTipPopover, {\n          className: classes,\n          style: toolTipStyles,\n          positionToolTip: this.positionToolTip,\n          popoverRef: this.setPopoverRef,\n          title: title,\n          id: id,\n          role: \"tooltip\",\n          calculatedPosition: calculatedPosition,\n          ...rest,\n          children: [/*#__PURE__*/_jsxDEV(EuiToolTipArrow, {\n            style: arrowStyles,\n            className: \"euiToolTip__arrow\",\n            position: calculatedPosition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(EuiResizeObserver, {\n            onResize: this.positionToolTip,\n            children: resizeRef => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: resizeRef,\n              children: content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this);\n  }\n}\nEuiToolTip.defaultProps = {\n  position: \"top\",\n  delay: \"regular\",\n  display: \"inlineBlock\"\n};","map":{"version":3,"names":["Component","Fragment","classNames","keysOf","EuiPortal","EuiToolTipAnchor","EuiToolTipArrow","EuiToolTipPopover","enqueueStateChange","findPopoverPosition","htmlIdGenerator","EuiResizeObserver","positionsToClassNameMap","top","right","bottom","left","POSITIONS","delayToMsMap","regular","long","displayToClassNameMap","inlineBlock","undefined","block","DEFAULT_TOOLTIP_STYLES","opacity","visibility","EuiToolTip","_isMounted","anchor","popover","timeoutId","state","visible","hasFocus","calculatedPosition","props","position","toolTipStyles","arrowStyles","id","clearAnimationTimeout","clearTimeout","testAnchor","document","body","contains","hideToolTip","requestAnimationFrame","setAnchorRef","ref","setPopoverRef","showToolTip","setTimeout","setState","delay","positionToolTip","requestedPosition","arrow","offset","arrowConfig","arrowWidth","arrowBuffer","windowWidth","documentElement","clientWidth","window","innerWidth","useRightValue","offsetWidth","onFocus","onBlur","onMouseOut","event","relatedTarget","componentDidMount","componentWillUnmount","componentDidUpdate","_prevProps","prevState","render","children","className","anchorClassName","anchorProps","content","title","display","rest","classes","anchorClasses","resizeRef","defaultProps"],"sources":["/Users/nikita/Downloads/super_date_picker/src/tool_tip/tool_tip.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport {\n  Component,\n  ReactElement,\n  ReactNode,\n  MouseEvent as ReactMouseEvent,\n  HTMLAttributes,\n  Fragment,\n} from \"react\";\nimport classNames from \"classnames\";\n\nimport { CommonProps, keysOf } from \"../common\";\nimport { EuiPortal } from \"../portal\";\nimport { EuiToolTipAnchor } from \"./tool_tip_anchor\";\nimport { EuiToolTipArrow } from \"./tool_tip_arrow\";\nimport { EuiToolTipPopover, ToolTipPositions } from \"./tool_tip_popover\";\nimport { enqueueStateChange } from \"../services/react\";\nimport { findPopoverPosition, htmlIdGenerator } from \"../services\";\n\nimport { EuiResizeObserver } from \"../observer/resize_observer\";\n\nconst positionsToClassNameMap: { [key in ToolTipPositions]: string } = {\n  top: \"euiToolTip--top\",\n  right: \"euiToolTip--right\",\n  bottom: \"euiToolTip--bottom\",\n  left: \"euiToolTip--left\",\n};\n\nexport const POSITIONS = keysOf(positionsToClassNameMap);\n\nexport type ToolTipDelay = \"regular\" | \"long\";\n\nconst delayToMsMap: { [key in ToolTipDelay]: number } = {\n  regular: 250,\n  long: 250 * 5,\n};\n\ninterface ToolTipStyles {\n  top: number;\n  left: number | \"auto\";\n  right?: number | \"auto\";\n  opacity?: number;\n  visibility?: \"hidden\";\n}\n\nconst displayToClassNameMap = {\n  inlineBlock: undefined,\n  block: \"euiToolTipAnchor--displayBlock\",\n};\n\nconst DEFAULT_TOOLTIP_STYLES: ToolTipStyles = {\n  // position the tooltip content near the top-left\n  // corner of the window so it can't create scrollbars\n  // 50,50 because who knows what negative margins, padding, etc\n  top: 50,\n  left: 50,\n  // just in case, avoid any potential flicker by hiding\n  // the tooltip before it is positioned\n  opacity: 0,\n  // prevent accidental mouse interaction while positioning\n  visibility: \"hidden\",\n};\n\nexport interface EuiToolTipProps {\n  /**\n   * Passes onto the span wrapping the trigger.\n   */\n  anchorClassName?: string;\n  /**\n   * Passes onto the span wrapping the trigger.\n   */\n  anchorProps?: CommonProps & HTMLAttributes<HTMLSpanElement>;\n  /**\n   * The in-view trigger for your tooltip.\n   */\n  children: ReactElement;\n  /**\n   * Passes onto the tooltip itself, not the trigger.\n   */\n  className?: string;\n  /**\n   * The main content of your tooltip.\n   */\n  content?: ReactNode;\n  /**\n   * Common display alternatives for the anchor wrapper\n   */\n  display?: keyof typeof displayToClassNameMap;\n  /**\n   * Delay before showing tooltip. Good for repeatable items.\n   */\n  delay: ToolTipDelay;\n  /**\n   * An optional title for your tooltip.\n   */\n  title?: ReactNode;\n  /**\n   * Unless you provide one, this will be randomly generated.\n   */\n  id?: string;\n  /**\n   * Suggested position. If there is not enough room for it this will be changed.\n   */\n  position: ToolTipPositions;\n\n  /**\n   * If supplied, called when mouse movement causes the tool tip to be\n   * hidden.\n   */\n  onMouseOut?: (event: ReactMouseEvent<HTMLSpanElement, MouseEvent>) => void;\n}\n\ninterface State {\n  visible: boolean;\n  hasFocus: boolean;\n  calculatedPosition: ToolTipPositions;\n  toolTipStyles: ToolTipStyles;\n  arrowStyles: undefined | { left: number; top: number };\n  id: string;\n}\n\nexport class EuiToolTip extends Component<EuiToolTipProps, State> {\n  _isMounted = false;\n  anchor: null | HTMLElement = null;\n  popover: null | HTMLElement = null;\n  private timeoutId?: ReturnType<typeof setTimeout>;\n\n  state: State = {\n    visible: false,\n    hasFocus: false,\n    calculatedPosition: this.props.position,\n    toolTipStyles: DEFAULT_TOOLTIP_STYLES,\n    arrowStyles: undefined,\n    id: this.props.id || htmlIdGenerator()(),\n  };\n\n  static defaultProps: Partial<EuiToolTipProps> = {\n    position: \"top\",\n    delay: \"regular\",\n    display: \"inlineBlock\",\n  };\n\n  clearAnimationTimeout = () => {\n    if (this.timeoutId) {\n      this.timeoutId = clearTimeout(this.timeoutId) as undefined;\n    }\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.clearAnimationTimeout();\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(_prevProps: EuiToolTipProps, prevState: State) {\n    if (prevState.visible === false && this.state.visible === true) {\n      requestAnimationFrame(this.testAnchor);\n    }\n  }\n\n  testAnchor = () => {\n    // when the tooltip is visible, this checks if the anchor is still part of document\n    // this fixes when the react root is removed from the dom without unmounting\n    // https://github.com/elastic/eui/issues/1105\n    if (document.body.contains(this.anchor) === false) {\n      // the anchor is no longer part of `document`\n      this.hideToolTip();\n    } else {\n      if (this.state.visible) {\n        // if still visible, keep checking\n        requestAnimationFrame(this.testAnchor);\n      }\n    }\n  };\n\n  setAnchorRef = (ref: HTMLElement) => (this.anchor = ref);\n\n  setPopoverRef = (ref: HTMLElement) => (this.popover = ref);\n\n  showToolTip = () => {\n    if (!this.timeoutId) {\n      this.timeoutId = setTimeout(() => {\n        enqueueStateChange(() => this.setState({ visible: true }));\n      }, delayToMsMap[this.props.delay]);\n    }\n  };\n\n  positionToolTip = () => {\n    const requestedPosition = this.props.position;\n\n    if (!this.anchor || !this.popover) {\n      return;\n    }\n\n    const { position, left, top, arrow } = findPopoverPosition({\n      anchor: this.anchor,\n      popover: this.popover,\n      position: requestedPosition,\n      offset: 16, // offset popover 16px from the anchor\n      arrowConfig: {\n        arrowWidth: 12,\n        arrowBuffer: 4,\n      },\n    });\n\n    // If encroaching the right edge of the window:\n    // When `props.content` changes and is longer than `prevProps.content`, the tooltip width remains and\n    // the resizeObserver callback will fire twice (once for vertical resize caused by text line wrapping,\n    // once for a subsequent position correction) and cause a flash rerender and reposition.\n    // To prevent this, we can orient from the right so that text line wrapping does not occur, negating\n    // the second resizeObserver callback call.\n    const windowWidth =\n      document.documentElement.clientWidth || window.innerWidth;\n    const useRightValue = windowWidth / 2 < left;\n\n    const toolTipStyles: ToolTipStyles = {\n      top,\n      left: useRightValue ? \"auto\" : left,\n      right: useRightValue\n        ? windowWidth - left - this.popover.offsetWidth\n        : \"auto\",\n    };\n\n    this.setState({\n      visible: true,\n      calculatedPosition: position,\n      toolTipStyles,\n      arrowStyles: arrow,\n    });\n  };\n\n  hideToolTip = () => {\n    this.clearAnimationTimeout();\n    enqueueStateChange(() => {\n      if (this._isMounted) {\n        this.setState({\n          visible: false,\n          toolTipStyles: DEFAULT_TOOLTIP_STYLES,\n          arrowStyles: undefined,\n        });\n      }\n    });\n  };\n\n  onFocus = () => {\n    this.setState({\n      hasFocus: true,\n    });\n    this.showToolTip();\n  };\n\n  onBlur = () => {\n    this.setState({\n      hasFocus: false,\n    });\n    this.hideToolTip();\n  };\n\n  onMouseOut = (event: ReactMouseEvent<HTMLSpanElement, MouseEvent>) => {\n    // Prevent mousing over children from hiding the tooltip by testing for whether the mouse has\n    // left the anchor for a non-child.\n    if (\n      this.anchor === event.relatedTarget ||\n      (this.anchor != null &&\n        !this.anchor.contains(event.relatedTarget as Node))\n    ) {\n      if (!this.state.hasFocus) {\n        this.hideToolTip();\n      }\n    }\n\n    if (this.props.onMouseOut) {\n      this.props.onMouseOut(event);\n    }\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      anchorClassName,\n      anchorProps,\n      content,\n      title,\n      delay,\n      display,\n      ...rest\n    } = this.props;\n\n    const { arrowStyles, id, toolTipStyles, visible, calculatedPosition } =\n      this.state;\n\n    const classes = classNames(\"euiToolTip\", className);\n    const anchorClasses = classNames(anchorClassName, anchorProps?.className);\n\n    return (\n      <Fragment>\n        <EuiToolTipAnchor\n          {...anchorProps}\n          ref={this.setAnchorRef}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          onMouseOver={this.showToolTip}\n          onMouseOut={this.onMouseOut}\n          id={this.state.id}\n          className={anchorClasses}\n          display={display!}\n          isVisible={visible}\n        >\n          {children}\n        </EuiToolTipAnchor>\n        {visible && (content || title) && (\n          <EuiPortal>\n            <EuiToolTipPopover\n              className={classes}\n              style={toolTipStyles}\n              positionToolTip={this.positionToolTip}\n              popoverRef={this.setPopoverRef}\n              title={title}\n              id={id}\n              role=\"tooltip\"\n              calculatedPosition={calculatedPosition}\n              {...rest}\n            >\n              <EuiToolTipArrow\n                style={arrowStyles}\n                className=\"euiToolTip__arrow\"\n                position={calculatedPosition}\n              />\n              <EuiResizeObserver onResize={this.positionToolTip}>\n                {(resizeRef) => <div ref={resizeRef}>{content}</div>}\n              </EuiResizeObserver>\n            </EuiToolTipPopover>\n          </EuiPortal>\n        )}\n      </Fragment>\n    );\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACEA,SAAS,EAKTC,QAAQ,QACH,OAAO;AACd,OAAOC,UAAU,MAAM,YAAY;AAEnC,SAAsBC,MAAM,QAAQ,WAAW;AAC/C,SAASC,SAAS,QAAQ,WAAW;AACrC,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,iBAAiB,QAA0B,oBAAoB;AACxE,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,mBAAmB,EAAEC,eAAe,QAAQ,aAAa;AAElE,SAASC,iBAAiB,QAAQ,6BAA6B;AAAC;AAEhE,MAAMC,uBAA8D,GAAG;EACrEC,GAAG,EAAE,iBAAiB;EACtBC,KAAK,EAAE,mBAAmB;EAC1BC,MAAM,EAAE,oBAAoB;EAC5BC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGd,MAAM,CAACS,uBAAuB,CAAC;AAIxD,MAAMM,YAA+C,GAAG;EACtDC,OAAO,EAAE,GAAG;EACZC,IAAI,EAAE,GAAG,GAAG;AACd,CAAC;AAUD,MAAMC,qBAAqB,GAAG;EAC5BC,WAAW,EAAEC,SAAS;EACtBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,sBAAqC,GAAG;EAC5C;EACA;EACA;EACAZ,GAAG,EAAE,EAAE;EACPG,IAAI,EAAE,EAAE;EACR;EACA;EACAU,OAAO,EAAE,CAAC;EACV;EACAC,UAAU,EAAE;AACd,CAAC;AA4DD,OAAO,MAAMC,UAAU,SAAS5B,SAAS,CAAyB;EAAA;IAAA;IAAA,KAChE6B,UAAU,GAAG,KAAK;IAAA,KAClBC,MAAM,GAAuB,IAAI;IAAA,KACjCC,OAAO,GAAuB,IAAI;IAAA,KAC1BC,SAAS;IAAA,KAEjBC,KAAK,GAAU;MACbC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,KAAK;MACfC,kBAAkB,EAAE,IAAI,CAACC,KAAK,CAACC,QAAQ;MACvCC,aAAa,EAAEd,sBAAsB;MACrCe,WAAW,EAAEjB,SAAS;MACtBkB,EAAE,EAAE,IAAI,CAACJ,KAAK,CAACI,EAAE,IAAI/B,eAAe,EAAE;IACxC,CAAC;IAAA,KAQDgC,qBAAqB,GAAG,MAAM;MAC5B,IAAI,IAAI,CAACV,SAAS,EAAE;QAClB,IAAI,CAACA,SAAS,GAAGW,YAAY,CAAC,IAAI,CAACX,SAAS,CAAc;MAC5D;IACF,CAAC;IAAA,KAiBDY,UAAU,GAAG,MAAM;MACjB;MACA;MACA;MACA,IAAIC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACjB,MAAM,CAAC,KAAK,KAAK,EAAE;QACjD;QACA,IAAI,CAACkB,WAAW,EAAE;MACpB,CAAC,MAAM;QACL,IAAI,IAAI,CAACf,KAAK,CAACC,OAAO,EAAE;UACtB;UACAe,qBAAqB,CAAC,IAAI,CAACL,UAAU,CAAC;QACxC;MACF;IACF,CAAC;IAAA,KAEDM,YAAY,GAAIC,GAAgB,IAAM,IAAI,CAACrB,MAAM,GAAGqB,GAAI;IAAA,KAExDC,aAAa,GAAID,GAAgB,IAAM,IAAI,CAACpB,OAAO,GAAGoB,GAAI;IAAA,KAE1DE,WAAW,GAAG,MAAM;MAClB,IAAI,CAAC,IAAI,CAACrB,SAAS,EAAE;QACnB,IAAI,CAACA,SAAS,GAAGsB,UAAU,CAAC,MAAM;UAChC9C,kBAAkB,CAAC,MAAM,IAAI,CAAC+C,QAAQ,CAAC;YAAErB,OAAO,EAAE;UAAK,CAAC,CAAC,CAAC;QAC5D,CAAC,EAAEhB,YAAY,CAAC,IAAI,CAACmB,KAAK,CAACmB,KAAK,CAAC,CAAC;MACpC;IACF,CAAC;IAAA,KAEDC,eAAe,GAAG,MAAM;MACtB,MAAMC,iBAAiB,GAAG,IAAI,CAACrB,KAAK,CAACC,QAAQ;MAE7C,IAAI,CAAC,IAAI,CAACR,MAAM,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;QACjC;MACF;MAEA,MAAM;QAAEO,QAAQ;QAAEtB,IAAI;QAAEH,GAAG;QAAE8C;MAAM,CAAC,GAAGlD,mBAAmB,CAAC;QACzDqB,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBO,QAAQ,EAAEoB,iBAAiB;QAC3BE,MAAM,EAAE,EAAE;QAAE;QACZC,WAAW,EAAE;UACXC,UAAU,EAAE,EAAE;UACdC,WAAW,EAAE;QACf;MACF,CAAC,CAAC;;MAEF;MACA;MACA;MACA;MACA;MACA;MACA,MAAMC,WAAW,GACfnB,QAAQ,CAACoB,eAAe,CAACC,WAAW,IAAIC,MAAM,CAACC,UAAU;MAC3D,MAAMC,aAAa,GAAGL,WAAW,GAAG,CAAC,GAAGhD,IAAI;MAE5C,MAAMuB,aAA4B,GAAG;QACnC1B,GAAG;QACHG,IAAI,EAAEqD,aAAa,GAAG,MAAM,GAAGrD,IAAI;QACnCF,KAAK,EAAEuD,aAAa,GAChBL,WAAW,GAAGhD,IAAI,GAAG,IAAI,CAACe,OAAO,CAACuC,WAAW,GAC7C;MACN,CAAC;MAED,IAAI,CAACf,QAAQ,CAAC;QACZrB,OAAO,EAAE,IAAI;QACbE,kBAAkB,EAAEE,QAAQ;QAC5BC,aAAa;QACbC,WAAW,EAAEmB;MACf,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDX,WAAW,GAAG,MAAM;MAClB,IAAI,CAACN,qBAAqB,EAAE;MAC5BlC,kBAAkB,CAAC,MAAM;QACvB,IAAI,IAAI,CAACqB,UAAU,EAAE;UACnB,IAAI,CAAC0B,QAAQ,CAAC;YACZrB,OAAO,EAAE,KAAK;YACdK,aAAa,EAAEd,sBAAsB;YACrCe,WAAW,EAAEjB;UACf,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IAAA,KAEDgD,OAAO,GAAG,MAAM;MACd,IAAI,CAAChB,QAAQ,CAAC;QACZpB,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACkB,WAAW,EAAE;IACpB,CAAC;IAAA,KAEDmB,MAAM,GAAG,MAAM;MACb,IAAI,CAACjB,QAAQ,CAAC;QACZpB,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACa,WAAW,EAAE;IACpB,CAAC;IAAA,KAEDyB,UAAU,GAAIC,KAAmD,IAAK;MACpE;MACA;MACA,IACE,IAAI,CAAC5C,MAAM,KAAK4C,KAAK,CAACC,aAAa,IAClC,IAAI,CAAC7C,MAAM,IAAI,IAAI,IAClB,CAAC,IAAI,CAACA,MAAM,CAACiB,QAAQ,CAAC2B,KAAK,CAACC,aAAa,CAAU,EACrD;QACA,IAAI,CAAC,IAAI,CAAC1C,KAAK,CAACE,QAAQ,EAAE;UACxB,IAAI,CAACa,WAAW,EAAE;QACpB;MACF;MAEA,IAAI,IAAI,CAACX,KAAK,CAACoC,UAAU,EAAE;QACzB,IAAI,CAACpC,KAAK,CAACoC,UAAU,CAACC,KAAK,CAAC;MAC9B;IACF,CAAC;EAAA;EAjIDE,iBAAiB,GAAG;IAClB,IAAI,CAAC/C,UAAU,GAAG,IAAI;EACxB;EAEAgD,oBAAoB,GAAG;IACrB,IAAI,CAACnC,qBAAqB,EAAE;IAC5B,IAAI,CAACb,UAAU,GAAG,KAAK;EACzB;EAEAiD,kBAAkB,CAACC,UAA2B,EAAEC,SAAgB,EAAE;IAChE,IAAIA,SAAS,CAAC9C,OAAO,KAAK,KAAK,IAAI,IAAI,CAACD,KAAK,CAACC,OAAO,KAAK,IAAI,EAAE;MAC9De,qBAAqB,CAAC,IAAI,CAACL,UAAU,CAAC;IACxC;EACF;EAsHAqC,MAAM,GAAG;IACP,MAAM;MACJC,QAAQ;MACRC,SAAS;MACTC,eAAe;MACfC,WAAW;MACXC,OAAO;MACPC,KAAK;MACL/B,KAAK;MACLgC,OAAO;MACP,GAAGC;IACL,CAAC,GAAG,IAAI,CAACpD,KAAK;IAEd,MAAM;MAAEG,WAAW;MAAEC,EAAE;MAAEF,aAAa;MAAEL,OAAO;MAAEE;IAAmB,CAAC,GACnE,IAAI,CAACH,KAAK;IAEZ,MAAMyD,OAAO,GAAGxF,UAAU,CAAC,YAAY,EAAEiF,SAAS,CAAC;IACnD,MAAMQ,aAAa,GAAGzF,UAAU,CAACkF,eAAe,EAAEC,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEF,SAAS,CAAC;IAEzE,oBACE,QAAC,QAAQ;MAAA,wBACP,QAAC,gBAAgB;QAAA,GACXE,WAAW;QACf,GAAG,EAAE,IAAI,CAACnC,YAAa;QACvB,MAAM,EAAE,IAAI,CAACsB,MAAO;QACpB,OAAO,EAAE,IAAI,CAACD,OAAQ;QACtB,WAAW,EAAE,IAAI,CAAClB,WAAY;QAC9B,UAAU,EAAE,IAAI,CAACoB,UAAW;QAC5B,EAAE,EAAE,IAAI,CAACxC,KAAK,CAACQ,EAAG;QAClB,SAAS,EAAEkD,aAAc;QACzB,OAAO,EAAEH,OAAS;QAClB,SAAS,EAAEtD,OAAQ;QAAA,UAElBgD;MAAQ;QAAA;QAAA;QAAA;MAAA,QACQ,EAClBhD,OAAO,KAAKoD,OAAO,IAAIC,KAAK,CAAC,iBAC5B,QAAC,SAAS;QAAA,uBACR,QAAC,iBAAiB;UAChB,SAAS,EAAEG,OAAQ;UACnB,KAAK,EAAEnD,aAAc;UACrB,eAAe,EAAE,IAAI,CAACkB,eAAgB;UACtC,UAAU,EAAE,IAAI,CAACL,aAAc;UAC/B,KAAK,EAAEmC,KAAM;UACb,EAAE,EAAE9C,EAAG;UACP,IAAI,EAAC,SAAS;UACd,kBAAkB,EAAEL,kBAAmB;UAAA,GACnCqD,IAAI;UAAA,wBAER,QAAC,eAAe;YACd,KAAK,EAAEjD,WAAY;YACnB,SAAS,EAAC,mBAAmB;YAC7B,QAAQ,EAAEJ;UAAmB;YAAA;YAAA;YAAA;UAAA,QAC7B,eACF,QAAC,iBAAiB;YAAC,QAAQ,EAAE,IAAI,CAACqB,eAAgB;YAAA,UAC9CmC,SAAS,iBAAK;cAAK,GAAG,EAAEA,SAAU;cAAA,UAAEN;YAAO;cAAA;cAAA;cAAA;YAAA;UAAO;YAAA;YAAA;YAAA;UAAA,QAClC;QAAA;UAAA;UAAA;UAAA;QAAA;MACF;QAAA;QAAA;QAAA;MAAA,QAEvB;IAAA;MAAA;MAAA;MAAA;IAAA,QACQ;EAEf;AACF;AA5Na1D,UAAU,CAediE,YAAY,GAA6B;EAC9CvD,QAAQ,EAAE,KAAK;EACfkB,KAAK,EAAE,SAAS;EAChBgC,OAAO,EAAE;AACX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}