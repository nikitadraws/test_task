{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/loading/loading_spinner.tsx\",\n  _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/** @jsxImportSource @emotion/react */\n\nimport classNames from \"classnames\";\nimport { useEuiTheme } from \"../services\";\nimport { useLoadingAriaLabel } from \"./_loading_strings\";\nimport { euiLoadingSpinnerStyles, euiSpinnerBorderColorsCSS } from \"./loading_spinner.styles\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nexport const SIZES = [\"s\", \"m\", \"l\", \"xl\", \"xxl\"];\nexport const EuiLoadingSpinner = _ref => {\n  _s();\n  let {\n    size = \"m\",\n    className,\n    \"aria-label\": ariaLabel,\n    color,\n    style,\n    ...rest\n  } = _ref;\n  const euiTheme = useEuiTheme();\n  const styles = euiLoadingSpinnerStyles(euiTheme);\n  const cssStyles = [styles.euiLoadingSpinner, styles[size]];\n  const classes = classNames(\"euiLoadingSpinner\", className);\n  const defaultLabel = useLoadingAriaLabel();\n  const customColorStyle = color ? {\n    ...style,\n    borderColor: euiSpinnerBorderColorsCSS(euiTheme, color)\n  } : style;\n  return _jsxDEV(\"span\", {\n    className: classes,\n    css: cssStyles,\n    style: customColorStyle,\n    role: \"progressbar\",\n    \"aria-label\": ariaLabel || defaultLabel,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(EuiLoadingSpinner, \"HrEJCqkzML1w3LuZV1f3Su3FYxs=\", false, function () {\n  return [useEuiTheme, useLoadingAriaLabel];\n});\n_c = EuiLoadingSpinner;\nvar _c;\n$RefreshReg$(_c, \"EuiLoadingSpinner\");","map":{"version":3,"names":["classNames","useEuiTheme","useLoadingAriaLabel","euiLoadingSpinnerStyles","euiSpinnerBorderColorsCSS","SIZES","EuiLoadingSpinner","size","className","ariaLabel","color","style","rest","euiTheme","styles","cssStyles","euiLoadingSpinner","classes","defaultLabel","customColorStyle","borderColor"],"sources":["/Users/nikita/Downloads/super_date_picker/src/loading/loading_spinner.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { HTMLAttributes, FunctionComponent, CSSProperties } from \"react\";\n/** @jsxImportSource @emotion/react */\nimport { CommonProps } from \"../common\";\nimport classNames from \"classnames\";\nimport { useEuiTheme } from \"../services\";\nimport { useLoadingAriaLabel } from \"./_loading_strings\";\nimport {\n  euiLoadingSpinnerStyles,\n  euiSpinnerBorderColorsCSS,\n} from \"./loading_spinner.styles\";\n\nexport const SIZES = [\"s\", \"m\", \"l\", \"xl\", \"xxl\"] as const;\nexport type EuiLoadingSpinnerSize = typeof SIZES[number];\n\nexport type EuiLoadingSpinnerColor = {\n  border?: CSSProperties[\"color\"];\n  highlight?: CSSProperties[\"color\"];\n};\n\nexport type EuiLoadingSpinnerProps = CommonProps &\n  Omit<HTMLAttributes<HTMLDivElement>, \"color\"> & {\n    size?: EuiLoadingSpinnerSize;\n    /**\n     * Sets the color of the border and highlight.\n     * Each key accepts any valid CSS color value as a `string`\n     * See #EuiLoadingSpinnerColor\n     */\n    color?: EuiLoadingSpinnerColor;\n  };\n\nexport const EuiLoadingSpinner: FunctionComponent<EuiLoadingSpinnerProps> = ({\n  size = \"m\",\n  className,\n  \"aria-label\": ariaLabel,\n  color,\n  style,\n  ...rest\n}) => {\n  const euiTheme = useEuiTheme();\n  const styles = euiLoadingSpinnerStyles(euiTheme);\n  const cssStyles = [styles.euiLoadingSpinner, styles[size]];\n  const classes = classNames(\"euiLoadingSpinner\", className);\n  const defaultLabel = useLoadingAriaLabel();\n  const customColorStyle = color\n    ? { ...style, borderColor: euiSpinnerBorderColorsCSS(euiTheme, color) }\n    : style;\n\n  return (\n    <span\n      className={classes}\n      css={cssStyles}\n      style={customColorStyle}\n      role=\"progressbar\"\n      aria-label={ariaLabel || defaultLabel}\n      {...rest}\n    />\n  );\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA,OAAOA,UAAU,MAAM,YAAY;AACnC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SACEC,uBAAuB,EACvBC,yBAAyB,QACpB,0BAA0B;AAAC;AAElC,OAAO,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAU;AAmB1D,OAAO,MAAMC,iBAA4D,GAAG,QAOtE;EAAA;EAAA,IAPuE;IAC3EC,IAAI,GAAG,GAAG;IACVC,SAAS;IACT,YAAY,EAAEC,SAAS;IACvBC,KAAK;IACLC,KAAK;IACL,GAAGC;EACL,CAAC;EACC,MAAMC,QAAQ,GAAGZ,WAAW,EAAE;EAC9B,MAAMa,MAAM,GAAGX,uBAAuB,CAACU,QAAQ,CAAC;EAChD,MAAME,SAAS,GAAG,CAACD,MAAM,CAACE,iBAAiB,EAAEF,MAAM,CAACP,IAAI,CAAC,CAAC;EAC1D,MAAMU,OAAO,GAAGjB,UAAU,CAAC,mBAAmB,EAAEQ,SAAS,CAAC;EAC1D,MAAMU,YAAY,GAAGhB,mBAAmB,EAAE;EAC1C,MAAMiB,gBAAgB,GAAGT,KAAK,GAC1B;IAAE,GAAGC,KAAK;IAAES,WAAW,EAAEhB,yBAAyB,CAACS,QAAQ,EAAEH,KAAK;EAAE,CAAC,GACrEC,KAAK;EAET,OACE;IACE,SAAS,EAAEM,OAAQ;IACnB,GAAG,EAAEF,SAAU;IACf,KAAK,EAAEI,gBAAiB;IACxB,IAAI,EAAC,aAAa;IAClB,cAAYV,SAAS,IAAIS,YAAa;IAAA,GAClCN;EAAI;IAAA;IAAA;IAAA;EAAA,QACR;AAEN,CAAC;AAAC,GA3BWN,iBAA4D;EAAA,QAQtDL,WAAW,EAIPC,mBAAmB;AAAA;AAAA,KAZ7BI,iBAA4D;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}