{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { jsx } from '@emotion/react';\n\n/**\n * React.cloneElement does not work if the cloned element does not already have the\n * `css` prop - as a result, we need to use `jsx()` to manually clone the element\n * See https://github.com/emotion-js/emotion/issues/1404\n *\n * NOTE: We're still using/testing this utility internally, so this is not yet a public API\n */\nexport const cloneElementWithCss = (element, props) => {\n  const clonedElement = element.props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__ || element.type; // EMOTION_TYPE handles non-React elements (native JSX/HTML nodes)\n\n  const clonedProps = {\n    key: element.key,\n    ref: element.ref,\n    ...element.props,\n    ...props\n  };\n  if (props.css || element.props.css) {\n    clonedProps.css = [element.props.css, props.css];\n  }\n  return jsx(clonedElement, clonedProps);\n};","map":{"version":3,"names":["jsx","cloneElementWithCss","element","props","clonedElement","__EMOTION_TYPE_PLEASE_DO_NOT_USE__","type","clonedProps","key","ref","css"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/theme/clone_element.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport React from 'react';\nimport { jsx } from '@emotion/react';\n\n/**\n * React.cloneElement does not work if the cloned element does not already have the\n * `css` prop - as a result, we need to use `jsx()` to manually clone the element\n * See https://github.com/emotion-js/emotion/issues/1404\n *\n * NOTE: We're still using/testing this utility internally, so this is not yet a public API\n */\nexport const cloneElementWithCss = (\n  element: any,\n  props: any\n): React.ReactElement => {\n  const clonedElement =\n    element.props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__ || element.type; // EMOTION_TYPE handles non-React elements (native JSX/HTML nodes)\n\n  const clonedProps = {\n    key: element.key,\n    ref: element.ref,\n    ...element.props,\n    ...props,\n  };\n\n  if (props.css || element.props.css) {\n    clonedProps.css = [element.props.css, props.css];\n  }\n\n  return jsx(clonedElement, clonedProps);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,GAAG,QAAQ,gBAAgB;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,OAAY,EACZC,KAAU,KACa;EACvB,MAAMC,aAAa,GACjBF,OAAO,CAACC,KAAK,CAACE,kCAAkC,IAAIH,OAAO,CAACI,IAAI,CAAC,CAAC;;EAEpE,MAAMC,WAAW,GAAG;IAClBC,GAAG,EAAEN,OAAO,CAACM,GAAG;IAChBC,GAAG,EAAEP,OAAO,CAACO,GAAG;IAChB,GAAGP,OAAO,CAACC,KAAK;IAChB,GAAGA;EACL,CAAC;EAED,IAAIA,KAAK,CAACO,GAAG,IAAIR,OAAO,CAACC,KAAK,CAACO,GAAG,EAAE;IAClCH,WAAW,CAACG,GAAG,GAAG,CAACR,OAAO,CAACC,KAAK,CAACO,GAAG,EAAEP,KAAK,CAACO,GAAG,CAAC;EAClD;EAEA,OAAOV,GAAG,CAACI,aAAa,EAAEG,WAAW,CAAC;AACxC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}