{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * Utility for performing math callbacks on a string with CSS units\n * and returning a string with its unit preserved.\n *\n * Example usage:\n * mathWithUnits('4px', (x) => x / 2) = '2px';\n * mathWithUnits(euiTheme.size.xs, (x) => x + 2) = '6px';\n * mathWithUnits([euiTheme.size.l, euiTheme.size.s], (x, y) => x - y) = '16px';\n */\n// Unfortunately, this is the CSSProperties[] type used for several euiTheme vars\n\nexport const mathWithUnits = function (values, callback) {\n  let unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  if (!Array.isArray(values)) values = [values];\n  const foundNumericValues = [];\n  let foundUnit = '';\n  values.forEach(value => {\n    if (typeof value === 'string') {\n      var _matches$groups, _matches$groups2;\n      const regex = /(?<value>-?[\\d.]+)(?<unit>%|[a-zA-Z]*)/;\n      const matches = regex.exec(value);\n      const numericValue = Number(matches === null || matches === void 0 ? void 0 : (_matches$groups = matches.groups) === null || _matches$groups === void 0 ? void 0 : _matches$groups.value);\n      if (!isNaN(numericValue)) {\n        foundNumericValues.push(numericValue);\n      } else {\n        throw new Error('No valid numeric value found');\n      }\n      if (!unit && matches !== null && matches !== void 0 && (_matches$groups2 = matches.groups) !== null && _matches$groups2 !== void 0 && _matches$groups2.unit) {\n        if (!foundUnit) {\n          foundUnit = matches.groups.unit;\n        } else if (foundUnit !== matches.groups.unit) {\n          throw new Error('Multiple units found. Use `calc()` to mix and math multiple unit types (e.g. `%` & `px`) instead');\n        }\n      }\n    } else if (typeof value === 'number') {\n      foundNumericValues.push(value);\n    } else {\n      throw new Error('Invalid value type - pass a string or number');\n    }\n  });\n  return `${callback(...foundNumericValues)}${unit || foundUnit}`;\n};","map":{"version":3,"names":["mathWithUnits","values","callback","unit","Array","isArray","foundNumericValues","foundUnit","forEach","value","regex","matches","exec","numericValue","Number","groups","isNaN","push","Error"],"sources":["/Users/nikita/Downloads/super_date_picker/src/global_styling/functions/math.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * Utility for performing math callbacks on a string with CSS units\n * and returning a string with its unit preserved.\n *\n * Example usage:\n * mathWithUnits('4px', (x) => x / 2) = '2px';\n * mathWithUnits(euiTheme.size.xs, (x) => x + 2) = '6px';\n * mathWithUnits([euiTheme.size.l, euiTheme.size.s], (x, y) => x - y) = '16px';\n */\ntype ValueTypes = string | number | undefined; // Unfortunately, this is the CSSProperties[] type used for several euiTheme vars\n\nexport const mathWithUnits = (\n  values: ValueTypes | ValueTypes[], // Can accept a single input or array of inputs\n  callback: (...args: number[]) => number, // Can be multiplication, division, addition, etc.\n  unit: string = '' // Optional: allow specifying an override unit to return\n) => {\n  if (!Array.isArray(values)) values = [values];\n\n  const foundNumericValues: number[] = [];\n  let foundUnit = '';\n\n  values.forEach((value) => {\n    if (typeof value === 'string') {\n      const regex = /(?<value>-?[\\d.]+)(?<unit>%|[a-zA-Z]*)/;\n      const matches = regex.exec(value);\n\n      const numericValue = Number(matches?.groups?.value);\n\n      if (!isNaN(numericValue)) {\n        foundNumericValues.push(numericValue);\n      } else {\n        throw new Error('No valid numeric value found');\n      }\n\n      if (!unit && matches?.groups?.unit) {\n        if (!foundUnit) {\n          foundUnit = matches.groups.unit;\n        } else if (foundUnit !== matches.groups.unit) {\n          throw new Error(\n            'Multiple units found. Use `calc()` to mix and math multiple unit types (e.g. `%` & `px`) instead'\n          );\n        }\n      }\n    } else if (typeof value === 'number') {\n      foundNumericValues.push(value);\n    } else {\n      throw new Error('Invalid value type - pass a string or number');\n    }\n  });\n\n  return `${callback(...foundNumericValues)}${unit || foundUnit}`;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+C;;AAE/C,OAAO,MAAMA,aAAa,GAAG,UAC3BC,MAAiC,EACjCC,QAAuC,EAEpC;EAAA,IADHC,IAAY,uEAAG,EAAE;EAEjB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAEA,MAAM,GAAG,CAACA,MAAM,CAAC;EAE7C,MAAMK,kBAA4B,GAAG,EAAE;EACvC,IAAIC,SAAS,GAAG,EAAE;EAElBN,MAAM,CAACO,OAAO,CAAEC,KAAK,IAAK;IACxB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAAA;MAC7B,MAAMC,KAAK,GAAG,wCAAwC;MACtD,MAAMC,OAAO,GAAGD,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC;MAEjC,MAAMI,YAAY,GAAGC,MAAM,CAACH,OAAO,aAAPA,OAAO,0CAAPA,OAAO,CAAEI,MAAM,oDAAf,gBAAiBN,KAAK,CAAC;MAEnD,IAAI,CAACO,KAAK,CAACH,YAAY,CAAC,EAAE;QACxBP,kBAAkB,CAACW,IAAI,CAACJ,YAAY,CAAC;MACvC,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,IAAI,CAACf,IAAI,IAAIQ,OAAO,aAAPA,OAAO,mCAAPA,OAAO,CAAEI,MAAM,6CAAf,iBAAiBZ,IAAI,EAAE;QAClC,IAAI,CAACI,SAAS,EAAE;UACdA,SAAS,GAAGI,OAAO,CAACI,MAAM,CAACZ,IAAI;QACjC,CAAC,MAAM,IAAII,SAAS,KAAKI,OAAO,CAACI,MAAM,CAACZ,IAAI,EAAE;UAC5C,MAAM,IAAIe,KAAK,CACb,kGAAkG,CACnG;QACH;MACF;IACF,CAAC,MAAM,IAAI,OAAOT,KAAK,KAAK,QAAQ,EAAE;MACpCH,kBAAkB,CAACW,IAAI,CAACR,KAAK,CAAC;IAChC,CAAC,MAAM;MACL,MAAM,IAAIS,KAAK,CAAC,8CAA8C,CAAC;IACjE;EACF,CAAC,CAAC;EAEF,OAAQ,GAAEhB,QAAQ,CAAC,GAAGI,kBAAkB,CAAE,GAAEH,IAAI,IAAII,SAAU,EAAC;AACjE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}