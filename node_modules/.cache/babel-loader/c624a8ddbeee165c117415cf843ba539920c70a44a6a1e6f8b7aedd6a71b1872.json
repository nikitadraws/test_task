{"ast":null,"code":"var _s = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useEuiTheme } from '../../services';\n/**\n * It is best practice to utilize the browser's default `outline` property for handling focus rings.\n * However, some components need to be forced to have the same behavior, or adjust the display.\n * This function re-applies the same default outline with a couple parameters\n * @param euiTheme UseEuiTheme.euiTheme\n * @param offset Accepts a specific measurement or 'inset', 'outset' or 'center' to adjust outline position\n * @param color Accepts any CSS color, **Note: only works in -webkit-**\n */\nexport const euiFocusRing = function (_ref) {\n  let {\n    euiTheme\n  } = _ref;\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  // Width is enforced as a constant at the global theme layer\n  const outlineWidth = euiTheme.focus.width;\n  const outlineColor = (options === null || options === void 0 ? void 0 : options.color) || euiTheme.focus.color;\n  let outlineOffset = offset;\n  if (offset === 'inset') {\n    outlineOffset = `-${outlineWidth}`;\n  } else if (offset === 'outset') {\n    outlineOffset = `${outlineWidth}`;\n  } else if (offset === 'center') {\n    outlineOffset = `calc(${outlineWidth} / -2);`;\n  }\n\n  // This function utilizes `focus-visible` to turn on focus outlines.\n  // But this is browser-dependend:\n  // 👉 Safari and Firefox innately respect only showing the outline with keyboard only\n  // 💔 But they don't allow coloring of the 'auto'/default outline, so contrast is no good in dark mode.\n  // 👉 For these browsers we use the solid type in order to match with `currentColor.\n  // 😦 Which does means the outline will be square\n  return `\n    outline: ${outlineWidth} solid ${outlineColor};\n    outline-offset: ${outlineOffset};\n\n    // 👀 Chrome respects :focus-visible and allows coloring the \\`auto\\` style\n    &:focus-visible {\n      outline-style: auto;\n    }\n\n    // 🙅‍♀️ But Chrome also needs to have the outline forcefully removed from regular \\`:focus\\` state\n    &:not(:focus-visible) {\n      outline: none;\n    }\n  `;\n};\nexport const useEuiFocusRing = (offset, color) => {\n  _s();\n  const euiTheme = useEuiTheme();\n  return euiFocusRing(euiTheme, offset, {\n    color\n  });\n};\n_s(useEuiFocusRing, \"Bx9xhCu9FBDDsW1EAb0vyzghspA=\", false, function () {\n  return [useEuiTheme];\n});","map":{"version":3,"names":["useEuiTheme","euiFocusRing","euiTheme","offset","options","outlineWidth","focus","width","outlineColor","color","outlineOffset","useEuiFocusRing"],"sources":["/Users/nikita/Downloads/super_date_picker/src/global_styling/mixins/_states.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { CSSProperties } from 'react';\nimport { useEuiTheme, UseEuiTheme } from '../../services';\n\nexport type _EuiFocusRingOffset =\n  | 'inset'\n  | 'outset'\n  | 'center'\n  | CSSProperties['outlineOffset'];\n\n/**\n * It is best practice to utilize the browser's default `outline` property for handling focus rings.\n * However, some components need to be forced to have the same behavior, or adjust the display.\n * This function re-applies the same default outline with a couple parameters\n * @param euiTheme UseEuiTheme.euiTheme\n * @param offset Accepts a specific measurement or 'inset', 'outset' or 'center' to adjust outline position\n * @param color Accepts any CSS color, **Note: only works in -webkit-**\n */\nexport const euiFocusRing = (\n  { euiTheme }: UseEuiTheme,\n  offset: _EuiFocusRingOffset = 'center',\n  options?: { color?: CSSProperties['outlineColor'] }\n) => {\n  // Width is enforced as a constant at the global theme layer\n  const outlineWidth = euiTheme.focus.width;\n  const outlineColor = options?.color || euiTheme.focus.color;\n\n  let outlineOffset = offset;\n  if (offset === 'inset') {\n    outlineOffset = `-${outlineWidth}`;\n  } else if (offset === 'outset') {\n    outlineOffset = `${outlineWidth}`;\n  } else if (offset === 'center') {\n    outlineOffset = `calc(${outlineWidth} / -2);`;\n  }\n\n  // This function utilizes `focus-visible` to turn on focus outlines.\n  // But this is browser-dependend:\n  // 👉 Safari and Firefox innately respect only showing the outline with keyboard only\n  // 💔 But they don't allow coloring of the 'auto'/default outline, so contrast is no good in dark mode.\n  // 👉 For these browsers we use the solid type in order to match with `currentColor.\n  // 😦 Which does means the outline will be square\n  return `\n    outline: ${outlineWidth} solid ${outlineColor};\n    outline-offset: ${outlineOffset};\n\n    // 👀 Chrome respects :focus-visible and allows coloring the \\`auto\\` style\n    &:focus-visible {\n      outline-style: auto;\n    }\n\n    // 🙅‍♀️ But Chrome also needs to have the outline forcefully removed from regular \\`:focus\\` state\n    &:not(:focus-visible) {\n      outline: none;\n    }\n  `;\n};\nexport const useEuiFocusRing = (\n  offset?: _EuiFocusRingOffset,\n  color?: CSSProperties['outlineColor']\n) => {\n  const euiTheme = useEuiTheme();\n  return euiFocusRing(euiTheme, offset, { color });\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,WAAW,QAAqB,gBAAgB;AAQzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,gBAIvB;EAAA,IAHH;IAAEC;EAAsB,CAAC;EAAA,IACzBC,MAA2B,uEAAG,QAAQ;EAAA,IACtCC,OAAmD;EAEnD;EACA,MAAMC,YAAY,GAAGH,QAAQ,CAACI,KAAK,CAACC,KAAK;EACzC,MAAMC,YAAY,GAAG,CAAAJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,KAAK,KAAIP,QAAQ,CAACI,KAAK,CAACG,KAAK;EAE3D,IAAIC,aAAa,GAAGP,MAAM;EAC1B,IAAIA,MAAM,KAAK,OAAO,EAAE;IACtBO,aAAa,GAAI,IAAGL,YAAa,EAAC;EACpC,CAAC,MAAM,IAAIF,MAAM,KAAK,QAAQ,EAAE;IAC9BO,aAAa,GAAI,GAAEL,YAAa,EAAC;EACnC,CAAC,MAAM,IAAIF,MAAM,KAAK,QAAQ,EAAE;IAC9BO,aAAa,GAAI,QAAOL,YAAa,SAAQ;EAC/C;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,OAAQ;AACV,eAAeA,YAAa,UAASG,YAAa;AAClD,sBAAsBE,aAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD,OAAO,MAAMC,eAAe,GAAG,CAC7BR,MAA4B,EAC5BM,KAAqC,KAClC;EAAA;EACH,MAAMP,QAAQ,GAAGF,WAAW,EAAE;EAC9B,OAAOC,YAAY,CAACC,QAAQ,EAAEC,MAAM,EAAE;IAAEM;EAAM,CAAC,CAAC;AAClD,CAAC;AAAC,GANWE,eAAe;EAAA,QAITX,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}