{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useMemo, useState } from 'react';\nconst generateRandomColor = () =>\n// https://www.paulirish.com/2009/random-hex-color-code-snippets/\n`#${Math.floor(Math.random() * 16777215).toString(16)}`;\nexport const useColorStopsState = function () {\n  _s();\n  let useRandomColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let initialColorStops = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [{\n    stop: 20,\n    color: '#54B399'\n  }, {\n    stop: 50,\n    color: '#D36086'\n  }, {\n    stop: 65,\n    color: '#9170B8'\n  }];\n  const [addColor, setAddColor] = useState(generateRandomColor());\n  const [colorStops, setColorStops] = useState(initialColorStops);\n  const updateColorStops = colorStops => {\n    setColorStops(colorStops);\n    if (useRandomColor) {\n      setAddColor(generateRandomColor());\n    }\n  };\n  return [colorStops, updateColorStops, addColor];\n};\n_s(useColorStopsState, \"AiOO2CNWC/Uwxhu7sH7/VuUySdg=\");\nexport const useColorPickerState = function () {\n  _s2();\n  let initialColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  const [color, setColorValue] = useState(initialColor);\n  const [isValid, setIsValid] = useState(true);\n  const setColor = (text, _ref) => {\n    let {\n      isValid\n    } = _ref;\n    setColorValue(text);\n    setIsValid(isValid);\n  };\n  const errors = useMemo(() => {\n    const hasErrors = !isValid;\n    return hasErrors ? ['Provide a valid color value'] : null;\n  }, [isValid]);\n  return [color, setColor, errors];\n};\n_s2(useColorPickerState, \"vrxwwDkEy7surs3FFFtmoWe4jWs=\");","map":{"version":3,"names":["useMemo","useState","generateRandomColor","Math","floor","random","toString","useColorStopsState","useRandomColor","initialColorStops","stop","color","addColor","setAddColor","colorStops","setColorStops","updateColorStops","useColorPickerState","initialColor","setColorValue","isValid","setIsValid","setColor","text","errors","hasErrors"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/color_picker/color_picker.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useMemo, useState } from 'react';\n\ninterface colorStopsType {\n  stop: number;\n  color: string;\n}\n\nconst generateRandomColor = () =>\n  // https://www.paulirish.com/2009/random-hex-color-code-snippets/\n  `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n\nexport const useColorStopsState = (\n  useRandomColor: boolean = false,\n  initialColorStops: colorStopsType[] = [\n    {\n      stop: 20,\n      color: '#54B399',\n    },\n    {\n      stop: 50,\n      color: '#D36086',\n    },\n    {\n      stop: 65,\n      color: '#9170B8',\n    },\n  ]\n) => {\n  const [addColor, setAddColor] = useState(generateRandomColor());\n  const [colorStops, setColorStops] = useState(initialColorStops);\n\n  const updateColorStops = (colorStops: colorStopsType[]) => {\n    setColorStops(colorStops);\n    if (useRandomColor) {\n      setAddColor(generateRandomColor());\n    }\n  };\n  return [colorStops, updateColorStops, addColor];\n};\n\nexport type EuiSetColorMethod = (\n  text: string,\n  { hex, isValid }: { hex: string; isValid: boolean }\n) => void;\nexport const useColorPickerState = (\n  initialColor = ''\n): [color: string, setColor: EuiSetColorMethod, errors: string[] | null] => {\n  const [color, setColorValue] = useState(initialColor);\n  const [isValid, setIsValid] = useState(true);\n  const setColor: EuiSetColorMethod = (text, { isValid }) => {\n    setColorValue(text);\n    setIsValid(isValid);\n  };\n  const errors = useMemo(() => {\n    const hasErrors = !isValid;\n    return hasErrors ? ['Provide a valid color value'] : null;\n  }, [isValid]);\n\n  return [color, setColor, errors];\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAOzC,MAAMC,mBAAmB,GAAG;AAC1B;AACC,IAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAC;AAEzD,OAAO,MAAMC,kBAAkB,GAAG,YAgB7B;EAAA;EAAA,IAfHC,cAAuB,uEAAG,KAAK;EAAA,IAC/BC,iBAAmC,uEAAG,CACpC;IACEC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE;EACT,CAAC,EACD;IACED,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE;EACT,CAAC,EACD;IACED,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE;EACT,CAAC,CACF;EAED,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACC,mBAAmB,EAAE,CAAC;EAC/D,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAACQ,iBAAiB,CAAC;EAE/D,MAAMO,gBAAgB,GAAIF,UAA4B,IAAK;IACzDC,aAAa,CAACD,UAAU,CAAC;IACzB,IAAIN,cAAc,EAAE;MAClBK,WAAW,CAACX,mBAAmB,EAAE,CAAC;IACpC;EACF,CAAC;EACD,OAAO,CAACY,UAAU,EAAEE,gBAAgB,EAAEJ,QAAQ,CAAC;AACjD,CAAC;AAAC,GA3BWL,kBAAkB;AAiC/B,OAAO,MAAMU,mBAAmB,GAAG,YAEyC;EAAA;EAAA,IAD1EC,YAAY,uEAAG,EAAE;EAEjB,MAAM,CAACP,KAAK,EAAEQ,aAAa,CAAC,GAAGlB,QAAQ,CAACiB,YAAY,CAAC;EACrD,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMqB,QAA2B,GAAG,CAACC,IAAI,WAAkB;IAAA,IAAhB;MAAEH;IAAQ,CAAC;IACpDD,aAAa,CAACI,IAAI,CAAC;IACnBF,UAAU,CAACD,OAAO,CAAC;EACrB,CAAC;EACD,MAAMI,MAAM,GAAGxB,OAAO,CAAC,MAAM;IAC3B,MAAMyB,SAAS,GAAG,CAACL,OAAO;IAC1B,OAAOK,SAAS,GAAG,CAAC,6BAA6B,CAAC,GAAG,IAAI;EAC3D,CAAC,EAAE,CAACL,OAAO,CAAC,CAAC;EAEb,OAAO,CAACT,KAAK,EAAEW,QAAQ,EAAEE,MAAM,CAAC;AAClC,CAAC;AAAC,IAfWP,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}