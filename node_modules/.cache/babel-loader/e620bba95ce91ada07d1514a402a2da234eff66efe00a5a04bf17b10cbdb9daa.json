{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Downloads/super_date_picker/src/date_picker/auto_refresh/auto_refresh.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useState } from \"react\";\nimport classNames from \"classnames\";\nimport { EuiFieldText } from \"../../form\";\nimport { EuiButtonEmpty } from \"../../button/button_empty/button_empty\";\nimport { EuiInputPopover, EuiPopover } from \"../../popover\";\nimport { useEuiI18n } from \"../../i18n\";\nimport { usePrettyInterval } from \"../super_date_picker/pretty_interval\";\nimport { EuiRefreshInterval } from \"./refresh_interval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EuiAutoRefresh = _ref => {\n  _s();\n  let {\n    className,\n    onRefreshChange,\n    isDisabled,\n    isPaused = true,\n    refreshInterval = 1000,\n    readOnly = true,\n    ...rest\n  } = _ref;\n  const classes = classNames(\"euiAutoRefresh\", className);\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const autoRefeshLabel = useEuiI18n(\"euiAutoRefresh.autoRefreshLabel\", \"Auto refresh\");\n  return /*#__PURE__*/_jsxDEV(EuiInputPopover, {\n    className: classes,\n    fullWidth: rest.fullWidth,\n    input: /*#__PURE__*/_jsxDEV(EuiFieldText, {\n      \"aria-label\": autoRefeshLabel,\n      onClick: () => setIsPopoverOpen(isOpen => !isOpen),\n      prepend: /*#__PURE__*/_jsxDEV(EuiButtonEmpty, {\n        className: \"euiFormControlLayout__prepend\",\n        onClick: () => setIsPopoverOpen(isOpen => !isOpen),\n        size: \"s\",\n        color: \"text\",\n        iconType: \"timeRefresh\",\n        isDisabled: isDisabled,\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: autoRefeshLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this),\n      readOnly: readOnly,\n      disabled: isDisabled,\n      value: usePrettyInterval(Boolean(isPaused), refreshInterval),\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this),\n    isOpen: isPopoverOpen,\n    closePopover: () => {\n      setIsPopoverOpen(false);\n    },\n    children: /*#__PURE__*/_jsxDEV(EuiRefreshInterval, {\n      onRefreshChange: onRefreshChange,\n      isPaused: isPaused,\n      refreshInterval: refreshInterval\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(EuiAutoRefresh, \"Jy9cgBoUcyEycjbIAVjCcfoawmQ=\", false, function () {\n  return [useEuiI18n, usePrettyInterval];\n});\n_c = EuiAutoRefresh;\nexport const EuiAutoRefreshButton = _ref2 => {\n  _s2();\n  let {\n    className,\n    onRefreshChange,\n    isDisabled,\n    isPaused = true,\n    refreshInterval = 1000,\n    shortHand = false,\n    size = \"s\",\n    color = \"text\",\n    ...rest\n  } = _ref2;\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const classes = classNames(\"euiAutoRefreshButton\", className);\n  const autoRefeshLabelOff = useEuiI18n(\"euiAutoRefresh.buttonLabelOff\", \"Auto refresh is off\");\n  const autoRefeshLabelOn = useEuiI18n(\"euiAutoRefresh.buttonLabelOn\", \"Auto refresh is on and set to {prettyInterval}\", {\n    prettyInterval: usePrettyInterval(Boolean(isPaused), refreshInterval)\n  });\n  return /*#__PURE__*/_jsxDEV(EuiPopover, {\n    button: /*#__PURE__*/_jsxDEV(EuiButtonEmpty, {\n      onClick: () => setIsPopoverOpen(isOpen => !isOpen),\n      className: classes,\n      size: size,\n      color: color,\n      iconType: \"timeRefresh\",\n      title: isPaused ? autoRefeshLabelOff : autoRefeshLabelOn,\n      isDisabled: isDisabled,\n      ...rest,\n      children: usePrettyInterval(Boolean(isPaused), refreshInterval, shortHand)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this),\n    isOpen: isPopoverOpen,\n    closePopover: () => {\n      setIsPopoverOpen(false);\n    },\n    children: /*#__PURE__*/_jsxDEV(EuiRefreshInterval, {\n      onRefreshChange: onRefreshChange,\n      isPaused: isPaused,\n      refreshInterval: refreshInterval\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s2(EuiAutoRefreshButton, \"pwYpCY3ZHruhsS6zNEnk/REeUOE=\", false, function () {\n  return [useEuiI18n, useEuiI18n, usePrettyInterval, usePrettyInterval];\n});\n_c2 = EuiAutoRefreshButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"EuiAutoRefresh\");\n$RefreshReg$(_c2, \"EuiAutoRefreshButton\");","map":{"version":3,"names":["useState","classNames","EuiFieldText","EuiButtonEmpty","EuiInputPopover","EuiPopover","useEuiI18n","usePrettyInterval","EuiRefreshInterval","EuiAutoRefresh","className","onRefreshChange","isDisabled","isPaused","refreshInterval","readOnly","rest","classes","isPopoverOpen","setIsPopoverOpen","autoRefeshLabel","fullWidth","isOpen","Boolean","EuiAutoRefreshButton","shortHand","size","color","autoRefeshLabelOff","autoRefeshLabelOn","prettyInterval"],"sources":["/Users/nikita/Downloads/super_date_picker/src/date_picker/auto_refresh/auto_refresh.tsx"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { FunctionComponent, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { EuiFieldText, EuiFieldTextProps } from \"../../form\";\nimport {\n  EuiButtonEmpty,\n  CommonEuiButtonEmptyProps,\n} from \"../../button/button_empty/button_empty\";\nimport { EuiInputPopover, EuiPopover } from \"../../popover\";\nimport { useEuiI18n } from \"../../i18n\";\n\nimport { usePrettyInterval } from \"../super_date_picker/pretty_interval\";\nimport {\n  EuiRefreshInterval,\n  EuiRefreshIntervalProps,\n} from \"./refresh_interval\";\n\nexport type EuiAutoRefreshSharedProps = EuiRefreshIntervalProps & {\n  isDisabled?: boolean;\n};\n\nexport type EuiAutoRefreshProps = EuiAutoRefreshSharedProps & {\n  /**\n   * The input is `readOnly` by default because the input value is handled by the popover form.\n   */\n  readOnly?: EuiFieldTextProps[\"readOnly\"];\n} & Omit<EuiFieldTextProps, \"icon\" | \"prepend\" | \"controlOnly\" | \"readOnly\">;\n\nexport const EuiAutoRefresh: FunctionComponent<EuiAutoRefreshProps> = ({\n  className,\n  onRefreshChange,\n  isDisabled,\n  isPaused = true,\n  refreshInterval = 1000,\n  readOnly = true,\n  ...rest\n}) => {\n  const classes = classNames(\"euiAutoRefresh\", className);\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n\n  const autoRefeshLabel = useEuiI18n(\n    \"euiAutoRefresh.autoRefreshLabel\",\n    \"Auto refresh\"\n  );\n\n  return (\n    <EuiInputPopover\n      className={classes}\n      fullWidth={rest.fullWidth}\n      input={\n        <EuiFieldText\n          aria-label={autoRefeshLabel}\n          onClick={() => setIsPopoverOpen((isOpen) => !isOpen)}\n          prepend={\n            <EuiButtonEmpty\n              className=\"euiFormControlLayout__prepend\"\n              onClick={() => setIsPopoverOpen((isOpen) => !isOpen)}\n              size=\"s\"\n              color=\"text\"\n              iconType=\"timeRefresh\"\n              isDisabled={isDisabled}\n            >\n              <strong>\n                <small>{autoRefeshLabel}</small>\n              </strong>\n            </EuiButtonEmpty>\n          }\n          readOnly={readOnly}\n          disabled={isDisabled}\n          value={usePrettyInterval(Boolean(isPaused), refreshInterval)}\n          {...rest}\n        />\n      }\n      isOpen={isPopoverOpen}\n      closePopover={() => {\n        setIsPopoverOpen(false);\n      }}\n    >\n      <EuiRefreshInterval\n        onRefreshChange={onRefreshChange}\n        isPaused={isPaused}\n        refreshInterval={refreshInterval}\n      />\n    </EuiInputPopover>\n  );\n};\n\nexport type EuiAutoRefreshButtonProps = EuiAutoRefreshSharedProps & {\n  /**\n   * Reduces the time unit to a single letter\n   */\n  shortHand?: boolean;\n} & Omit<\n    CommonEuiButtonEmptyProps,\n    \"isSelected\" | \"iconType\" | \"iconSide\" | \"iconSize\" | \"onClick\" | \"type\"\n  >;\n\nexport const EuiAutoRefreshButton: FunctionComponent<\n  EuiAutoRefreshButtonProps\n> = ({\n  className,\n  onRefreshChange,\n  isDisabled,\n  isPaused = true,\n  refreshInterval = 1000,\n  shortHand = false,\n  size = \"s\",\n  color = \"text\",\n  ...rest\n}) => {\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const classes = classNames(\"euiAutoRefreshButton\", className);\n\n  const autoRefeshLabelOff = useEuiI18n(\n    \"euiAutoRefresh.buttonLabelOff\",\n    \"Auto refresh is off\"\n  );\n  const autoRefeshLabelOn = useEuiI18n(\n    \"euiAutoRefresh.buttonLabelOn\",\n    \"Auto refresh is on and set to {prettyInterval}\",\n    { prettyInterval: usePrettyInterval(Boolean(isPaused), refreshInterval) }\n  );\n\n  return (\n    <EuiPopover\n      button={\n        <EuiButtonEmpty\n          onClick={() => setIsPopoverOpen((isOpen) => !isOpen)}\n          className={classes}\n          size={size}\n          color={color}\n          iconType=\"timeRefresh\"\n          title={isPaused ? autoRefeshLabelOff : autoRefeshLabelOn}\n          isDisabled={isDisabled}\n          {...rest}\n        >\n          {usePrettyInterval(Boolean(isPaused), refreshInterval, shortHand)}\n        </EuiButtonEmpty>\n      }\n      isOpen={isPopoverOpen}\n      closePopover={() => {\n        setIsPopoverOpen(false);\n      }}\n    >\n      <EuiRefreshInterval\n        onRefreshChange={onRefreshChange}\n        isPaused={isPaused}\n        refreshInterval={refreshInterval}\n      />\n    </EuiPopover>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}