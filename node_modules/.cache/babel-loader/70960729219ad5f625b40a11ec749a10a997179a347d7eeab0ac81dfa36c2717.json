{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * The `getFormControlClassNameForIconCount` function helps setup the className appendum\n * depending on the form control's current settings/state.\n *\n * @param icon {boolean} Does it contain a static icon like arrowDown\n * @param clear {boolean} Is it currently clearable\n * @param isLoading {boolean} Is is currently loading\n * @param isInvalid {boolean} It is currently invalid\n * @param isDropdown {boolean} It is as dropdown\n * @returns {string | undefined} Returns the string to append to the base className of the form control; or `undefined` if all evaluate to false\n */\n\nexport function getFormControlClassNameForIconCount(_ref) {\n  let {\n    icon,\n    clear,\n    isLoading,\n    isInvalid,\n    isDropdown\n  } = _ref;\n  const numIcons = [icon, clear, isInvalid, isLoading, isDropdown].filter(item => item === true).length;\n\n  // This className is also specifically used in `src/global_styling/mixins/_form.scss`\n  return numIcons > 0 ? `euiFormControlLayout--${numIcons}icons` : undefined;\n}","map":{"version":3,"names":["getFormControlClassNameForIconCount","icon","clear","isLoading","isInvalid","isDropdown","numIcons","filter","item","length","undefined"],"sources":["/Users/nikita/Downloads/super_date_picker/src/form/form_control_layout/_num_icons.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\n/**\n * The `getFormControlClassNameForIconCount` function helps setup the className appendum\n * depending on the form control's current settings/state.\n *\n * @param icon {boolean} Does it contain a static icon like arrowDown\n * @param clear {boolean} Is it currently clearable\n * @param isLoading {boolean} Is is currently loading\n * @param isInvalid {boolean} It is currently invalid\n * @param isDropdown {boolean} It is as dropdown\n * @returns {string | undefined} Returns the string to append to the base className of the form control; or `undefined` if all evaluate to false\n */\n\nexport type _EuiFormControlLayoutNumIcons = {\n  icon?: boolean;\n  clear?: boolean;\n  isLoading?: boolean;\n  isInvalid?: boolean;\n  isDropdown?: boolean;\n};\n\nexport function getFormControlClassNameForIconCount({\n  icon,\n  clear,\n  isLoading,\n  isInvalid,\n  isDropdown,\n}: _EuiFormControlLayoutNumIcons): string | undefined {\n  const numIcons = [icon, clear, isInvalid, isLoading, isDropdown].filter(\n    (item) => item === true\n  ).length;\n\n  // This className is also specifically used in `src/global_styling/mixins/_form.scss`\n  return numIcons > 0 ? `euiFormControlLayout--${numIcons}icons` : undefined;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,OAAO,SAASA,mCAAmC,OAMG;EAAA,IANF;IAClDC,IAAI;IACJC,KAAK;IACLC,SAAS;IACTC,SAAS;IACTC;EAC6B,CAAC;EAC9B,MAAMC,QAAQ,GAAG,CAACL,IAAI,EAAEC,KAAK,EAAEE,SAAS,EAAED,SAAS,EAAEE,UAAU,CAAC,CAACE,MAAM,CACpEC,IAAI,IAAKA,IAAI,KAAK,IAAI,CACxB,CAACC,MAAM;;EAER;EACA,OAAOH,QAAQ,GAAG,CAAC,GAAI,yBAAwBA,QAAS,OAAM,GAAGI,SAAS;AAC5E"},"metadata":{},"sourceType":"module","externalDependencies":[]}