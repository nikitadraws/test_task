{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport chroma from 'chroma-js';\nimport { isValidHex } from './is_valid_hex';\nconst inOriginalFormat = (originalColor, newColor) => {\n  return isValidHex(originalColor) ? newColor.hex() : newColor.css();\n};\n\n/**\n * Makes a color more transparent.\n * @param color - Color to manipulate\n * @param alpha - alpha channel value. From 0-1.\n */\nexport const transparentize = (color, alpha) => chroma(color).alpha(alpha).css();\n\n/**\n * Mixes a provided color with white.\n * @param color - Color to mix with white\n * @param ratio - Mix weight. From 0-1. Larger value indicates more white.\n */\nexport const tint = (color, ratio) => {\n  const tint = chroma.mix(color, '#fff', ratio, 'rgb');\n  return inOriginalFormat(color, tint);\n};\n\n/**\n * Mixes a provided color with black.\n * @param color - Color to mix with black\n * @param ratio - Mix weight. From 0-1. Larger value indicates more black.\n */\nexport const shade = (color, ratio) => {\n  const shade = chroma.mix(color, '#000', ratio, 'rgb');\n  return inOriginalFormat(color, shade);\n};\n\n/**\n * Returns the tinted color for light mode and shaded color for dark mode\n * @param color - Color to mix with white\n * @param ratio - Mix weight. From 0-1. Larger value indicates more white.\n * @param colorMode - Light or dark only\n */\nexport const tintOrShade = (color, ratio, colorMode) => {\n  return colorMode === 'DARK' ? shade(color, ratio) : tint(color, ratio);\n};\n\n/**\n * Returns the shaded color for light mode and tinted color for dark mode\n * @param color - Color to mix with white\n * @param ratio - Mix weight. From 0-1. Larger value indicates more white.\n * @param colorMode - Light or dark only\n */\nexport const shadeOrTint = (color, ratio, colorMode) => {\n  return colorMode === 'DARK' ? tint(color, ratio) : shade(color, ratio);\n};\n\n/**\n * Increases the saturation of a color by manipulating the hsl saturation.\n * @param color - Color to manipulate\n * @param amount - Amount to change in absolute terms. 0-1.\n */\nexport const saturate = (color, amount) => {\n  const saturate = chroma(color).set('hsl.s', `+${amount}`);\n  return inOriginalFormat(color, saturate);\n};\n\n/**\n * Decreases the saturation of a color by manipulating the hsl saturation.\n * @param color - Color to manipulate\n * @param amount - Amount to change in absolute terms. 0-1.\n */\nexport const desaturate = (color, amount) => {\n  const desaturate = chroma(color).set('hsl.s', `-${amount}`);\n  return inOriginalFormat(color, desaturate);\n};\n\n/**\n * Returns the lightness value of a color. 0-100\n * @param color\n */\nexport const lightness = color => chroma(color).get('hsl.l') * 100;\n\n/**\n * Returns the darken value of a color. 0-100\n * @param color - Color to manipulate\n * @param amount - Amount to change in absolute terms. 0-1.\n */\nexport const darken = (color, amount) => chroma(color).darken(amount).hex();","map":{"version":3,"names":["chroma","isValidHex","inOriginalFormat","originalColor","newColor","hex","css","transparentize","color","alpha","tint","ratio","mix","shade","tintOrShade","colorMode","shadeOrTint","saturate","amount","set","desaturate","lightness","get","darken"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/color/manipulation.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport chroma, { Color } from 'chroma-js';\nimport { EuiThemeColorModeStandard } from '../theme';\nimport { isValidHex } from './is_valid_hex';\n\nconst inOriginalFormat = (originalColor: string, newColor: Color) => {\n  return isValidHex(originalColor) ? newColor.hex() : newColor.css();\n};\n\n/**\n * Makes a color more transparent.\n * @param color - Color to manipulate\n * @param alpha - alpha channel value. From 0-1.\n */\nexport const transparentize = (color: string, alpha: number) =>\n  chroma(color).alpha(alpha).css();\n\n/**\n * Mixes a provided color with white.\n * @param color - Color to mix with white\n * @param ratio - Mix weight. From 0-1. Larger value indicates more white.\n */\nexport const tint = (color: string, ratio: number) => {\n  const tint = chroma.mix(color, '#fff', ratio, 'rgb');\n  return inOriginalFormat(color, tint);\n};\n\n/**\n * Mixes a provided color with black.\n * @param color - Color to mix with black\n * @param ratio - Mix weight. From 0-1. Larger value indicates more black.\n */\nexport const shade = (color: string, ratio: number) => {\n  const shade = chroma.mix(color, '#000', ratio, 'rgb');\n  return inOriginalFormat(color, shade);\n};\n\n/**\n * Returns the tinted color for light mode and shaded color for dark mode\n * @param color - Color to mix with white\n * @param ratio - Mix weight. From 0-1. Larger value indicates more white.\n * @param colorMode - Light or dark only\n */\nexport const tintOrShade = (\n  color: string,\n  ratio: number,\n  colorMode: EuiThemeColorModeStandard\n) => {\n  return colorMode === 'DARK' ? shade(color, ratio) : tint(color, ratio);\n};\n\n/**\n * Returns the shaded color for light mode and tinted color for dark mode\n * @param color - Color to mix with white\n * @param ratio - Mix weight. From 0-1. Larger value indicates more white.\n * @param colorMode - Light or dark only\n */\nexport const shadeOrTint = (\n  color: string,\n  ratio: number,\n  colorMode: EuiThemeColorModeStandard\n) => {\n  return colorMode === 'DARK' ? tint(color, ratio) : shade(color, ratio);\n};\n\n/**\n * Increases the saturation of a color by manipulating the hsl saturation.\n * @param color - Color to manipulate\n * @param amount - Amount to change in absolute terms. 0-1.\n */\nexport const saturate = (color: string, amount: number) => {\n  const saturate = chroma(color).set('hsl.s', `+${amount}`);\n  return inOriginalFormat(color, saturate);\n};\n\n/**\n * Decreases the saturation of a color by manipulating the hsl saturation.\n * @param color - Color to manipulate\n * @param amount - Amount to change in absolute terms. 0-1.\n */\nexport const desaturate = (color: string, amount: number) => {\n  const desaturate = chroma(color).set('hsl.s', `-${amount}`);\n  return inOriginalFormat(color, desaturate);\n};\n\n/**\n * Returns the lightness value of a color. 0-100\n * @param color\n */\nexport const lightness = (color: string) => chroma(color).get('hsl.l') * 100;\n\n/**\n * Returns the darken value of a color. 0-100\n * @param color - Color to manipulate\n * @param amount - Amount to change in absolute terms. 0-1.\n */\nexport const darken = (color: string, amount: number) =>\n  chroma(color).darken(amount).hex();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAiB,WAAW;AAEzC,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,MAAMC,gBAAgB,GAAG,CAACC,aAAqB,EAAEC,QAAe,KAAK;EACnE,OAAOH,UAAU,CAACE,aAAa,CAAC,GAAGC,QAAQ,CAACC,GAAG,EAAE,GAAGD,QAAQ,CAACE,GAAG,EAAE;AACpE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAa,EAAEC,KAAa,KACzDT,MAAM,CAACQ,KAAK,CAAC,CAACC,KAAK,CAACA,KAAK,CAAC,CAACH,GAAG,EAAE;;AAElC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,IAAI,GAAG,CAACF,KAAa,EAAEG,KAAa,KAAK;EACpD,MAAMD,IAAI,GAAGV,MAAM,CAACY,GAAG,CAACJ,KAAK,EAAE,MAAM,EAAEG,KAAK,EAAE,KAAK,CAAC;EACpD,OAAOT,gBAAgB,CAACM,KAAK,EAAEE,IAAI,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,KAAK,GAAG,CAACL,KAAa,EAAEG,KAAa,KAAK;EACrD,MAAME,KAAK,GAAGb,MAAM,CAACY,GAAG,CAACJ,KAAK,EAAE,MAAM,EAAEG,KAAK,EAAE,KAAK,CAAC;EACrD,OAAOT,gBAAgB,CAACM,KAAK,EAAEK,KAAK,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,CACzBN,KAAa,EACbG,KAAa,EACbI,SAAoC,KACjC;EACH,OAAOA,SAAS,KAAK,MAAM,GAAGF,KAAK,CAACL,KAAK,EAAEG,KAAK,CAAC,GAAGD,IAAI,CAACF,KAAK,EAAEG,KAAK,CAAC;AACxE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,WAAW,GAAG,CACzBR,KAAa,EACbG,KAAa,EACbI,SAAoC,KACjC;EACH,OAAOA,SAAS,KAAK,MAAM,GAAGL,IAAI,CAACF,KAAK,EAAEG,KAAK,CAAC,GAAGE,KAAK,CAACL,KAAK,EAAEG,KAAK,CAAC;AACxE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,QAAQ,GAAG,CAACT,KAAa,EAAEU,MAAc,KAAK;EACzD,MAAMD,QAAQ,GAAGjB,MAAM,CAACQ,KAAK,CAAC,CAACW,GAAG,CAAC,OAAO,EAAG,IAAGD,MAAO,EAAC,CAAC;EACzD,OAAOhB,gBAAgB,CAACM,KAAK,EAAES,QAAQ,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,UAAU,GAAG,CAACZ,KAAa,EAAEU,MAAc,KAAK;EAC3D,MAAME,UAAU,GAAGpB,MAAM,CAACQ,KAAK,CAAC,CAACW,GAAG,CAAC,OAAO,EAAG,IAAGD,MAAO,EAAC,CAAC;EAC3D,OAAOhB,gBAAgB,CAACM,KAAK,EAAEY,UAAU,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAIb,KAAa,IAAKR,MAAM,CAACQ,KAAK,CAAC,CAACc,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG;;AAE5E;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG,CAACf,KAAa,EAAEU,MAAc,KAClDlB,MAAM,CAACQ,KAAK,CAAC,CAACe,MAAM,CAACL,MAAM,CAAC,CAACb,GAAG,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}