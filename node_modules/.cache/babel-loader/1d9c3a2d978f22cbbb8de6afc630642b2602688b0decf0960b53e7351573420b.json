{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useEuiTheme } from '../theme';\nimport { useCurrentEuiBreakpoint } from './current_breakpoint_hook';\n\n/**\n * Given an array of breakpoint keys, this hook returns true or false\n * if the breakpoint size of the current window width falls within\n * any of the named breakpoints.\n *\n * @param {EuiThemeBreakpoint[]} sizes An array of named EUI breakpoints\n * @param {boolean} isResponsive Some components have the option to turn off responsive behavior.\n *   Since hooks can't be called conditionally, it's easier to pass the condition into the hook\n * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`\n */\nexport const useIsWithinBreakpoints = function (sizes) {\n  _s();\n  let isResponsive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const currentBreakpoint = useCurrentEuiBreakpoint();\n  return currentBreakpoint && isResponsive ? sizes.includes(currentBreakpoint) : false;\n};\n\n/**\n * Given a max breakpoint key, this hook returns true if the breakpoint size\n * of the current window width falls within the max breakpoint or any below,\n * and false otherwise\n *\n * @param {EuiThemeBreakpoint} max The named max breakpoint to check against\n * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint\n */\n_s(useIsWithinBreakpoints, \"gYhaNKJRMeFiHk8yWKPNiCwWeQo=\", false, function () {\n  return [useCurrentEuiBreakpoint];\n});\nexport function useIsWithinMaxBreakpoint(max) {\n  _s2();\n  const {\n    euiTheme: {\n      breakpoint: breakpoints\n    }\n  } = useEuiTheme();\n  const currentBreakpoint = useCurrentEuiBreakpoint();\n  if (currentBreakpoint == null || breakpoints[max] == null) {\n    return false;\n  }\n  return breakpoints[currentBreakpoint] <= breakpoints[max];\n}\n\n/**\n * Given a min breakpoint key, this hook returns true if the breakpoint size\n * of the current window width falls within the min breakpoint or any above,\n * and false otherwise\n *\n * @param {EuiThemeBreakpoint} min The named min breakpoint to check against\n * @returns {boolean} Will return `false` if it can't find a value for the `min` breakpoint\n */\n_s2(useIsWithinMaxBreakpoint, \"l0O2Efsvk8PIeS6d2YyiNqtULUI=\", false, function () {\n  return [useEuiTheme, useCurrentEuiBreakpoint];\n});\nexport function useIsWithinMinBreakpoint(min) {\n  _s3();\n  const {\n    euiTheme: {\n      breakpoint: breakpoints\n    }\n  } = useEuiTheme();\n  const currentBreakpoint = useCurrentEuiBreakpoint();\n  if (currentBreakpoint == null || breakpoints[min] == null) {\n    return false;\n  }\n  return breakpoints[currentBreakpoint] >= breakpoints[min];\n}\n_s3(useIsWithinMinBreakpoint, \"l0O2Efsvk8PIeS6d2YyiNqtULUI=\", false, function () {\n  return [useEuiTheme, useCurrentEuiBreakpoint];\n});","map":{"version":3,"names":["useEuiTheme","useCurrentEuiBreakpoint","useIsWithinBreakpoints","sizes","isResponsive","currentBreakpoint","includes","useIsWithinMaxBreakpoint","max","euiTheme","breakpoint","breakpoints","useIsWithinMinBreakpoint","min"],"sources":["/Users/nikita/Downloads/super_date_picker/src/services/breakpoint/is_within_hooks.ts"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { _EuiThemeBreakpoint } from '../../global_styling/variables/breakpoint';\nimport { useEuiTheme } from '../theme';\nimport { useCurrentEuiBreakpoint } from './current_breakpoint_hook';\n\n/**\n * Given an array of breakpoint keys, this hook returns true or false\n * if the breakpoint size of the current window width falls within\n * any of the named breakpoints.\n *\n * @param {EuiThemeBreakpoint[]} sizes An array of named EUI breakpoints\n * @param {boolean} isResponsive Some components have the option to turn off responsive behavior.\n *   Since hooks can't be called conditionally, it's easier to pass the condition into the hook\n * @returns {boolean} Returns `true` if current breakpoint name is included in `sizes`\n */\nexport const useIsWithinBreakpoints = (\n  sizes: _EuiThemeBreakpoint[],\n  isResponsive = true\n) => {\n  const currentBreakpoint = useCurrentEuiBreakpoint();\n\n  return currentBreakpoint && isResponsive\n    ? sizes.includes(currentBreakpoint)\n    : false;\n};\n\n/**\n * Given a max breakpoint key, this hook returns true if the breakpoint size\n * of the current window width falls within the max breakpoint or any below,\n * and false otherwise\n *\n * @param {EuiThemeBreakpoint} max The named max breakpoint to check against\n * @returns {boolean} Will return `false` if it can't find a value for the `max` breakpoint\n */\nexport function useIsWithinMaxBreakpoint(max: _EuiThemeBreakpoint): boolean {\n  const {\n    euiTheme: { breakpoint: breakpoints },\n  } = useEuiTheme();\n  const currentBreakpoint = useCurrentEuiBreakpoint();\n\n  if (currentBreakpoint == null || breakpoints[max] == null) {\n    return false;\n  }\n\n  return breakpoints[currentBreakpoint] <= breakpoints[max];\n}\n\n/**\n * Given a min breakpoint key, this hook returns true if the breakpoint size\n * of the current window width falls within the min breakpoint or any above,\n * and false otherwise\n *\n * @param {EuiThemeBreakpoint} min The named min breakpoint to check against\n * @returns {boolean} Will return `false` if it can't find a value for the `min` breakpoint\n */\nexport function useIsWithinMinBreakpoint(min: _EuiThemeBreakpoint): boolean {\n  const {\n    euiTheme: { breakpoint: breakpoints },\n  } = useEuiTheme();\n  const currentBreakpoint = useCurrentEuiBreakpoint();\n\n  if (currentBreakpoint == null || breakpoints[min] == null) {\n    return false;\n  }\n\n  return breakpoints[currentBreakpoint] >= breakpoints[min];\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,WAAW,QAAQ,UAAU;AACtC,SAASC,uBAAuB,QAAQ,2BAA2B;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,UACpCC,KAA4B,EAEzB;EAAA;EAAA,IADHC,YAAY,uEAAG,IAAI;EAEnB,MAAMC,iBAAiB,GAAGJ,uBAAuB,EAAE;EAEnD,OAAOI,iBAAiB,IAAID,YAAY,GACpCD,KAAK,CAACG,QAAQ,CAACD,iBAAiB,CAAC,GACjC,KAAK;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,GAXaH,sBAAsB;EAAA,QAIPD,uBAAuB;AAAA;AAenD,OAAO,SAASM,wBAAwB,CAACC,GAAwB,EAAW;EAAA;EAC1E,MAAM;IACJC,QAAQ,EAAE;MAAEC,UAAU,EAAEC;IAAY;EACtC,CAAC,GAAGX,WAAW,EAAE;EACjB,MAAMK,iBAAiB,GAAGJ,uBAAuB,EAAE;EAEnD,IAAII,iBAAiB,IAAI,IAAI,IAAIM,WAAW,CAACH,GAAG,CAAC,IAAI,IAAI,EAAE;IACzD,OAAO,KAAK;EACd;EAEA,OAAOG,WAAW,CAACN,iBAAiB,CAAC,IAAIM,WAAW,CAACH,GAAG,CAAC;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IAbgBD,wBAAwB;EAAA,QAGlCP,WAAW,EACWC,uBAAuB;AAAA;AAiBnD,OAAO,SAASW,wBAAwB,CAACC,GAAwB,EAAW;EAAA;EAC1E,MAAM;IACJJ,QAAQ,EAAE;MAAEC,UAAU,EAAEC;IAAY;EACtC,CAAC,GAAGX,WAAW,EAAE;EACjB,MAAMK,iBAAiB,GAAGJ,uBAAuB,EAAE;EAEnD,IAAII,iBAAiB,IAAI,IAAI,IAAIM,WAAW,CAACE,GAAG,CAAC,IAAI,IAAI,EAAE;IACzD,OAAO,KAAK;EACd;EAEA,OAAOF,WAAW,CAACN,iBAAiB,CAAC,IAAIM,WAAW,CAACE,GAAG,CAAC;AAC3D;AAAC,IAXeD,wBAAwB;EAAA,QAGlCZ,WAAW,EACWC,uBAAuB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}